/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieNetPlatform.Client;
using BungieNetPlatform.Model;

namespace BungieNetPlatform.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrendingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20053</returns>
        InlineResponse20053 TrendingGetTrendingCategories ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        ApiResponse<InlineResponse20053> TrendingGetTrendingCategoriesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns paginated lists of trending items for a category.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>InlineResponse20054</returns>
        InlineResponse20054 TrendingGetTrendingCategory (string categoryId, int? pageNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns paginated lists of trending items for a category.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        ApiResponse<InlineResponse20054> TrendingGetTrendingCategoryWithHttpInfo (string categoryId, int? pageNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>InlineResponse20055</returns>
        InlineResponse20055 TrendingGetTrendingEntryDetail (string identifier, int? trendingEntryType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        ApiResponse<InlineResponse20055> TrendingGetTrendingEntryDetailWithHttpInfo (string identifier, int? trendingEntryType);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20053</returns>
        System.Threading.Tasks.Task<InlineResponse20053> TrendingGetTrendingCategoriesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> TrendingGetTrendingCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns paginated lists of trending items for a category.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>Task of InlineResponse20054</returns>
        System.Threading.Tasks.Task<InlineResponse20054> TrendingGetTrendingCategoryAsync (string categoryId, int? pageNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns paginated lists of trending items for a category.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> TrendingGetTrendingCategoryAsyncWithHttpInfo (string categoryId, int? pageNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>Task of InlineResponse20055</returns>
        System.Threading.Tasks.Task<InlineResponse20055> TrendingGetTrendingEntryDetailAsync (string identifier, int? trendingEntryType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> TrendingGetTrendingEntryDetailAsyncWithHttpInfo (string identifier, int? trendingEntryType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrendingApi : ITrendingApi
    {
        private BungieNetPlatform.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrendingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrendingApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = BungieNetPlatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrendingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrendingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieNetPlatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetPlatform.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20053</returns>
        public InlineResponse20053 TrendingGetTrendingCategories ()
        {
             ApiResponse<InlineResponse20053> localVarResponse = TrendingGetTrendingCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        public ApiResponse< InlineResponse20053 > TrendingGetTrendingCategoriesWithHttpInfo ()
        {

            var localVarPath = "/Trending/Categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendingGetTrendingCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20053) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        ///  Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20053</returns>
        public async System.Threading.Tasks.Task<InlineResponse20053> TrendingGetTrendingCategoriesAsync ()
        {
             ApiResponse<InlineResponse20053> localVarResponse = await TrendingGetTrendingCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> TrendingGetTrendingCategoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Trending/Categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendingGetTrendingCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20053) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        ///  Returns paginated lists of trending items for a category.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>InlineResponse20054</returns>
        public InlineResponse20054 TrendingGetTrendingCategory (string categoryId, int? pageNumber)
        {
             ApiResponse<InlineResponse20054> localVarResponse = TrendingGetTrendingCategoryWithHttpInfo(categoryId, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns paginated lists of trending items for a category.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        public ApiResponse< InlineResponse20054 > TrendingGetTrendingCategoryWithHttpInfo (string categoryId, int? pageNumber)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling TrendingApi->TrendingGetTrendingCategory");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TrendingApi->TrendingGetTrendingCategory");

            var localVarPath = "/Trending/Categories/{categoryId}/{pageNumber}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendingGetTrendingCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20054) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        ///  Returns paginated lists of trending items for a category.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>Task of InlineResponse20054</returns>
        public async System.Threading.Tasks.Task<InlineResponse20054> TrendingGetTrendingCategoryAsync (string categoryId, int? pageNumber)
        {
             ApiResponse<InlineResponse20054> localVarResponse = await TrendingGetTrendingCategoryAsyncWithHttpInfo(categoryId, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns paginated lists of trending items for a category.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> TrendingGetTrendingCategoryAsyncWithHttpInfo (string categoryId, int? pageNumber)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling TrendingApi->TrendingGetTrendingCategory");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TrendingApi->TrendingGetTrendingCategory");

            var localVarPath = "/Trending/Categories/{categoryId}/{pageNumber}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendingGetTrendingCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20054) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        ///  Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>InlineResponse20055</returns>
        public InlineResponse20055 TrendingGetTrendingEntryDetail (string identifier, int? trendingEntryType)
        {
             ApiResponse<InlineResponse20055> localVarResponse = TrendingGetTrendingEntryDetailWithHttpInfo(identifier, trendingEntryType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        public ApiResponse< InlineResponse20055 > TrendingGetTrendingEntryDetailWithHttpInfo (string identifier, int? trendingEntryType)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling TrendingApi->TrendingGetTrendingEntryDetail");
            // verify the required parameter 'trendingEntryType' is set
            if (trendingEntryType == null)
                throw new ApiException(400, "Missing required parameter 'trendingEntryType' when calling TrendingApi->TrendingGetTrendingEntryDetail");

            var localVarPath = "/Trending/Details/{trendingEntryType}/{identifier}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (trendingEntryType != null) localVarPathParams.Add("trendingEntryType", Configuration.ApiClient.ParameterToString(trendingEntryType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendingGetTrendingEntryDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20055>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20055) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20055)));
        }

        /// <summary>
        ///  Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>Task of InlineResponse20055</returns>
        public async System.Threading.Tasks.Task<InlineResponse20055> TrendingGetTrendingEntryDetailAsync (string identifier, int? trendingEntryType)
        {
             ApiResponse<InlineResponse20055> localVarResponse = await TrendingGetTrendingEntryDetailAsyncWithHttpInfo(identifier, trendingEntryType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> TrendingGetTrendingEntryDetailAsyncWithHttpInfo (string identifier, int? trendingEntryType)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling TrendingApi->TrendingGetTrendingEntryDetail");
            // verify the required parameter 'trendingEntryType' is set
            if (trendingEntryType == null)
                throw new ApiException(400, "Missing required parameter 'trendingEntryType' when calling TrendingApi->TrendingGetTrendingEntryDetail");

            var localVarPath = "/Trending/Details/{trendingEntryType}/{identifier}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (trendingEntryType != null) localVarPathParams.Add("trendingEntryType", Configuration.ApiClient.ParameterToString(trendingEntryType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendingGetTrendingEntryDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20055>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20055) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20055)));
        }

    }
}
