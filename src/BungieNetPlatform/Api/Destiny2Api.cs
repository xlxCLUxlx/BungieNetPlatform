/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieNetPlatform.Client;
using BungieNetPlatform.Model;

namespace BungieNetPlatform.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestiny2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 Destiny2ActivateTalentNode ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> Destiny2ActivateTalentNodeWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 Destiny2EquipItem ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> Destiny2EquipItemWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 Destiny2EquipItems ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> Destiny2EquipItemsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>InlineResponse20046</returns>
        InlineResponse20046 Destiny2GetActivityHistory (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        ApiResponse<InlineResponse20046> Destiny2GetActivityHistoryWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 Destiny2GetCharacter (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> Destiny2GetCharacterWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>InlineResponse20042</returns>
        InlineResponse20042 Destiny2GetClanAggregateStats (long? groupId, string modes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        ApiResponse<InlineResponse20042> Destiny2GetClanAggregateStatsWithHttpInfo (long? groupId, string modes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 Destiny2GetClanLeaderboards (long? groupId, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> Destiny2GetClanLeaderboardsWithHttpInfo (long? groupId, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 Destiny2GetClanWeeklyRewardState (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> Destiny2GetClanWeeklyRewardStateWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 Destiny2GetDestinyAggregateActivityStats (long? characterId, long? destinyMembershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> Destiny2GetDestinyAggregateActivityStatsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 Destiny2GetDestinyEntityDefinition (string entityType, uint? hashIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> Destiny2GetDestinyEntityDefinitionWithHttpInfo (string entityType, uint? hashIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 Destiny2GetDestinyManifest ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> Destiny2GetDestinyManifestWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>InlineResponse20044</returns>
        InlineResponse20044 Destiny2GetHistoricalStats (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        ApiResponse<InlineResponse20044> Destiny2GetHistoricalStatsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 Destiny2GetHistoricalStatsDefinition ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> Destiny2GetHistoricalStatsDefinitionWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 Destiny2GetHistoricalStatsForAccount (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> Destiny2GetHistoricalStatsForAccountWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 Destiny2GetItem (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> Destiny2GetItemWithHttpInfo (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 Destiny2GetLeaderboards (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> Destiny2GetLeaderboardsWithHttpInfo (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 Destiny2GetLeaderboardsForCharacter (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> Destiny2GetLeaderboardsForCharacterWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>InlineResponse20039</returns>
        InlineResponse20039 Destiny2GetPostGameCarnageReport (long? activityId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        ApiResponse<InlineResponse20039> Destiny2GetPostGameCarnageReportWithHttpInfo (long? activityId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 Destiny2GetProfile (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> Destiny2GetProfileWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>InlineResponse20049</returns>
        InlineResponse20049 Destiny2GetPublicMilestoneContent (uint? milestoneHash);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        ApiResponse<InlineResponse20049> Destiny2GetPublicMilestoneContentWithHttpInfo (uint? milestoneHash);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 Destiny2GetPublicMilestones ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> Destiny2GetPublicMilestonesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 Destiny2GetUniqueWeaponHistory (long? characterId, long? destinyMembershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> Destiny2GetUniqueWeaponHistoryWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 Destiny2GetVendor (long? characterId, long? destinyMembershipId, int? membershipType, uint? vendorHash, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> Destiny2GetVendorWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, uint? vendorHash, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 Destiny2GetVendors (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> Destiny2GetVendorsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 Destiny2InsertSocketPlug ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> Destiny2InsertSocketPlugWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 Destiny2SearchDestinyEntities (string searchTerm, string type, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> Destiny2SearchDestinyEntitiesWithHttpInfo (string searchTerm, string type, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 Destiny2SearchDestinyPlayer (string displayName, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> Destiny2SearchDestinyPlayerWithHttpInfo (string displayName, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 Destiny2SetItemLockState ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> Destiny2SetItemLockStateWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 Destiny2TransferItem ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> Destiny2TransferItemWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> Destiny2ActivateTalentNodeAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2ActivateTalentNodeAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> Destiny2EquipItemAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2EquipItemAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> Destiny2EquipItemsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> Destiny2EquipItemsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of InlineResponse20046</returns>
        System.Threading.Tasks.Task<InlineResponse20046> Destiny2GetActivityHistoryAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> Destiny2GetActivityHistoryAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> Destiny2GetCharacterAsync (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> Destiny2GetCharacterAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>Task of InlineResponse20042</returns>
        System.Threading.Tasks.Task<InlineResponse20042> Destiny2GetClanAggregateStatsAsync (long? groupId, string modes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> Destiny2GetClanAggregateStatsAsyncWithHttpInfo (long? groupId, string modes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> Destiny2GetClanLeaderboardsAsync (long? groupId, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> Destiny2GetClanLeaderboardsAsyncWithHttpInfo (long? groupId, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> Destiny2GetClanWeeklyRewardStateAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> Destiny2GetClanWeeklyRewardStateAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> Destiny2GetDestinyAggregateActivityStatsAsync (long? characterId, long? destinyMembershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> Destiny2GetDestinyAggregateActivityStatsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> Destiny2GetDestinyEntityDefinitionAsync (string entityType, uint? hashIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> Destiny2GetDestinyEntityDefinitionAsyncWithHttpInfo (string entityType, uint? hashIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> Destiny2GetDestinyManifestAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> Destiny2GetDestinyManifestAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        System.Threading.Tasks.Task<InlineResponse20044> Destiny2GetHistoricalStatsAsync (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> Destiny2GetHistoricalStatsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> Destiny2GetHistoricalStatsDefinitionAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> Destiny2GetHistoricalStatsDefinitionAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> Destiny2GetHistoricalStatsForAccountAsync (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> Destiny2GetHistoricalStatsForAccountAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> Destiny2GetItemAsync (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> Destiny2GetItemAsyncWithHttpInfo (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> Destiny2GetLeaderboardsAsync (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> Destiny2GetLeaderboardsAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> Destiny2GetLeaderboardsForCharacterAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> Destiny2GetLeaderboardsForCharacterAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>Task of InlineResponse20039</returns>
        System.Threading.Tasks.Task<InlineResponse20039> Destiny2GetPostGameCarnageReportAsync (long? activityId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> Destiny2GetPostGameCarnageReportAsyncWithHttpInfo (long? activityId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> Destiny2GetProfileAsync (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> Destiny2GetProfileAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>Task of InlineResponse20049</returns>
        System.Threading.Tasks.Task<InlineResponse20049> Destiny2GetPublicMilestoneContentAsync (uint? milestoneHash);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> Destiny2GetPublicMilestoneContentAsyncWithHttpInfo (uint? milestoneHash);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> Destiny2GetPublicMilestonesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> Destiny2GetPublicMilestonesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> Destiny2GetUniqueWeaponHistoryAsync (long? characterId, long? destinyMembershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> Destiny2GetUniqueWeaponHistoryAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> Destiny2GetVendorAsync (long? characterId, long? destinyMembershipId, int? membershipType, uint? vendorHash, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> Destiny2GetVendorAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, uint? vendorHash, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> Destiny2GetVendorsAsync (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> Destiny2GetVendorsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> Destiny2InsertSocketPlugAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2InsertSocketPlugAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> Destiny2SearchDestinyEntitiesAsync (string searchTerm, string type, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> Destiny2SearchDestinyEntitiesAsyncWithHttpInfo (string searchTerm, string type, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> Destiny2SearchDestinyPlayerAsync (string displayName, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> Destiny2SearchDestinyPlayerAsyncWithHttpInfo (string displayName, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> Destiny2SetItemLockStateAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2SetItemLockStateAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> Destiny2TransferItemAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2TransferItemAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Destiny2Api : IDestiny2Api
    {
        private BungieNetPlatform.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Destiny2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Destiny2Api(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = BungieNetPlatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Destiny2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Destiny2Api(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieNetPlatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetPlatform.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 Destiny2ActivateTalentNode ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = Destiny2ActivateTalentNodeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > Destiny2ActivateTalentNodeWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/ActivateTalentNode/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2ActivateTalentNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> Destiny2ActivateTalentNodeAsync ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = await Destiny2ActivateTalentNodeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2ActivateTalentNodeAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/ActivateTalentNode/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2ActivateTalentNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 Destiny2EquipItem ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = Destiny2EquipItemWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > Destiny2EquipItemWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/EquipItem/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2EquipItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> Destiny2EquipItemAsync ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = await Destiny2EquipItemAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2EquipItemAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/EquipItem/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2EquipItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 Destiny2EquipItems ()
        {
             ApiResponse<InlineResponse20038> localVarResponse = Destiny2EquipItemsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public ApiResponse< InlineResponse20038 > Destiny2EquipItemsWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/EquipItems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2EquipItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20038) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038> Destiny2EquipItemsAsync ()
        {
             ApiResponse<InlineResponse20038> localVarResponse = await Destiny2EquipItemsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> Destiny2EquipItemsAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/EquipItems/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2EquipItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20038) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        ///  Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>InlineResponse20046</returns>
        public InlineResponse20046 Destiny2GetActivityHistory (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null)
        {
             ApiResponse<InlineResponse20046> localVarResponse = Destiny2GetActivityHistoryWithHttpInfo(characterId, destinyMembershipId, membershipType, count, mode, page);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        public ApiResponse< InlineResponse20046 > Destiny2GetActivityHistoryWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetActivityHistory");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetActivityHistory");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetActivityHistory");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetActivityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20046>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20046) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20046)));
        }

        /// <summary>
        ///  Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of InlineResponse20046</returns>
        public async System.Threading.Tasks.Task<InlineResponse20046> Destiny2GetActivityHistoryAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null)
        {
             ApiResponse<InlineResponse20046> localVarResponse = await Destiny2GetActivityHistoryAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, count, mode, page);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> Destiny2GetActivityHistoryAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? count = null, int? mode = null, int? page = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetActivityHistory");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetActivityHistory");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetActivityHistory");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetActivityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20046>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20046) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20046)));
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 Destiny2GetCharacter (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20033> localVarResponse = Destiny2GetCharacterWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse< InlineResponse20033 > Destiny2GetCharacterWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetCharacter");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetCharacter");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetCharacter");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetCharacter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20033) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> Destiny2GetCharacterAsync (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20033> localVarResponse = await Destiny2GetCharacterAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> Destiny2GetCharacterAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetCharacter");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetCharacter");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetCharacter");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetCharacter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20033) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>InlineResponse20042</returns>
        public InlineResponse20042 Destiny2GetClanAggregateStats (long? groupId, string modes = null)
        {
             ApiResponse<InlineResponse20042> localVarResponse = Destiny2GetClanAggregateStatsWithHttpInfo(groupId, modes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        public ApiResponse< InlineResponse20042 > Destiny2GetClanAggregateStatsWithHttpInfo (long? groupId, string modes = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanAggregateStats");

            var localVarPath = "/Destiny2/Stats/AggregateClanStats/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanAggregateStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20042) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>Task of InlineResponse20042</returns>
        public async System.Threading.Tasks.Task<InlineResponse20042> Destiny2GetClanAggregateStatsAsync (long? groupId, string modes = null)
        {
             ApiResponse<InlineResponse20042> localVarResponse = await Destiny2GetClanAggregateStatsAsyncWithHttpInfo(groupId, modes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> Destiny2GetClanAggregateStatsAsyncWithHttpInfo (long? groupId, string modes = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanAggregateStats");

            var localVarPath = "/Destiny2/Stats/AggregateClanStats/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanAggregateStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20042>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20042) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20042)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 Destiny2GetClanLeaderboards (long? groupId, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20041> localVarResponse = Destiny2GetClanLeaderboardsWithHttpInfo(groupId, maxtop, modes, statid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public ApiResponse< InlineResponse20041 > Destiny2GetClanLeaderboardsWithHttpInfo (long? groupId, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanLeaderboards");

            var localVarPath = "/Destiny2/Stats/Leaderboards/Clans/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041> Destiny2GetClanLeaderboardsAsync (long? groupId, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20041> localVarResponse = await Destiny2GetClanLeaderboardsAsyncWithHttpInfo(groupId, maxtop, modes, statid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> Destiny2GetClanLeaderboardsAsyncWithHttpInfo (long? groupId, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanLeaderboards");

            var localVarPath = "/Destiny2/Stats/Leaderboards/Clans/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 Destiny2GetClanWeeklyRewardState (long? groupId)
        {
             ApiResponse<InlineResponse20034> localVarResponse = Destiny2GetClanWeeklyRewardStateWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public ApiResponse< InlineResponse20034 > Destiny2GetClanWeeklyRewardStateWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanWeeklyRewardState");

            var localVarPath = "/Destiny2/Clan/{groupId}/WeeklyRewardState/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanWeeklyRewardState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20034) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034> Destiny2GetClanWeeklyRewardStateAsync (long? groupId)
        {
             ApiResponse<InlineResponse20034> localVarResponse = await Destiny2GetClanWeeklyRewardStateAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> Destiny2GetClanWeeklyRewardStateAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Destiny2Api->Destiny2GetClanWeeklyRewardState");

            var localVarPath = "/Destiny2/Clan/{groupId}/WeeklyRewardState/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetClanWeeklyRewardState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20034) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 Destiny2GetDestinyAggregateActivityStats (long? characterId, long? destinyMembershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20048> localVarResponse = Destiny2GetDestinyAggregateActivityStatsWithHttpInfo(characterId, destinyMembershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse< InlineResponse20048 > Destiny2GetDestinyAggregateActivityStatsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyAggregateActivityStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20048) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048> Destiny2GetDestinyAggregateActivityStatsAsync (long? characterId, long? destinyMembershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20048> localVarResponse = await Destiny2GetDestinyAggregateActivityStatsAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> Destiny2GetDestinyAggregateActivityStatsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetDestinyAggregateActivityStats");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyAggregateActivityStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20048) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 Destiny2GetDestinyEntityDefinition (string entityType, uint? hashIdentifier)
        {
             ApiResponse<InlineResponse20030> localVarResponse = Destiny2GetDestinyEntityDefinitionWithHttpInfo(entityType, hashIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public ApiResponse< InlineResponse20030 > Destiny2GetDestinyEntityDefinitionWithHttpInfo (string entityType, uint? hashIdentifier)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");
            // verify the required parameter 'hashIdentifier' is set
            if (hashIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'hashIdentifier' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");

            var localVarPath = "/Destiny2/Manifest/{entityType}/{hashIdentifier}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("entityType", Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (hashIdentifier != null) localVarPathParams.Add("hashIdentifier", Configuration.ApiClient.ParameterToString(hashIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyEntityDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20030) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030> Destiny2GetDestinyEntityDefinitionAsync (string entityType, uint? hashIdentifier)
        {
             ApiResponse<InlineResponse20030> localVarResponse = await Destiny2GetDestinyEntityDefinitionAsyncWithHttpInfo(entityType, hashIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> Destiny2GetDestinyEntityDefinitionAsyncWithHttpInfo (string entityType, uint? hashIdentifier)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");
            // verify the required parameter 'hashIdentifier' is set
            if (hashIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'hashIdentifier' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");

            var localVarPath = "/Destiny2/Manifest/{entityType}/{hashIdentifier}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("entityType", Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (hashIdentifier != null) localVarPathParams.Add("hashIdentifier", Configuration.ApiClient.ParameterToString(hashIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyEntityDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20030) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 Destiny2GetDestinyManifest ()
        {
             ApiResponse<InlineResponse20029> localVarResponse = Destiny2GetDestinyManifestWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse< InlineResponse20029 > Destiny2GetDestinyManifestWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Manifest/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20029) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> Destiny2GetDestinyManifestAsync ()
        {
             ApiResponse<InlineResponse20029> localVarResponse = await Destiny2GetDestinyManifestAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> Destiny2GetDestinyManifestAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Manifest/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetDestinyManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20029) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        ///  Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>InlineResponse20044</returns>
        public InlineResponse20044 Destiny2GetHistoricalStats (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null)
        {
             ApiResponse<InlineResponse20044> localVarResponse = Destiny2GetHistoricalStatsWithHttpInfo(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        public ApiResponse< InlineResponse20044 > Destiny2GetHistoricalStatsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetHistoricalStats");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetHistoricalStats");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetHistoricalStats");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (dayend != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dayend", dayend)); // query parameter
            if (daystart != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "daystart", daystart)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "groups", groups)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "modes", modes)); // query parameter
            if (periodType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "periodType", periodType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20044) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
        }

        /// <summary>
        ///  Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>Task of InlineResponse20044</returns>
        public async System.Threading.Tasks.Task<InlineResponse20044> Destiny2GetHistoricalStatsAsync (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null)
        {
             ApiResponse<InlineResponse20044> localVarResponse = await Destiny2GetHistoricalStatsAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> Destiny2GetHistoricalStatsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, DateTime? dayend = null, DateTime? daystart = null, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null, List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> modes = null, int? periodType = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetHistoricalStats");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetHistoricalStats");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetHistoricalStats");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (dayend != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dayend", dayend)); // query parameter
            if (daystart != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "daystart", daystart)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "groups", groups)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "modes", modes)); // query parameter
            if (periodType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "periodType", periodType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20044>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20044) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20044)));
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 Destiny2GetHistoricalStatsDefinition ()
        {
             ApiResponse<InlineResponse20040> localVarResponse = Destiny2GetHistoricalStatsDefinitionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public ApiResponse< InlineResponse20040 > Destiny2GetHistoricalStatsDefinitionWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Stats/Definition/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStatsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20040) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040> Destiny2GetHistoricalStatsDefinitionAsync ()
        {
             ApiResponse<InlineResponse20040> localVarResponse = await Destiny2GetHistoricalStatsDefinitionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> Destiny2GetHistoricalStatsDefinitionAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Stats/Definition/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStatsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20040>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20040) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20040)));
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 Destiny2GetHistoricalStatsForAccount (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null)
        {
             ApiResponse<InlineResponse20045> localVarResponse = Destiny2GetHistoricalStatsForAccountWithHttpInfo(destinyMembershipId, membershipType, groups);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public ApiResponse< InlineResponse20045 > Destiny2GetHistoricalStatsForAccountWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetHistoricalStatsForAccount");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetHistoricalStatsForAccount");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (groups != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStatsForAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045> Destiny2GetHistoricalStatsForAccountAsync (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null)
        {
             ApiResponse<InlineResponse20045> localVarResponse = await Destiny2GetHistoricalStatsForAccountAsyncWithHttpInfo(destinyMembershipId, membershipType, groups);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> Destiny2GetHistoricalStatsForAccountAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyHistoricalStatsDefinitionsDestinyStatsGroupType> groups = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetHistoricalStatsForAccount");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetHistoricalStatsForAccount");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (groups != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetHistoricalStatsForAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20045>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20045) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20045)));
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 Destiny2GetItem (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20035> localVarResponse = Destiny2GetItemWithHttpInfo(destinyMembershipId, itemInstanceId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse< InlineResponse20035 > Destiny2GetItemWithHttpInfo (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetItem");
            // verify the required parameter 'itemInstanceId' is set
            if (itemInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'itemInstanceId' when calling Destiny2Api->Destiny2GetItem");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetItem");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (itemInstanceId != null) localVarPathParams.Add("itemInstanceId", Configuration.ApiClient.ParameterToString(itemInstanceId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20035) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> Destiny2GetItemAsync (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20035> localVarResponse = await Destiny2GetItemAsyncWithHttpInfo(destinyMembershipId, itemInstanceId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> Destiny2GetItemAsyncWithHttpInfo (long? destinyMembershipId, long? itemInstanceId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetItem");
            // verify the required parameter 'itemInstanceId' is set
            if (itemInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'itemInstanceId' when calling Destiny2Api->Destiny2GetItem");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetItem");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (itemInstanceId != null) localVarPathParams.Add("itemInstanceId", Configuration.ApiClient.ParameterToString(itemInstanceId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20035) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 Destiny2GetLeaderboards (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20041> localVarResponse = Destiny2GetLeaderboardsWithHttpInfo(destinyMembershipId, membershipType, maxtop, modes, statid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public ApiResponse< InlineResponse20041 > Destiny2GetLeaderboardsWithHttpInfo (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetLeaderboards");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLeaderboards");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041> Destiny2GetLeaderboardsAsync (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20041> localVarResponse = await Destiny2GetLeaderboardsAsyncWithHttpInfo(destinyMembershipId, membershipType, maxtop, modes, statid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> Destiny2GetLeaderboardsAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetLeaderboards");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLeaderboards");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 Destiny2GetLeaderboardsForCharacter (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20041> localVarResponse = Destiny2GetLeaderboardsForCharacterWithHttpInfo(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public ApiResponse< InlineResponse20041 > Destiny2GetLeaderboardsForCharacterWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");

            var localVarPath = "/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLeaderboardsForCharacter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041> Destiny2GetLeaderboardsForCharacterAsync (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
             ApiResponse<InlineResponse20041> localVarResponse = await Destiny2GetLeaderboardsForCharacterAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> Destiny2GetLeaderboardsForCharacterAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, int? maxtop = null, string modes = null, string statid = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetLeaderboardsForCharacter");

            var localVarPath = "/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (maxtop != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "maxtop", maxtop)); // query parameter
            if (modes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "modes", modes)); // query parameter
            if (statid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statid", statid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetLeaderboardsForCharacter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20041>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20041) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20041)));
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>InlineResponse20039</returns>
        public InlineResponse20039 Destiny2GetPostGameCarnageReport (long? activityId)
        {
             ApiResponse<InlineResponse20039> localVarResponse = Destiny2GetPostGameCarnageReportWithHttpInfo(activityId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        public ApiResponse< InlineResponse20039 > Destiny2GetPostGameCarnageReportWithHttpInfo (long? activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new ApiException(400, "Missing required parameter 'activityId' when calling Destiny2Api->Destiny2GetPostGameCarnageReport");

            var localVarPath = "/Destiny2/Stats/PostGameCarnageReport/{activityId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityId != null) localVarPathParams.Add("activityId", Configuration.ApiClient.ParameterToString(activityId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPostGameCarnageReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20039>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20039) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20039)));
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>Task of InlineResponse20039</returns>
        public async System.Threading.Tasks.Task<InlineResponse20039> Destiny2GetPostGameCarnageReportAsync (long? activityId)
        {
             ApiResponse<InlineResponse20039> localVarResponse = await Destiny2GetPostGameCarnageReportAsyncWithHttpInfo(activityId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> Destiny2GetPostGameCarnageReportAsyncWithHttpInfo (long? activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new ApiException(400, "Missing required parameter 'activityId' when calling Destiny2Api->Destiny2GetPostGameCarnageReport");

            var localVarPath = "/Destiny2/Stats/PostGameCarnageReport/{activityId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityId != null) localVarPathParams.Add("activityId", Configuration.ApiClient.ParameterToString(activityId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPostGameCarnageReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20039>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20039) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20039)));
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 Destiny2GetProfile (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = Destiny2GetProfileWithHttpInfo(destinyMembershipId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse< InlineResponse20032 > Destiny2GetProfileWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetProfile");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetProfile");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20032) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032> Destiny2GetProfileAsync (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = await Destiny2GetProfileAsyncWithHttpInfo(destinyMembershipId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> Destiny2GetProfileAsyncWithHttpInfo (long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetProfile");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetProfile");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20032) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>InlineResponse20049</returns>
        public InlineResponse20049 Destiny2GetPublicMilestoneContent (uint? milestoneHash)
        {
             ApiResponse<InlineResponse20049> localVarResponse = Destiny2GetPublicMilestoneContentWithHttpInfo(milestoneHash);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        public ApiResponse< InlineResponse20049 > Destiny2GetPublicMilestoneContentWithHttpInfo (uint? milestoneHash)
        {
            // verify the required parameter 'milestoneHash' is set
            if (milestoneHash == null)
                throw new ApiException(400, "Missing required parameter 'milestoneHash' when calling Destiny2Api->Destiny2GetPublicMilestoneContent");

            var localVarPath = "/Destiny2/Milestones/{milestoneHash}/Content/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (milestoneHash != null) localVarPathParams.Add("milestoneHash", Configuration.ApiClient.ParameterToString(milestoneHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPublicMilestoneContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20049) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>Task of InlineResponse20049</returns>
        public async System.Threading.Tasks.Task<InlineResponse20049> Destiny2GetPublicMilestoneContentAsync (uint? milestoneHash)
        {
             ApiResponse<InlineResponse20049> localVarResponse = await Destiny2GetPublicMilestoneContentAsyncWithHttpInfo(milestoneHash);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> Destiny2GetPublicMilestoneContentAsyncWithHttpInfo (uint? milestoneHash)
        {
            // verify the required parameter 'milestoneHash' is set
            if (milestoneHash == null)
                throw new ApiException(400, "Missing required parameter 'milestoneHash' when calling Destiny2Api->Destiny2GetPublicMilestoneContent");

            var localVarPath = "/Destiny2/Milestones/{milestoneHash}/Content/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (milestoneHash != null) localVarPathParams.Add("milestoneHash", Configuration.ApiClient.ParameterToString(milestoneHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPublicMilestoneContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20049) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 Destiny2GetPublicMilestones ()
        {
             ApiResponse<InlineResponse20050> localVarResponse = Destiny2GetPublicMilestonesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public ApiResponse< InlineResponse20050 > Destiny2GetPublicMilestonesWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Milestones/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPublicMilestones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20050) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050> Destiny2GetPublicMilestonesAsync ()
        {
             ApiResponse<InlineResponse20050> localVarResponse = await Destiny2GetPublicMilestonesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> Destiny2GetPublicMilestonesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Milestones/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetPublicMilestones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20050) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 Destiny2GetUniqueWeaponHistory (long? characterId, long? destinyMembershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20047> localVarResponse = Destiny2GetUniqueWeaponHistoryWithHttpInfo(characterId, destinyMembershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public ApiResponse< InlineResponse20047 > Destiny2GetUniqueWeaponHistoryWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetUniqueWeaponHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20047) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047> Destiny2GetUniqueWeaponHistoryAsync (long? characterId, long? destinyMembershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20047> localVarResponse = await Destiny2GetUniqueWeaponHistoryAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> Destiny2GetUniqueWeaponHistoryAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetUniqueWeaponHistory");

            var localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetUniqueWeaponHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20047) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        ///  Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 Destiny2GetVendor (long? characterId, long? destinyMembershipId, int? membershipType, uint? vendorHash, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20037> localVarResponse = Destiny2GetVendorWithHttpInfo(characterId, destinyMembershipId, membershipType, vendorHash, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public ApiResponse< InlineResponse20037 > Destiny2GetVendorWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, uint? vendorHash, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'vendorHash' is set
            if (vendorHash == null)
                throw new ApiException(400, "Missing required parameter 'vendorHash' when calling Destiny2Api->Destiny2GetVendor");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (vendorHash != null) localVarPathParams.Add("vendorHash", Configuration.ApiClient.ParameterToString(vendorHash)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20037) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        ///  Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037> Destiny2GetVendorAsync (long? characterId, long? destinyMembershipId, int? membershipType, uint? vendorHash, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20037> localVarResponse = await Destiny2GetVendorAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, vendorHash, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> Destiny2GetVendorAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, uint? vendorHash, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetVendor");
            // verify the required parameter 'vendorHash' is set
            if (vendorHash == null)
                throw new ApiException(400, "Missing required parameter 'vendorHash' when calling Destiny2Api->Destiny2GetVendor");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (vendorHash != null) localVarPathParams.Add("vendorHash", Configuration.ApiClient.ParameterToString(vendorHash)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20037) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        ///  Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 Destiny2GetVendors (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20036> localVarResponse = Destiny2GetVendorsWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse< InlineResponse20036 > Destiny2GetVendorsWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetVendors");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetVendors");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetVendors");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetVendors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20036) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> Destiny2GetVendorsAsync (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
             ApiResponse<InlineResponse20036> localVarResponse = await Destiny2GetVendorsAsyncWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> Destiny2GetVendorsAsyncWithHttpInfo (long? characterId, long? destinyMembershipId, int? membershipType, List<DestinyDestinyComponentType> components = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling Destiny2Api->Destiny2GetVendors");
            // verify the required parameter 'destinyMembershipId' is set
            if (destinyMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'destinyMembershipId' when calling Destiny2Api->Destiny2GetVendors");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2GetVendors");

            var localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (characterId != null) localVarPathParams.Add("characterId", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (destinyMembershipId != null) localVarPathParams.Add("destinyMembershipId", Configuration.ApiClient.ParameterToString(destinyMembershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (components != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "components", components)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2GetVendors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20036) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 Destiny2InsertSocketPlug ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = Destiny2InsertSocketPlugWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > Destiny2InsertSocketPlugWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/InsertSocketPlug/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2InsertSocketPlug", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> Destiny2InsertSocketPlugAsync ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = await Destiny2InsertSocketPlugAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2InsertSocketPlugAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/InsertSocketPlug/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2InsertSocketPlug", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 Destiny2SearchDestinyEntities (string searchTerm, string type, int? page = null)
        {
             ApiResponse<InlineResponse20043> localVarResponse = Destiny2SearchDestinyEntitiesWithHttpInfo(searchTerm, type, page);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public ApiResponse< InlineResponse20043 > Destiny2SearchDestinyEntitiesWithHttpInfo (string searchTerm, string type, int? page = null)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
                throw new ApiException(400, "Missing required parameter 'searchTerm' when calling Destiny2Api->Destiny2SearchDestinyEntities");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling Destiny2Api->Destiny2SearchDestinyEntities");

            var localVarPath = "/Destiny2/Armory/Search/{type}/{searchTerm}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchTerm != null) localVarPathParams.Add("searchTerm", Configuration.ApiClient.ParameterToString(searchTerm)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SearchDestinyEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043> Destiny2SearchDestinyEntitiesAsync (string searchTerm, string type, int? page = null)
        {
             ApiResponse<InlineResponse20043> localVarResponse = await Destiny2SearchDestinyEntitiesAsyncWithHttpInfo(searchTerm, type, page);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> Destiny2SearchDestinyEntitiesAsyncWithHttpInfo (string searchTerm, string type, int? page = null)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
                throw new ApiException(400, "Missing required parameter 'searchTerm' when calling Destiny2Api->Destiny2SearchDestinyEntities");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling Destiny2Api->Destiny2SearchDestinyEntities");

            var localVarPath = "/Destiny2/Armory/Search/{type}/{searchTerm}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchTerm != null) localVarPathParams.Add("searchTerm", Configuration.ApiClient.ParameterToString(searchTerm)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SearchDestinyEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20043>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20043) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20043)));
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 Destiny2SearchDestinyPlayer (string displayName, int? membershipType)
        {
             ApiResponse<InlineResponse20031> localVarResponse = Destiny2SearchDestinyPlayerWithHttpInfo(displayName, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse< InlineResponse20031 > Destiny2SearchDestinyPlayerWithHttpInfo (string displayName, int? membershipType)
        {
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling Destiny2Api->Destiny2SearchDestinyPlayer");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2SearchDestinyPlayer");

            var localVarPath = "/Destiny2/SearchDestinyPlayer/{membershipType}/{displayName}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null) localVarPathParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SearchDestinyPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20031) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> Destiny2SearchDestinyPlayerAsync (string displayName, int? membershipType)
        {
             ApiResponse<InlineResponse20031> localVarResponse = await Destiny2SearchDestinyPlayerAsyncWithHttpInfo(displayName, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The full gamertag or PSN id of the player. Spaces and case are ignored.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> Destiny2SearchDestinyPlayerAsyncWithHttpInfo (string displayName, int? membershipType)
        {
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling Destiny2Api->Destiny2SearchDestinyPlayer");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling Destiny2Api->Destiny2SearchDestinyPlayer");

            var localVarPath = "/Destiny2/SearchDestinyPlayer/{membershipType}/{displayName}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null) localVarPathParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SearchDestinyPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20031) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 Destiny2SetItemLockState ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = Destiny2SetItemLockStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > Destiny2SetItemLockStateWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/SetLockState/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SetItemLockState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> Destiny2SetItemLockStateAsync ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = await Destiny2SetItemLockStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2SetItemLockStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/SetLockState/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2SetItemLockState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 Destiny2TransferItem ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = Destiny2TransferItemWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > Destiny2TransferItemWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/TransferItem/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2TransferItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> Destiny2TransferItemAsync ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = await Destiny2TransferItemAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> Destiny2TransferItemAsyncWithHttpInfo ()
        {

            var localVarPath = "/Destiny2/Actions/Items/TransferItem/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Destiny2TransferItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

    }
}
