/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieNetPlatform.Client;
using BungieNetPlatform.Model;

namespace BungieNetPlatform.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForumApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic to approve.</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 ForumApproveFireteamThread (long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic to approve.</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> ForumApproveFireteamThreadWithHttpInfo (long? topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ForumGetCoreTopicsPaged (int? categoryFilter, int? page, int? quickDate, int? sort, string locales = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ForumGetCoreTopicsPagedWithHttpInfo (int? categoryFilter, int? page, int? quickDate, int? sort, string locales = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 ForumGetForumTagSuggestions (string partialtag = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> ForumGetForumTagSuggestionsWithHttpInfo (string partialtag = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ForumGetPoll (long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ForumGetPollWithHttpInfo (long? topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ForumGetPostAndParent (ulong? childPostId, string showbanned = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ForumGetPostAndParentWithHttpInfo (ulong? childPostId, string showbanned = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ForumGetPostAndParentAwaitingApproval (ulong? childPostId, string showbanned = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ForumGetPostAndParentAwaitingApprovalWithHttpInfo (ulong? childPostId, string showbanned = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ForumGetPostsThreadedPaged (bool? getParentPost, int? page, int? pageSize, ulong? parentPostId, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ForumGetPostsThreadedPagedWithHttpInfo (bool? getParentPost, int? page, int? pageSize, ulong? parentPostId, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ForumGetPostsThreadedPagedFromChild (ulong? childPostId, int? page, int? pageSize, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ForumGetPostsThreadedPagedFromChildWithHttpInfo (ulong? childPostId, int? page, int? pageSize, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetRecruitmentThreadSummaries ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetRecruitmentThreadSummariesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 ForumGetTopicForContent (long? contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> ForumGetTopicForContentWithHttpInfo (long? contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ForumGetTopicsPaged (int? categoryFilter, long? group, int? page, int? pageSize, int? quickDate, int? sort, string locales = null, string tagstring = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ForumGetTopicsPagedWithHttpInfo (int? categoryFilter, long? group, int? page, int? pageSize, int? quickDate, int? sort, string locales = null, string tagstring = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ForumJoinFireteamThread (long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ForumJoinFireteamThreadWithHttpInfo (long? topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetMembershipId">The id of the user you wish to kick.</param>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ForumKickBanFireteamApplicant (long? targetMembershipId, long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetMembershipId">The id of the user you wish to kick.</param>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ForumKickBanFireteamApplicantWithHttpInfo (long? targetMembershipId, long? topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to leave.</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ForumLeaveFireteamThread (long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to leave.</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ForumLeaveFireteamThreadWithHttpInfo (long? topicId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic to approve.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> ForumApproveFireteamThreadAsync (long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic to approve.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> ForumApproveFireteamThreadAsyncWithHttpInfo (long? topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ForumGetCoreTopicsPagedAsync (int? categoryFilter, int? page, int? quickDate, int? sort, string locales = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetCoreTopicsPagedAsyncWithHttpInfo (int? categoryFilter, int? page, int? quickDate, int? sort, string locales = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> ForumGetForumTagSuggestionsAsync (string partialtag = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ForumGetForumTagSuggestionsAsyncWithHttpInfo (string partialtag = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ForumGetPollAsync (long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPollAsyncWithHttpInfo (long? topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ForumGetPostAndParentAsync (ulong? childPostId, string showbanned = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPostAndParentAsyncWithHttpInfo (ulong? childPostId, string showbanned = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ForumGetPostAndParentAwaitingApprovalAsync (ulong? childPostId, string showbanned = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo (ulong? childPostId, string showbanned = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ForumGetPostsThreadedPagedAsync (bool? getParentPost, int? page, int? pageSize, ulong? parentPostId, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPostsThreadedPagedAsyncWithHttpInfo (bool? getParentPost, int? page, int? pageSize, ulong? parentPostId, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ForumGetPostsThreadedPagedFromChildAsync (ulong? childPostId, int? page, int? pageSize, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo (ulong? childPostId, int? page, int? pageSize, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetRecruitmentThreadSummariesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> ForumGetTopicForContentAsync (long? contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> ForumGetTopicForContentAsyncWithHttpInfo (long? contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ForumGetTopicsPagedAsync (int? categoryFilter, long? group, int? page, int? pageSize, int? quickDate, int? sort, string locales = null, string tagstring = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetTopicsPagedAsyncWithHttpInfo (int? categoryFilter, long? group, int? page, int? pageSize, int? quickDate, int? sort, string locales = null, string tagstring = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ForumJoinFireteamThreadAsync (long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ForumJoinFireteamThreadAsyncWithHttpInfo (long? topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetMembershipId">The id of the user you wish to kick.</param>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ForumKickBanFireteamApplicantAsync (long? targetMembershipId, long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetMembershipId">The id of the user you wish to kick.</param>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ForumKickBanFireteamApplicantAsyncWithHttpInfo (long? targetMembershipId, long? topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to leave.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ForumLeaveFireteamThreadAsync (long? topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to leave.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ForumLeaveFireteamThreadAsyncWithHttpInfo (long? topicId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ForumApi : IForumApi
    {
        private BungieNetPlatform.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ForumApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = BungieNetPlatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ForumApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieNetPlatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetPlatform.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic to approve.</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 ForumApproveFireteamThread (long? topicId)
        {
             ApiResponse<InlineResponse20010> localVarResponse = ForumApproveFireteamThreadWithHttpInfo(topicId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic to approve.</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse< InlineResponse20010 > ForumApproveFireteamThreadWithHttpInfo (long? topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumApproveFireteamThread");

            var localVarPath = "/Forum/Recruit/Approve/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumApproveFireteamThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        ///  Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic to approve.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> ForumApproveFireteamThreadAsync (long? topicId)
        {
             ApiResponse<InlineResponse20010> localVarResponse = await ForumApproveFireteamThreadAsyncWithHttpInfo(topicId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic to approve.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> ForumApproveFireteamThreadAsyncWithHttpInfo (long? topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumApproveFireteamThread");

            var localVarPath = "/Forum/Recruit/Approve/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumApproveFireteamThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ForumGetCoreTopicsPaged (int? categoryFilter, int? page, int? quickDate, int? sort, string locales = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ForumGetCoreTopicsPagedWithHttpInfo(categoryFilter, page, quickDate, sort, locales);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ForumGetCoreTopicsPagedWithHttpInfo (int? categoryFilter, int? page, int? quickDate, int? sort, string locales = null)
        {
            // verify the required parameter 'categoryFilter' is set
            if (categoryFilter == null)
                throw new ApiException(400, "Missing required parameter 'categoryFilter' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'quickDate' is set
            if (quickDate == null)
                throw new ApiException(400, "Missing required parameter 'quickDate' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ForumApi->ForumGetCoreTopicsPaged");

            var localVarPath = "/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryFilter != null) localVarPathParams.Add("categoryFilter", Configuration.ApiClient.ParameterToString(categoryFilter)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (quickDate != null) localVarPathParams.Add("quickDate", Configuration.ApiClient.ParameterToString(quickDate)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (locales != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locales", locales)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetCoreTopicsPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ForumGetCoreTopicsPagedAsync (int? categoryFilter, int? page, int? quickDate, int? sort, string locales = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ForumGetCoreTopicsPagedAsyncWithHttpInfo(categoryFilter, page, quickDate, sort, locales);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetCoreTopicsPagedAsyncWithHttpInfo (int? categoryFilter, int? page, int? quickDate, int? sort, string locales = null)
        {
            // verify the required parameter 'categoryFilter' is set
            if (categoryFilter == null)
                throw new ApiException(400, "Missing required parameter 'categoryFilter' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'quickDate' is set
            if (quickDate == null)
                throw new ApiException(400, "Missing required parameter 'quickDate' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ForumApi->ForumGetCoreTopicsPaged");

            var localVarPath = "/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryFilter != null) localVarPathParams.Add("categoryFilter", Configuration.ApiClient.ParameterToString(categoryFilter)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (quickDate != null) localVarPathParams.Add("quickDate", Configuration.ApiClient.ParameterToString(quickDate)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (locales != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locales", locales)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetCoreTopicsPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 ForumGetForumTagSuggestions (string partialtag = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = ForumGetForumTagSuggestionsWithHttpInfo(partialtag);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > ForumGetForumTagSuggestionsWithHttpInfo (string partialtag = null)
        {

            var localVarPath = "/Forum/GetForumTagSuggestions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partialtag != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "partialtag", partialtag)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetForumTagSuggestions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> ForumGetForumTagSuggestionsAsync (string partialtag = null)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await ForumGetForumTagSuggestionsAsyncWithHttpInfo(partialtag);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ForumGetForumTagSuggestionsAsyncWithHttpInfo (string partialtag = null)
        {

            var localVarPath = "/Forum/GetForumTagSuggestions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partialtag != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "partialtag", partialtag)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetForumTagSuggestions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ForumGetPoll (long? topicId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ForumGetPollWithHttpInfo(topicId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ForumGetPollWithHttpInfo (long? topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumGetPoll");

            var localVarPath = "/Forum/Poll/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ForumGetPollAsync (long? topicId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ForumGetPollAsyncWithHttpInfo(topicId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPollAsyncWithHttpInfo (long? topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumGetPoll");

            var localVarPath = "/Forum/Poll/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ForumGetPostAndParent (ulong? childPostId, string showbanned = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ForumGetPostAndParentWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ForumGetPostAndParentWithHttpInfo (ulong? childPostId, string showbanned = null)
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostAndParent");

            var localVarPath = "/Forum/GetPostAndParent/{childPostId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostAndParent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ForumGetPostAndParentAsync (ulong? childPostId, string showbanned = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ForumGetPostAndParentAsyncWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPostAndParentAsyncWithHttpInfo (ulong? childPostId, string showbanned = null)
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostAndParent");

            var localVarPath = "/Forum/GetPostAndParent/{childPostId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostAndParent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ForumGetPostAndParentAwaitingApproval (ulong? childPostId, string showbanned = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ForumGetPostAndParentAwaitingApprovalWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ForumGetPostAndParentAwaitingApprovalWithHttpInfo (ulong? childPostId, string showbanned = null)
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostAndParentAwaitingApproval");

            var localVarPath = "/Forum/GetPostAndParentAwaitingApproval/{childPostId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostAndParentAwaitingApproval", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ForumGetPostAndParentAwaitingApprovalAsync (ulong? childPostId, string showbanned = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo (ulong? childPostId, string showbanned = null)
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostAndParentAwaitingApproval");

            var localVarPath = "/Forum/GetPostAndParentAwaitingApproval/{childPostId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostAndParentAwaitingApproval", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ForumGetPostsThreadedPaged (bool? getParentPost, int? page, int? pageSize, ulong? parentPostId, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ForumGetPostsThreadedPagedWithHttpInfo(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ForumGetPostsThreadedPagedWithHttpInfo (bool? getParentPost, int? page, int? pageSize, ulong? parentPostId, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null)
        {
            // verify the required parameter 'getParentPost' is set
            if (getParentPost == null)
                throw new ApiException(400, "Missing required parameter 'getParentPost' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'parentPostId' is set
            if (parentPostId == null)
                throw new ApiException(400, "Missing required parameter 'parentPostId' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'replySize' is set
            if (replySize == null)
                throw new ApiException(400, "Missing required parameter 'replySize' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'rootThreadMode' is set
            if (rootThreadMode == null)
                throw new ApiException(400, "Missing required parameter 'rootThreadMode' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'sortMode' is set
            if (sortMode == null)
                throw new ApiException(400, "Missing required parameter 'sortMode' when calling ForumApi->ForumGetPostsThreadedPaged");

            var localVarPath = "/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getParentPost != null) localVarPathParams.Add("getParentPost", Configuration.ApiClient.ParameterToString(getParentPost)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (parentPostId != null) localVarPathParams.Add("parentPostId", Configuration.ApiClient.ParameterToString(parentPostId)); // path parameter
            if (replySize != null) localVarPathParams.Add("replySize", Configuration.ApiClient.ParameterToString(replySize)); // path parameter
            if (rootThreadMode != null) localVarPathParams.Add("rootThreadMode", Configuration.ApiClient.ParameterToString(rootThreadMode)); // path parameter
            if (sortMode != null) localVarPathParams.Add("sortMode", Configuration.ApiClient.ParameterToString(sortMode)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostsThreadedPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ForumGetPostsThreadedPagedAsync (bool? getParentPost, int? page, int? pageSize, ulong? parentPostId, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ForumGetPostsThreadedPagedAsyncWithHttpInfo(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPostsThreadedPagedAsyncWithHttpInfo (bool? getParentPost, int? page, int? pageSize, ulong? parentPostId, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null)
        {
            // verify the required parameter 'getParentPost' is set
            if (getParentPost == null)
                throw new ApiException(400, "Missing required parameter 'getParentPost' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'parentPostId' is set
            if (parentPostId == null)
                throw new ApiException(400, "Missing required parameter 'parentPostId' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'replySize' is set
            if (replySize == null)
                throw new ApiException(400, "Missing required parameter 'replySize' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'rootThreadMode' is set
            if (rootThreadMode == null)
                throw new ApiException(400, "Missing required parameter 'rootThreadMode' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'sortMode' is set
            if (sortMode == null)
                throw new ApiException(400, "Missing required parameter 'sortMode' when calling ForumApi->ForumGetPostsThreadedPaged");

            var localVarPath = "/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getParentPost != null) localVarPathParams.Add("getParentPost", Configuration.ApiClient.ParameterToString(getParentPost)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (parentPostId != null) localVarPathParams.Add("parentPostId", Configuration.ApiClient.ParameterToString(parentPostId)); // path parameter
            if (replySize != null) localVarPathParams.Add("replySize", Configuration.ApiClient.ParameterToString(replySize)); // path parameter
            if (rootThreadMode != null) localVarPathParams.Add("rootThreadMode", Configuration.ApiClient.ParameterToString(rootThreadMode)); // path parameter
            if (sortMode != null) localVarPathParams.Add("sortMode", Configuration.ApiClient.ParameterToString(sortMode)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostsThreadedPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ForumGetPostsThreadedPagedFromChild (ulong? childPostId, int? page, int? pageSize, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ForumGetPostsThreadedPagedFromChildWithHttpInfo(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ForumGetPostsThreadedPagedFromChildWithHttpInfo (ulong? childPostId, int? page, int? pageSize, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null)
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'replySize' is set
            if (replySize == null)
                throw new ApiException(400, "Missing required parameter 'replySize' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'rootThreadMode' is set
            if (rootThreadMode == null)
                throw new ApiException(400, "Missing required parameter 'rootThreadMode' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'sortMode' is set
            if (sortMode == null)
                throw new ApiException(400, "Missing required parameter 'sortMode' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");

            var localVarPath = "/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (replySize != null) localVarPathParams.Add("replySize", Configuration.ApiClient.ParameterToString(replySize)); // path parameter
            if (rootThreadMode != null) localVarPathParams.Add("rootThreadMode", Configuration.ApiClient.ParameterToString(rootThreadMode)); // path parameter
            if (sortMode != null) localVarPathParams.Add("sortMode", Configuration.ApiClient.ParameterToString(sortMode)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostsThreadedPagedFromChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ForumGetPostsThreadedPagedFromChildAsync (ulong? childPostId, int? page, int? pageSize, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo (ulong? childPostId, int? page, int? pageSize, int? replySize, bool? rootThreadMode, int? sortMode, string showbanned = null)
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'replySize' is set
            if (replySize == null)
                throw new ApiException(400, "Missing required parameter 'replySize' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'rootThreadMode' is set
            if (rootThreadMode == null)
                throw new ApiException(400, "Missing required parameter 'rootThreadMode' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'sortMode' is set
            if (sortMode == null)
                throw new ApiException(400, "Missing required parameter 'sortMode' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");

            var localVarPath = "/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (replySize != null) localVarPathParams.Add("replySize", Configuration.ApiClient.ParameterToString(replySize)); // path parameter
            if (rootThreadMode != null) localVarPathParams.Add("rootThreadMode", Configuration.ApiClient.ParameterToString(rootThreadMode)); // path parameter
            if (sortMode != null) localVarPathParams.Add("sortMode", Configuration.ApiClient.ParameterToString(sortMode)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostsThreadedPagedFromChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetRecruitmentThreadSummaries ()
        {
             ApiResponse<InlineResponse20011> localVarResponse = ForumGetRecruitmentThreadSummariesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse< InlineResponse20011 > ForumGetRecruitmentThreadSummariesWithHttpInfo ()
        {

            var localVarPath = "/Forum/Recruit/Summaries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetRecruitmentThreadSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetRecruitmentThreadSummariesAsync ()
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Forum/Recruit/Summaries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetRecruitmentThreadSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 ForumGetTopicForContent (long? contentId)
        {
             ApiResponse<InlineResponse2007> localVarResponse = ForumGetTopicForContentWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > ForumGetTopicForContentWithHttpInfo (long? contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ForumApi->ForumGetTopicForContent");

            var localVarPath = "/Forum/GetTopicForContent/{contentId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", Configuration.ApiClient.ParameterToString(contentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetTopicForContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> ForumGetTopicForContentAsync (long? contentId)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await ForumGetTopicForContentAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> ForumGetTopicForContentAsyncWithHttpInfo (long? contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ForumApi->ForumGetTopicForContent");

            var localVarPath = "/Forum/GetTopicForContent/{contentId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", Configuration.ApiClient.ParameterToString(contentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetTopicForContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ForumGetTopicsPaged (int? categoryFilter, long? group, int? page, int? pageSize, int? quickDate, int? sort, string locales = null, string tagstring = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ForumGetTopicsPagedWithHttpInfo(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ForumGetTopicsPagedWithHttpInfo (int? categoryFilter, long? group, int? page, int? pageSize, int? quickDate, int? sort, string locales = null, string tagstring = null)
        {
            // verify the required parameter 'categoryFilter' is set
            if (categoryFilter == null)
                throw new ApiException(400, "Missing required parameter 'categoryFilter' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'quickDate' is set
            if (quickDate == null)
                throw new ApiException(400, "Missing required parameter 'quickDate' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ForumApi->ForumGetTopicsPaged");

            var localVarPath = "/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryFilter != null) localVarPathParams.Add("categoryFilter", Configuration.ApiClient.ParameterToString(categoryFilter)); // path parameter
            if (group != null) localVarPathParams.Add("group", Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (quickDate != null) localVarPathParams.Add("quickDate", Configuration.ApiClient.ParameterToString(quickDate)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (locales != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locales", locales)); // query parameter
            if (tagstring != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tagstring", tagstring)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetTopicsPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ForumGetTopicsPagedAsync (int? categoryFilter, long? group, int? page, int? pageSize, int? quickDate, int? sort, string locales = null, string tagstring = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ForumGetTopicsPagedAsyncWithHttpInfo(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ForumGetTopicsPagedAsyncWithHttpInfo (int? categoryFilter, long? group, int? page, int? pageSize, int? quickDate, int? sort, string locales = null, string tagstring = null)
        {
            // verify the required parameter 'categoryFilter' is set
            if (categoryFilter == null)
                throw new ApiException(400, "Missing required parameter 'categoryFilter' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'quickDate' is set
            if (quickDate == null)
                throw new ApiException(400, "Missing required parameter 'quickDate' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ForumApi->ForumGetTopicsPaged");

            var localVarPath = "/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryFilter != null) localVarPathParams.Add("categoryFilter", Configuration.ApiClient.ParameterToString(categoryFilter)); // path parameter
            if (group != null) localVarPathParams.Add("group", Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (page != null) localVarPathParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (quickDate != null) localVarPathParams.Add("quickDate", Configuration.ApiClient.ParameterToString(quickDate)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (locales != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locales", locales)); // query parameter
            if (tagstring != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tagstring", tagstring)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetTopicsPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ForumJoinFireteamThread (long? topicId)
        {
             ApiResponse<InlineResponse2009> localVarResponse = ForumJoinFireteamThreadWithHttpInfo(topicId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > ForumJoinFireteamThreadWithHttpInfo (long? topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumJoinFireteamThread");

            var localVarPath = "/Forum/Recruit/Join/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumJoinFireteamThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ForumJoinFireteamThreadAsync (long? topicId)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await ForumJoinFireteamThreadAsyncWithHttpInfo(topicId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ForumJoinFireteamThreadAsyncWithHttpInfo (long? topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumJoinFireteamThread");

            var localVarPath = "/Forum/Recruit/Join/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumJoinFireteamThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetMembershipId">The id of the user you wish to kick.</param>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ForumKickBanFireteamApplicant (long? targetMembershipId, long? topicId)
        {
             ApiResponse<InlineResponse2009> localVarResponse = ForumKickBanFireteamApplicantWithHttpInfo(targetMembershipId, topicId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetMembershipId">The id of the user you wish to kick.</param>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > ForumKickBanFireteamApplicantWithHttpInfo (long? targetMembershipId, long? topicId)
        {
            // verify the required parameter 'targetMembershipId' is set
            if (targetMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'targetMembershipId' when calling ForumApi->ForumKickBanFireteamApplicant");
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumKickBanFireteamApplicant");

            var localVarPath = "/Forum/Recruit/KickBan/{topicId}/{targetMembershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (targetMembershipId != null) localVarPathParams.Add("targetMembershipId", Configuration.ApiClient.ParameterToString(targetMembershipId)); // path parameter
            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumKickBanFireteamApplicant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetMembershipId">The id of the user you wish to kick.</param>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ForumKickBanFireteamApplicantAsync (long? targetMembershipId, long? topicId)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await ForumKickBanFireteamApplicantAsyncWithHttpInfo(targetMembershipId, topicId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetMembershipId">The id of the user you wish to kick.</param>
        /// <param name="topicId">The post id of the recruitment topic you wish to join.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ForumKickBanFireteamApplicantAsyncWithHttpInfo (long? targetMembershipId, long? topicId)
        {
            // verify the required parameter 'targetMembershipId' is set
            if (targetMembershipId == null)
                throw new ApiException(400, "Missing required parameter 'targetMembershipId' when calling ForumApi->ForumKickBanFireteamApplicant");
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumKickBanFireteamApplicant");

            var localVarPath = "/Forum/Recruit/KickBan/{topicId}/{targetMembershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (targetMembershipId != null) localVarPathParams.Add("targetMembershipId", Configuration.ApiClient.ParameterToString(targetMembershipId)); // path parameter
            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumKickBanFireteamApplicant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to leave.</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ForumLeaveFireteamThread (long? topicId)
        {
             ApiResponse<InlineResponse2009> localVarResponse = ForumLeaveFireteamThreadWithHttpInfo(topicId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to leave.</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > ForumLeaveFireteamThreadWithHttpInfo (long? topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumLeaveFireteamThread");

            var localVarPath = "/Forum/Recruit/Leave/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumLeaveFireteamThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to leave.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ForumLeaveFireteamThreadAsync (long? topicId)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await ForumLeaveFireteamThreadAsyncWithHttpInfo(topicId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the recruitment topic you wish to leave.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ForumLeaveFireteamThreadAsyncWithHttpInfo (long? topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumLeaveFireteamThread");

            var localVarPath = "/Forum/Recruit/Leave/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", Configuration.ApiClient.ParameterToString(topicId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumLeaveFireteamThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

    }
}
