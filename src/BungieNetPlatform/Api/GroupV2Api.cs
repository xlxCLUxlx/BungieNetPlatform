/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieNetPlatform.Client;
using BungieNetPlatform.Model;

namespace BungieNetPlatform.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GroupV2AbdicateFoundership (long? founderIdNew, long? groupId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GroupV2AbdicateFoundershipWithHttpInfo (long? founderIdNew, long? groupId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GroupV2AddOptionalConversation (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GroupV2AddOptionalConversationWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GroupV2ApproveAllPending (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GroupV2ApproveAllPendingWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GroupV2ApprovePending (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GroupV2ApprovePendingWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GroupV2ApprovePendingForList (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GroupV2ApprovePendingForListWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GroupV2BanMember (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GroupV2BanMemberWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GroupV2CreateGroup ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GroupV2CreateGroupWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GroupV2DenyAllPending (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GroupV2DenyAllPendingWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GroupV2DenyPendingForList (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GroupV2DenyPendingForListWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GroupV2EditClanBanner (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GroupV2EditClanBannerWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GroupV2EditFounderOptions (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GroupV2EditFounderOptionsWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GroupV2EditGroup (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GroupV2EditGroupWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GroupV2EditGroupMembership (long? groupId, long? membershipId, int? membershipType, int? memberType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GroupV2EditGroupMembershipWithHttpInfo (long? groupId, long? membershipId, int? membershipType, int? memberType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GroupV2EditOptionalConversation (long? conversationId, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GroupV2EditOptionalConversationWithHttpInfo (long? conversationId, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GroupV2GetAdminsAndFounderOfGroup (int? currentpage, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GroupV2GetAdminsAndFounderOfGroupWithHttpInfo (int? currentpage, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GroupV2GetAvailableAvatars ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GroupV2GetAvailableAvatarsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GroupV2GetAvailableThemes ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GroupV2GetAvailableThemesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GroupV2GetBannedMembersOfGroup (int? currentpage, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GroupV2GetBannedMembersOfGroupWithHttpInfo (int? currentpage, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GroupV2GetGroup (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GroupV2GetGroupWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GroupV2GetGroupByName (string groupName, int? groupType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GroupV2GetGroupByNameWithHttpInfo (string groupName, int? groupType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GroupV2GetGroupOptionalConversations (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GroupV2GetGroupOptionalConversationsWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GroupV2GetGroupsForMember (int? filter, int? groupType, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GroupV2GetGroupsForMemberWithHttpInfo (int? filter, int? groupType, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GroupV2GetInvitedIndividuals (int? currentpage, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GroupV2GetInvitedIndividualsWithHttpInfo (int? currentpage, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GroupV2GetMembersOfGroup (int? currentpage, long? groupId, int? memberType = null, string nameSearch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GroupV2GetMembersOfGroupWithHttpInfo (int? currentpage, long? groupId, int? memberType = null, string nameSearch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GroupV2GetPendingMemberships (int? currentpage, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GroupV2GetPendingMembershipsWithHttpInfo (int? currentpage, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 GroupV2GetPotentialGroupsForMember (int? filter, int? groupType, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> GroupV2GetPotentialGroupsForMemberWithHttpInfo (int? filter, int? groupType, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">The date range of activity of groups for which we should search. Is that proper grammar I don&#39;t know</param>
        /// <param name="groupType">The type of group to get.</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GroupV2GetRecommendedGroups (int? createDateRange, int? groupType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">The date range of activity of groups for which we should search. Is that proper grammar I don&#39;t know</param>
        /// <param name="groupType">The type of group to get.</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GroupV2GetRecommendedGroupsWithHttpInfo (int? createDateRange, int? groupType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GroupV2GetUserClanInviteSetting (int? mType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GroupV2GetUserClanInviteSettingWithHttpInfo (int? mType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GroupV2GroupSearch ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GroupV2GroupSearchWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GroupV2IndividualGroupInvite (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GroupV2IndividualGroupInviteWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GroupV2IndividualGroupInviteCancel (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GroupV2IndividualGroupInviteCancelWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GroupV2KickMember (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GroupV2KickMemberWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request permission to join the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipType">MembershipType of the account to use when joining.</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GroupV2RequestGroupMembership (long? groupId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request permission to join the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipType">MembershipType of the account to use when joining.</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GroupV2RequestGroupMembershipWithHttpInfo (long? groupId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rescind your application to join the given group or leave the group if you are already a member..
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipType">MembershipType of the account to leave.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GroupV2RescindGroupMembership (long? groupId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rescind your application to join the given group or leave the group if you are already a member..
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipType">MembershipType of the account to leave.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GroupV2RescindGroupMembershipWithHttpInfo (long? groupId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowInvites">True to allow invites of this user to clans, false otherwise.</param>
        /// <param name="mType">The Destiny membership type of linked account we are manipulating.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GroupV2SetUserClanInviteSetting (bool? allowInvites, int? mType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowInvites">True to allow invites of this user to clans, false otherwise.</param>
        /// <param name="mType">The Destiny membership type of linked account we are manipulating.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GroupV2SetUserClanInviteSettingWithHttpInfo (bool? allowInvites, int? mType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GroupV2UnbanMember (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GroupV2UnbanMemberWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GroupV2AbdicateFoundershipAsync (long? founderIdNew, long? groupId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GroupV2AbdicateFoundershipAsyncWithHttpInfo (long? founderIdNew, long? groupId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GroupV2AddOptionalConversationAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GroupV2AddOptionalConversationAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GroupV2ApproveAllPendingAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2ApproveAllPendingAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GroupV2ApprovePendingAsync (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GroupV2ApprovePendingAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GroupV2ApprovePendingForListAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2ApprovePendingForListAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GroupV2BanMemberAsync (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2BanMemberAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GroupV2CreateGroupAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GroupV2CreateGroupAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GroupV2DenyAllPendingAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2DenyAllPendingAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GroupV2DenyPendingForListAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2DenyPendingForListAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GroupV2EditClanBannerAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2EditClanBannerAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GroupV2EditFounderOptionsAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2EditFounderOptionsAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GroupV2EditGroupAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2EditGroupAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GroupV2EditGroupMembershipAsync (long? groupId, long? membershipId, int? membershipType, int? memberType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2EditGroupMembershipAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType, int? memberType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GroupV2EditOptionalConversationAsync (long? conversationId, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GroupV2EditOptionalConversationAsyncWithHttpInfo (long? conversationId, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GroupV2GetAdminsAndFounderOfGroupAsync (int? currentpage, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GroupV2GetAdminsAndFounderOfGroupAsyncWithHttpInfo (int? currentpage, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GroupV2GetAvailableAvatarsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GroupV2GetAvailableAvatarsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GroupV2GetAvailableThemesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GroupV2GetAvailableThemesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GroupV2GetBannedMembersOfGroupAsync (int? currentpage, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GroupV2GetBannedMembersOfGroupAsyncWithHttpInfo (int? currentpage, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GroupV2GetGroupAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GroupV2GetGroupAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GroupV2GetGroupByNameAsync (string groupName, int? groupType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GroupV2GetGroupByNameAsyncWithHttpInfo (string groupName, int? groupType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GroupV2GetGroupOptionalConversationsAsync (long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GroupV2GetGroupOptionalConversationsAsyncWithHttpInfo (long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GroupV2GetGroupsForMemberAsync (int? filter, int? groupType, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GroupV2GetGroupsForMemberAsyncWithHttpInfo (int? filter, int? groupType, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GroupV2GetInvitedIndividualsAsync (int? currentpage, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GroupV2GetInvitedIndividualsAsyncWithHttpInfo (int? currentpage, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GroupV2GetMembersOfGroupAsync (int? currentpage, long? groupId, int? memberType = null, string nameSearch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GroupV2GetMembersOfGroupAsyncWithHttpInfo (int? currentpage, long? groupId, int? memberType = null, string nameSearch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GroupV2GetPendingMembershipsAsync (int? currentpage, long? groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GroupV2GetPendingMembershipsAsyncWithHttpInfo (int? currentpage, long? groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> GroupV2GetPotentialGroupsForMemberAsync (int? filter, int? groupType, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GroupV2GetPotentialGroupsForMemberAsyncWithHttpInfo (int? filter, int? groupType, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">The date range of activity of groups for which we should search. Is that proper grammar I don&#39;t know</param>
        /// <param name="groupType">The type of group to get.</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GroupV2GetRecommendedGroupsAsync (int? createDateRange, int? groupType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">The date range of activity of groups for which we should search. Is that proper grammar I don&#39;t know</param>
        /// <param name="groupType">The type of group to get.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GroupV2GetRecommendedGroupsAsyncWithHttpInfo (int? createDateRange, int? groupType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GroupV2GetUserClanInviteSettingAsync (int? mType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GroupV2GetUserClanInviteSettingAsyncWithHttpInfo (int? mType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GroupV2GroupSearchAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GroupV2GroupSearchAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GroupV2IndividualGroupInviteAsync (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GroupV2IndividualGroupInviteAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GroupV2IndividualGroupInviteCancelAsync (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GroupV2IndividualGroupInviteCancelAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GroupV2KickMemberAsync (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2KickMemberAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request permission to join the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipType">MembershipType of the account to use when joining.</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GroupV2RequestGroupMembershipAsync (long? groupId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request permission to join the given group.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipType">MembershipType of the account to use when joining.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GroupV2RequestGroupMembershipAsyncWithHttpInfo (long? groupId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rescind your application to join the given group or leave the group if you are already a member..
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipType">MembershipType of the account to leave.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GroupV2RescindGroupMembershipAsync (long? groupId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Rescind your application to join the given group or leave the group if you are already a member..
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipType">MembershipType of the account to leave.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2RescindGroupMembershipAsyncWithHttpInfo (long? groupId, int? membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowInvites">True to allow invites of this user to clans, false otherwise.</param>
        /// <param name="mType">The Destiny membership type of linked account we are manipulating.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GroupV2SetUserClanInviteSettingAsync (bool? allowInvites, int? mType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowInvites">True to allow invites of this user to clans, false otherwise.</param>
        /// <param name="mType">The Destiny membership type of linked account we are manipulating.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2SetUserClanInviteSettingAsyncWithHttpInfo (bool? allowInvites, int? mType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GroupV2UnbanMemberAsync (long? groupId, long? membershipId, int? membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2UnbanMemberAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupV2Api : IGroupV2Api
    {
        private BungieNetPlatform.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupV2Api(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = BungieNetPlatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupV2Api(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieNetPlatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetPlatform.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GroupV2AbdicateFoundership (long? founderIdNew, long? groupId, int? membershipType)
        {
             ApiResponse<InlineResponse20014> localVarResponse = GroupV2AbdicateFoundershipWithHttpInfo(founderIdNew, groupId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > GroupV2AbdicateFoundershipWithHttpInfo (long? founderIdNew, long? groupId, int? membershipType)
        {
            // verify the required parameter 'founderIdNew' is set
            if (founderIdNew == null)
                throw new ApiException(400, "Missing required parameter 'founderIdNew' when calling GroupV2Api->GroupV2AbdicateFoundership");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2AbdicateFoundership");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2AbdicateFoundership");

            var localVarPath = "/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (founderIdNew != null) localVarPathParams.Add("founderIdNew", Configuration.ApiClient.ParameterToString(founderIdNew)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2AbdicateFoundership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GroupV2AbdicateFoundershipAsync (long? founderIdNew, long? groupId, int? membershipType)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await GroupV2AbdicateFoundershipAsyncWithHttpInfo(founderIdNew, groupId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GroupV2AbdicateFoundershipAsyncWithHttpInfo (long? founderIdNew, long? groupId, int? membershipType)
        {
            // verify the required parameter 'founderIdNew' is set
            if (founderIdNew == null)
                throw new ApiException(400, "Missing required parameter 'founderIdNew' when calling GroupV2Api->GroupV2AbdicateFoundership");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2AbdicateFoundership");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2AbdicateFoundership");

            var localVarPath = "/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (founderIdNew != null) localVarPathParams.Add("founderIdNew", Configuration.ApiClient.ParameterToString(founderIdNew)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2AbdicateFoundership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GroupV2AddOptionalConversation (long? groupId)
        {
             ApiResponse<InlineResponse2007> localVarResponse = GroupV2AddOptionalConversationWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > GroupV2AddOptionalConversationWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2AddOptionalConversation");

            var localVarPath = "/GroupV2/{groupId}/OptionalConversations/Add/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2AddOptionalConversation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GroupV2AddOptionalConversationAsync (long? groupId)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GroupV2AddOptionalConversationAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GroupV2AddOptionalConversationAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2AddOptionalConversation");

            var localVarPath = "/GroupV2/{groupId}/OptionalConversations/Add/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2AddOptionalConversation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GroupV2ApproveAllPending (long? groupId)
        {
             ApiResponse<InlineResponse20026> localVarResponse = GroupV2ApproveAllPendingWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > GroupV2ApproveAllPendingWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2ApproveAllPending");

            var localVarPath = "/GroupV2/{groupId}/Members/ApproveAll/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2ApproveAllPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GroupV2ApproveAllPendingAsync (long? groupId)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await GroupV2ApproveAllPendingAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2ApproveAllPendingAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2ApproveAllPending");

            var localVarPath = "/GroupV2/{groupId}/Members/ApproveAll/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2ApproveAllPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GroupV2ApprovePending (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20014> localVarResponse = GroupV2ApprovePendingWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > GroupV2ApprovePendingWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2ApprovePending");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2ApprovePending");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2ApprovePending");

            var localVarPath = "/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2ApprovePending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GroupV2ApprovePendingAsync (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await GroupV2ApprovePendingAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GroupV2ApprovePendingAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2ApprovePending");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2ApprovePending");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2ApprovePending");

            var localVarPath = "/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2ApprovePending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GroupV2ApprovePendingForList (long? groupId)
        {
             ApiResponse<InlineResponse20026> localVarResponse = GroupV2ApprovePendingForListWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > GroupV2ApprovePendingForListWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2ApprovePendingForList");

            var localVarPath = "/GroupV2/{groupId}/Members/ApproveList/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2ApprovePendingForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GroupV2ApprovePendingForListAsync (long? groupId)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await GroupV2ApprovePendingForListAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2ApprovePendingForListAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2ApprovePendingForList");

            var localVarPath = "/GroupV2/{groupId}/Members/ApproveList/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2ApprovePendingForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GroupV2BanMember (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GroupV2BanMemberWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GroupV2BanMemberWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2BanMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2BanMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2BanMember");

            var localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2BanMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GroupV2BanMemberAsync (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GroupV2BanMemberAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2BanMemberAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2BanMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2BanMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2BanMember");

            var localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2BanMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Create a new group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GroupV2CreateGroup ()
        {
             ApiResponse<InlineResponse20020> localVarResponse = GroupV2CreateGroupWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public ApiResponse< InlineResponse20020 > GroupV2CreateGroupWithHttpInfo ()
        {

            var localVarPath = "/GroupV2/Create/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20020) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        ///  Create a new group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GroupV2CreateGroupAsync ()
        {
             ApiResponse<InlineResponse20020> localVarResponse = await GroupV2CreateGroupAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GroupV2CreateGroupAsyncWithHttpInfo ()
        {

            var localVarPath = "/GroupV2/Create/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20020) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GroupV2DenyAllPending (long? groupId)
        {
             ApiResponse<InlineResponse20026> localVarResponse = GroupV2DenyAllPendingWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > GroupV2DenyAllPendingWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2DenyAllPending");

            var localVarPath = "/GroupV2/{groupId}/Members/DenyAll/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2DenyAllPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GroupV2DenyAllPendingAsync (long? groupId)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await GroupV2DenyAllPendingAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2DenyAllPendingAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2DenyAllPending");

            var localVarPath = "/GroupV2/{groupId}/Members/DenyAll/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2DenyAllPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GroupV2DenyPendingForList (long? groupId)
        {
             ApiResponse<InlineResponse20026> localVarResponse = GroupV2DenyPendingForListWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > GroupV2DenyPendingForListWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2DenyPendingForList");

            var localVarPath = "/GroupV2/{groupId}/Members/DenyList/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2DenyPendingForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GroupV2DenyPendingForListAsync (long? groupId)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await GroupV2DenyPendingForListAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2DenyPendingForListAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2DenyPendingForList");

            var localVarPath = "/GroupV2/{groupId}/Members/DenyList/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2DenyPendingForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GroupV2EditClanBanner (long? groupId)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GroupV2EditClanBannerWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GroupV2EditClanBannerWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditClanBanner");

            var localVarPath = "/GroupV2/{groupId}/EditClanBanner/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditClanBanner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GroupV2EditClanBannerAsync (long? groupId)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GroupV2EditClanBannerAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2EditClanBannerAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditClanBanner");

            var localVarPath = "/GroupV2/{groupId}/EditClanBanner/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditClanBanner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GroupV2EditFounderOptions (long? groupId)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GroupV2EditFounderOptionsWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GroupV2EditFounderOptionsWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditFounderOptions");

            var localVarPath = "/GroupV2/{groupId}/EditFounderOptions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditFounderOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GroupV2EditFounderOptionsAsync (long? groupId)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GroupV2EditFounderOptionsAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2EditFounderOptionsAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditFounderOptions");

            var localVarPath = "/GroupV2/{groupId}/EditFounderOptions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditFounderOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GroupV2EditGroup (long? groupId)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GroupV2EditGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GroupV2EditGroupWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditGroup");

            var localVarPath = "/GroupV2/{groupId}/Edit/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GroupV2EditGroupAsync (long? groupId)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GroupV2EditGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2EditGroupAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditGroup");

            var localVarPath = "/GroupV2/{groupId}/Edit/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GroupV2EditGroupMembership (long? groupId, long? membershipId, int? membershipType, int? memberType)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GroupV2EditGroupMembershipWithHttpInfo(groupId, membershipId, membershipType, memberType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GroupV2EditGroupMembershipWithHttpInfo (long? groupId, long? membershipId, int? membershipType, int? memberType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditGroupMembership");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2EditGroupMembership");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2EditGroupMembership");
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling GroupV2Api->GroupV2EditGroupMembership");

            var localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (memberType != null) localVarPathParams.Add("memberType", Configuration.ApiClient.ParameterToString(memberType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditGroupMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GroupV2EditGroupMembershipAsync (long? groupId, long? membershipId, int? membershipType, int? memberType)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GroupV2EditGroupMembershipAsyncWithHttpInfo(groupId, membershipId, membershipType, memberType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2EditGroupMembershipAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType, int? memberType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditGroupMembership");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2EditGroupMembership");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2EditGroupMembership");
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling GroupV2Api->GroupV2EditGroupMembership");

            var localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter
            if (memberType != null) localVarPathParams.Add("memberType", Configuration.ApiClient.ParameterToString(memberType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditGroupMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GroupV2EditOptionalConversation (long? conversationId, long? groupId)
        {
             ApiResponse<InlineResponse2007> localVarResponse = GroupV2EditOptionalConversationWithHttpInfo(conversationId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > GroupV2EditOptionalConversationWithHttpInfo (long? conversationId, long? groupId)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new ApiException(400, "Missing required parameter 'conversationId' when calling GroupV2Api->GroupV2EditOptionalConversation");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditOptionalConversation");

            var localVarPath = "/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conversationId != null) localVarPathParams.Add("conversationId", Configuration.ApiClient.ParameterToString(conversationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditOptionalConversation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GroupV2EditOptionalConversationAsync (long? conversationId, long? groupId)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GroupV2EditOptionalConversationAsyncWithHttpInfo(conversationId, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GroupV2EditOptionalConversationAsyncWithHttpInfo (long? conversationId, long? groupId)
        {
            // verify the required parameter 'conversationId' is set
            if (conversationId == null)
                throw new ApiException(400, "Missing required parameter 'conversationId' when calling GroupV2Api->GroupV2EditOptionalConversation");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2EditOptionalConversation");

            var localVarPath = "/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conversationId != null) localVarPathParams.Add("conversationId", Configuration.ApiClient.ParameterToString(conversationId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2EditOptionalConversation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GroupV2GetAdminsAndFounderOfGroup (int? currentpage, long? groupId)
        {
             ApiResponse<InlineResponse20021> localVarResponse = GroupV2GetAdminsAndFounderOfGroupWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse< InlineResponse20021 > GroupV2GetAdminsAndFounderOfGroupWithHttpInfo (int? currentpage, long? groupId)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetAdminsAndFounderOfGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetAdminsAndFounderOfGroup");

            var localVarPath = "/GroupV2/{groupId}/AdminsAndFounder/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetAdminsAndFounderOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20021) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GroupV2GetAdminsAndFounderOfGroupAsync (int? currentpage, long? groupId)
        {
             ApiResponse<InlineResponse20021> localVarResponse = await GroupV2GetAdminsAndFounderOfGroupAsyncWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GroupV2GetAdminsAndFounderOfGroupAsyncWithHttpInfo (int? currentpage, long? groupId)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetAdminsAndFounderOfGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetAdminsAndFounderOfGroup");

            var localVarPath = "/GroupV2/{groupId}/AdminsAndFounder/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetAdminsAndFounderOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20021) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GroupV2GetAvailableAvatars ()
        {
             ApiResponse<InlineResponse20012> localVarResponse = GroupV2GetAvailableAvatarsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse< InlineResponse20012 > GroupV2GetAvailableAvatarsWithHttpInfo ()
        {

            var localVarPath = "/GroupV2/GetAvailableAvatars/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetAvailableAvatars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20012) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GroupV2GetAvailableAvatarsAsync ()
        {
             ApiResponse<InlineResponse20012> localVarResponse = await GroupV2GetAvailableAvatarsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GroupV2GetAvailableAvatarsAsyncWithHttpInfo ()
        {

            var localVarPath = "/GroupV2/GetAvailableAvatars/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetAvailableAvatars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20012) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GroupV2GetAvailableThemes ()
        {
             ApiResponse<InlineResponse20013> localVarResponse = GroupV2GetAvailableThemesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > GroupV2GetAvailableThemesWithHttpInfo ()
        {

            var localVarPath = "/GroupV2/GetAvailableThemes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetAvailableThemes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GroupV2GetAvailableThemesAsync ()
        {
             ApiResponse<InlineResponse20013> localVarResponse = await GroupV2GetAvailableThemesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GroupV2GetAvailableThemesAsyncWithHttpInfo ()
        {

            var localVarPath = "/GroupV2/GetAvailableThemes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetAvailableThemes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GroupV2GetBannedMembersOfGroup (int? currentpage, long? groupId)
        {
             ApiResponse<InlineResponse20023> localVarResponse = GroupV2GetBannedMembersOfGroupWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse< InlineResponse20023 > GroupV2GetBannedMembersOfGroupWithHttpInfo (int? currentpage, long? groupId)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetBannedMembersOfGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetBannedMembersOfGroup");

            var localVarPath = "/GroupV2/{groupId}/Banned/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetBannedMembersOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20023) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> GroupV2GetBannedMembersOfGroupAsync (int? currentpage, long? groupId)
        {
             ApiResponse<InlineResponse20023> localVarResponse = await GroupV2GetBannedMembersOfGroupAsyncWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GroupV2GetBannedMembersOfGroupAsyncWithHttpInfo (int? currentpage, long? groupId)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetBannedMembersOfGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetBannedMembersOfGroup");

            var localVarPath = "/GroupV2/{groupId}/Banned/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetBannedMembersOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20023) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GroupV2GetGroup (long? groupId)
        {
             ApiResponse<InlineResponse20018> localVarResponse = GroupV2GetGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse< InlineResponse20018 > GroupV2GetGroupWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetGroup");

            var localVarPath = "/GroupV2/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> GroupV2GetGroupAsync (long? groupId)
        {
             ApiResponse<InlineResponse20018> localVarResponse = await GroupV2GetGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GroupV2GetGroupAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetGroup");

            var localVarPath = "/GroupV2/{groupId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GroupV2GetGroupByName (string groupName, int? groupType)
        {
             ApiResponse<InlineResponse20018> localVarResponse = GroupV2GetGroupByNameWithHttpInfo(groupName, groupType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse< InlineResponse20018 > GroupV2GetGroupByNameWithHttpInfo (string groupName, int? groupType)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupV2Api->GroupV2GetGroupByName");
            // verify the required parameter 'groupType' is set
            if (groupType == null)
                throw new ApiException(400, "Missing required parameter 'groupType' when calling GroupV2Api->GroupV2GetGroupByName");

            var localVarPath = "/GroupV2/Name/{groupName}/{groupType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupName != null) localVarPathParams.Add("groupName", Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (groupType != null) localVarPathParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetGroupByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> GroupV2GetGroupByNameAsync (string groupName, int? groupType)
        {
             ApiResponse<InlineResponse20018> localVarResponse = await GroupV2GetGroupByNameAsyncWithHttpInfo(groupName, groupType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GroupV2GetGroupByNameAsyncWithHttpInfo (string groupName, int? groupType)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupV2Api->GroupV2GetGroupByName");
            // verify the required parameter 'groupType' is set
            if (groupType == null)
                throw new ApiException(400, "Missing required parameter 'groupType' when calling GroupV2Api->GroupV2GetGroupByName");

            var localVarPath = "/GroupV2/Name/{groupName}/{groupType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupName != null) localVarPathParams.Add("groupName", Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (groupType != null) localVarPathParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetGroupByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GroupV2GetGroupOptionalConversations (long? groupId)
        {
             ApiResponse<InlineResponse20019> localVarResponse = GroupV2GetGroupOptionalConversationsWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > GroupV2GetGroupOptionalConversationsWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetGroupOptionalConversations");

            var localVarPath = "/GroupV2/{groupId}/OptionalConversations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetGroupOptionalConversations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> GroupV2GetGroupOptionalConversationsAsync (long? groupId)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await GroupV2GetGroupOptionalConversationsAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GroupV2GetGroupOptionalConversationsAsyncWithHttpInfo (long? groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetGroupOptionalConversations");

            var localVarPath = "/GroupV2/{groupId}/OptionalConversations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetGroupOptionalConversations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GroupV2GetGroupsForMember (int? filter, int? groupType, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20027> localVarResponse = GroupV2GetGroupsForMemberWithHttpInfo(filter, groupType, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse< InlineResponse20027 > GroupV2GetGroupsForMemberWithHttpInfo (int? filter, int? groupType, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling GroupV2Api->GroupV2GetGroupsForMember");
            // verify the required parameter 'groupType' is set
            if (groupType == null)
                throw new ApiException(400, "Missing required parameter 'groupType' when calling GroupV2Api->GroupV2GetGroupsForMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2GetGroupsForMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2GetGroupsForMember");

            var localVarPath = "/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (groupType != null) localVarPathParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetGroupsForMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20027) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GroupV2GetGroupsForMemberAsync (int? filter, int? groupType, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20027> localVarResponse = await GroupV2GetGroupsForMemberAsyncWithHttpInfo(filter, groupType, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GroupV2GetGroupsForMemberAsyncWithHttpInfo (int? filter, int? groupType, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling GroupV2Api->GroupV2GetGroupsForMember");
            // verify the required parameter 'groupType' is set
            if (groupType == null)
                throw new ApiException(400, "Missing required parameter 'groupType' when calling GroupV2Api->GroupV2GetGroupsForMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2GetGroupsForMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2GetGroupsForMember");

            var localVarPath = "/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (groupType != null) localVarPathParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetGroupsForMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20027) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GroupV2GetInvitedIndividuals (int? currentpage, long? groupId)
        {
             ApiResponse<InlineResponse20025> localVarResponse = GroupV2GetInvitedIndividualsWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse< InlineResponse20025 > GroupV2GetInvitedIndividualsWithHttpInfo (int? currentpage, long? groupId)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetInvitedIndividuals");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetInvitedIndividuals");

            var localVarPath = "/GroupV2/{groupId}/Members/InvitedIndividuals/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetInvitedIndividuals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20025) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GroupV2GetInvitedIndividualsAsync (int? currentpage, long? groupId)
        {
             ApiResponse<InlineResponse20025> localVarResponse = await GroupV2GetInvitedIndividualsAsyncWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GroupV2GetInvitedIndividualsAsyncWithHttpInfo (int? currentpage, long? groupId)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetInvitedIndividuals");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetInvitedIndividuals");

            var localVarPath = "/GroupV2/{groupId}/Members/InvitedIndividuals/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetInvitedIndividuals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20025) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GroupV2GetMembersOfGroup (int? currentpage, long? groupId, int? memberType = null, string nameSearch = null)
        {
             ApiResponse<InlineResponse20021> localVarResponse = GroupV2GetMembersOfGroupWithHttpInfo(currentpage, groupId, memberType, nameSearch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse< InlineResponse20021 > GroupV2GetMembersOfGroupWithHttpInfo (int? currentpage, long? groupId, int? memberType = null, string nameSearch = null)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetMembersOfGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetMembersOfGroup");

            var localVarPath = "/GroupV2/{groupId}/Members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (memberType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "memberType", memberType)); // query parameter
            if (nameSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameSearch", nameSearch)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetMembersOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20021) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GroupV2GetMembersOfGroupAsync (int? currentpage, long? groupId, int? memberType = null, string nameSearch = null)
        {
             ApiResponse<InlineResponse20021> localVarResponse = await GroupV2GetMembersOfGroupAsyncWithHttpInfo(currentpage, groupId, memberType, nameSearch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GroupV2GetMembersOfGroupAsyncWithHttpInfo (int? currentpage, long? groupId, int? memberType = null, string nameSearch = null)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetMembersOfGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetMembersOfGroup");

            var localVarPath = "/GroupV2/{groupId}/Members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (memberType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "memberType", memberType)); // query parameter
            if (nameSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameSearch", nameSearch)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetMembersOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20021) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GroupV2GetPendingMemberships (int? currentpage, long? groupId)
        {
             ApiResponse<InlineResponse20025> localVarResponse = GroupV2GetPendingMembershipsWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse< InlineResponse20025 > GroupV2GetPendingMembershipsWithHttpInfo (int? currentpage, long? groupId)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetPendingMemberships");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetPendingMemberships");

            var localVarPath = "/GroupV2/{groupId}/Members/Pending/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetPendingMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20025) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GroupV2GetPendingMembershipsAsync (int? currentpage, long? groupId)
        {
             ApiResponse<InlineResponse20025> localVarResponse = await GroupV2GetPendingMembershipsAsyncWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GroupV2GetPendingMembershipsAsyncWithHttpInfo (int? currentpage, long? groupId)
        {
            // verify the required parameter 'currentpage' is set
            if (currentpage == null)
                throw new ApiException(400, "Missing required parameter 'currentpage' when calling GroupV2Api->GroupV2GetPendingMemberships");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2GetPendingMemberships");

            var localVarPath = "/GroupV2/{groupId}/Members/Pending/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentpage != null) localVarPathParams.Add("currentpage", Configuration.ApiClient.ParameterToString(currentpage)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetPendingMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20025) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 GroupV2GetPotentialGroupsForMember (int? filter, int? groupType, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20028> localVarResponse = GroupV2GetPotentialGroupsForMemberWithHttpInfo(filter, groupType, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse< InlineResponse20028 > GroupV2GetPotentialGroupsForMemberWithHttpInfo (int? filter, int? groupType, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling GroupV2Api->GroupV2GetPotentialGroupsForMember");
            // verify the required parameter 'groupType' is set
            if (groupType == null)
                throw new ApiException(400, "Missing required parameter 'groupType' when calling GroupV2Api->GroupV2GetPotentialGroupsForMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2GetPotentialGroupsForMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2GetPotentialGroupsForMember");

            var localVarPath = "/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (groupType != null) localVarPathParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetPotentialGroupsForMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20028) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> GroupV2GetPotentialGroupsForMemberAsync (int? filter, int? groupType, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20028> localVarResponse = await GroupV2GetPotentialGroupsForMemberAsyncWithHttpInfo(filter, groupType, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GroupV2GetPotentialGroupsForMemberAsyncWithHttpInfo (int? filter, int? groupType, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling GroupV2Api->GroupV2GetPotentialGroupsForMember");
            // verify the required parameter 'groupType' is set
            if (groupType == null)
                throw new ApiException(400, "Missing required parameter 'groupType' when calling GroupV2Api->GroupV2GetPotentialGroupsForMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2GetPotentialGroupsForMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2GetPotentialGroupsForMember");

            var localVarPath = "/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (groupType != null) localVarPathParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetPotentialGroupsForMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20028) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">The date range of activity of groups for which we should search. Is that proper grammar I don&#39;t know</param>
        /// <param name="groupType">The type of group to get.</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GroupV2GetRecommendedGroups (int? createDateRange, int? groupType)
        {
             ApiResponse<InlineResponse20016> localVarResponse = GroupV2GetRecommendedGroupsWithHttpInfo(createDateRange, groupType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">The date range of activity of groups for which we should search. Is that proper grammar I don&#39;t know</param>
        /// <param name="groupType">The type of group to get.</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse< InlineResponse20016 > GroupV2GetRecommendedGroupsWithHttpInfo (int? createDateRange, int? groupType)
        {
            // verify the required parameter 'createDateRange' is set
            if (createDateRange == null)
                throw new ApiException(400, "Missing required parameter 'createDateRange' when calling GroupV2Api->GroupV2GetRecommendedGroups");
            // verify the required parameter 'groupType' is set
            if (groupType == null)
                throw new ApiException(400, "Missing required parameter 'groupType' when calling GroupV2Api->GroupV2GetRecommendedGroups");

            var localVarPath = "/GroupV2/Recommended/{groupType}/{createDateRange}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createDateRange != null) localVarPathParams.Add("createDateRange", Configuration.ApiClient.ParameterToString(createDateRange)); // path parameter
            if (groupType != null) localVarPathParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetRecommendedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">The date range of activity of groups for which we should search. Is that proper grammar I don&#39;t know</param>
        /// <param name="groupType">The type of group to get.</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> GroupV2GetRecommendedGroupsAsync (int? createDateRange, int? groupType)
        {
             ApiResponse<InlineResponse20016> localVarResponse = await GroupV2GetRecommendedGroupsAsyncWithHttpInfo(createDateRange, groupType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">The date range of activity of groups for which we should search. Is that proper grammar I don&#39;t know</param>
        /// <param name="groupType">The type of group to get.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GroupV2GetRecommendedGroupsAsyncWithHttpInfo (int? createDateRange, int? groupType)
        {
            // verify the required parameter 'createDateRange' is set
            if (createDateRange == null)
                throw new ApiException(400, "Missing required parameter 'createDateRange' when calling GroupV2Api->GroupV2GetRecommendedGroups");
            // verify the required parameter 'groupType' is set
            if (groupType == null)
                throw new ApiException(400, "Missing required parameter 'groupType' when calling GroupV2Api->GroupV2GetRecommendedGroups");

            var localVarPath = "/GroupV2/Recommended/{groupType}/{createDateRange}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createDateRange != null) localVarPathParams.Add("createDateRange", Configuration.ApiClient.ParameterToString(createDateRange)); // path parameter
            if (groupType != null) localVarPathParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetRecommendedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GroupV2GetUserClanInviteSetting (int? mType)
        {
             ApiResponse<InlineResponse20014> localVarResponse = GroupV2GetUserClanInviteSettingWithHttpInfo(mType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > GroupV2GetUserClanInviteSettingWithHttpInfo (int? mType)
        {
            // verify the required parameter 'mType' is set
            if (mType == null)
                throw new ApiException(400, "Missing required parameter 'mType' when calling GroupV2Api->GroupV2GetUserClanInviteSetting");

            var localVarPath = "/GroupV2/GetUserClanInviteSetting/{mType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mType != null) localVarPathParams.Add("mType", Configuration.ApiClient.ParameterToString(mType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetUserClanInviteSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GroupV2GetUserClanInviteSettingAsync (int? mType)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await GroupV2GetUserClanInviteSettingAsyncWithHttpInfo(mType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GroupV2GetUserClanInviteSettingAsyncWithHttpInfo (int? mType)
        {
            // verify the required parameter 'mType' is set
            if (mType == null)
                throw new ApiException(400, "Missing required parameter 'mType' when calling GroupV2Api->GroupV2GetUserClanInviteSetting");

            var localVarPath = "/GroupV2/GetUserClanInviteSetting/{mType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mType != null) localVarPathParams.Add("mType", Configuration.ApiClient.ParameterToString(mType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GetUserClanInviteSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GroupV2GroupSearch ()
        {
             ApiResponse<InlineResponse20017> localVarResponse = GroupV2GroupSearchWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > GroupV2GroupSearchWithHttpInfo ()
        {

            var localVarPath = "/GroupV2/Search/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GroupSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GroupV2GroupSearchAsync ()
        {
             ApiResponse<InlineResponse20017> localVarResponse = await GroupV2GroupSearchAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GroupV2GroupSearchAsyncWithHttpInfo ()
        {

            var localVarPath = "/GroupV2/Search/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2GroupSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GroupV2IndividualGroupInvite (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20024> localVarResponse = GroupV2IndividualGroupInviteWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse< InlineResponse20024 > GroupV2IndividualGroupInviteWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2IndividualGroupInvite");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2IndividualGroupInvite");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2IndividualGroupInvite");

            var localVarPath = "/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2IndividualGroupInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GroupV2IndividualGroupInviteAsync (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20024> localVarResponse = await GroupV2IndividualGroupInviteAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GroupV2IndividualGroupInviteAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2IndividualGroupInvite");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2IndividualGroupInvite");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2IndividualGroupInvite");

            var localVarPath = "/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2IndividualGroupInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GroupV2IndividualGroupInviteCancel (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20024> localVarResponse = GroupV2IndividualGroupInviteCancelWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse< InlineResponse20024 > GroupV2IndividualGroupInviteCancelWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2IndividualGroupInviteCancel");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2IndividualGroupInviteCancel");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2IndividualGroupInviteCancel");

            var localVarPath = "/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2IndividualGroupInviteCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GroupV2IndividualGroupInviteCancelAsync (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20024> localVarResponse = await GroupV2IndividualGroupInviteCancelAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GroupV2IndividualGroupInviteCancelAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2IndividualGroupInviteCancel");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2IndividualGroupInviteCancel");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2IndividualGroupInviteCancel");

            var localVarPath = "/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2IndividualGroupInviteCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GroupV2KickMember (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20022> localVarResponse = GroupV2KickMemberWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse< InlineResponse20022 > GroupV2KickMemberWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2KickMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2KickMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2KickMember");

            var localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2KickMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GroupV2KickMemberAsync (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20022> localVarResponse = await GroupV2KickMemberAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2KickMemberAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2KickMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2KickMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2KickMember");

            var localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2KickMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        ///  Request permission to join the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipType">MembershipType of the account to use when joining.</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GroupV2RequestGroupMembership (long? groupId, int? membershipType)
        {
             ApiResponse<InlineResponse20024> localVarResponse = GroupV2RequestGroupMembershipWithHttpInfo(groupId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Request permission to join the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipType">MembershipType of the account to use when joining.</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse< InlineResponse20024 > GroupV2RequestGroupMembershipWithHttpInfo (long? groupId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2RequestGroupMembership");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2RequestGroupMembership");

            var localVarPath = "/GroupV2/{groupId}/Members/Apply/{membershipType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2RequestGroupMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        ///  Request permission to join the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipType">MembershipType of the account to use when joining.</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GroupV2RequestGroupMembershipAsync (long? groupId, int? membershipType)
        {
             ApiResponse<InlineResponse20024> localVarResponse = await GroupV2RequestGroupMembershipAsyncWithHttpInfo(groupId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Request permission to join the given group.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipType">MembershipType of the account to use when joining.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GroupV2RequestGroupMembershipAsyncWithHttpInfo (long? groupId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2RequestGroupMembership");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2RequestGroupMembership");

            var localVarPath = "/GroupV2/{groupId}/Members/Apply/{membershipType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2RequestGroupMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        ///  Rescind your application to join the given group or leave the group if you are already a member..
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipType">MembershipType of the account to leave.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GroupV2RescindGroupMembership (long? groupId, int? membershipType)
        {
             ApiResponse<InlineResponse20022> localVarResponse = GroupV2RescindGroupMembershipWithHttpInfo(groupId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Rescind your application to join the given group or leave the group if you are already a member..
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipType">MembershipType of the account to leave.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse< InlineResponse20022 > GroupV2RescindGroupMembershipWithHttpInfo (long? groupId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2RescindGroupMembership");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2RescindGroupMembership");

            var localVarPath = "/GroupV2/{groupId}/Members/Rescind/{membershipType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2RescindGroupMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        ///  Rescind your application to join the given group or leave the group if you are already a member..
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipType">MembershipType of the account to leave.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GroupV2RescindGroupMembershipAsync (long? groupId, int? membershipType)
        {
             ApiResponse<InlineResponse20022> localVarResponse = await GroupV2RescindGroupMembershipAsyncWithHttpInfo(groupId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Rescind your application to join the given group or leave the group if you are already a member..
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipType">MembershipType of the account to leave.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2RescindGroupMembershipAsyncWithHttpInfo (long? groupId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2RescindGroupMembership");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2RescindGroupMembership");

            var localVarPath = "/GroupV2/{groupId}/Members/Rescind/{membershipType}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2RescindGroupMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        ///  Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowInvites">True to allow invites of this user to clans, false otherwise.</param>
        /// <param name="mType">The Destiny membership type of linked account we are manipulating.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GroupV2SetUserClanInviteSetting (bool? allowInvites, int? mType)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GroupV2SetUserClanInviteSettingWithHttpInfo(allowInvites, mType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowInvites">True to allow invites of this user to clans, false otherwise.</param>
        /// <param name="mType">The Destiny membership type of linked account we are manipulating.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GroupV2SetUserClanInviteSettingWithHttpInfo (bool? allowInvites, int? mType)
        {
            // verify the required parameter 'allowInvites' is set
            if (allowInvites == null)
                throw new ApiException(400, "Missing required parameter 'allowInvites' when calling GroupV2Api->GroupV2SetUserClanInviteSetting");
            // verify the required parameter 'mType' is set
            if (mType == null)
                throw new ApiException(400, "Missing required parameter 'mType' when calling GroupV2Api->GroupV2SetUserClanInviteSetting");

            var localVarPath = "/GroupV2/SetUserClanInviteSetting/{mType}/{allowInvites}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allowInvites != null) localVarPathParams.Add("allowInvites", Configuration.ApiClient.ParameterToString(allowInvites)); // path parameter
            if (mType != null) localVarPathParams.Add("mType", Configuration.ApiClient.ParameterToString(mType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2SetUserClanInviteSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowInvites">True to allow invites of this user to clans, false otherwise.</param>
        /// <param name="mType">The Destiny membership type of linked account we are manipulating.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GroupV2SetUserClanInviteSettingAsync (bool? allowInvites, int? mType)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GroupV2SetUserClanInviteSettingAsyncWithHttpInfo(allowInvites, mType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowInvites">True to allow invites of this user to clans, false otherwise.</param>
        /// <param name="mType">The Destiny membership type of linked account we are manipulating.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2SetUserClanInviteSettingAsyncWithHttpInfo (bool? allowInvites, int? mType)
        {
            // verify the required parameter 'allowInvites' is set
            if (allowInvites == null)
                throw new ApiException(400, "Missing required parameter 'allowInvites' when calling GroupV2Api->GroupV2SetUserClanInviteSetting");
            // verify the required parameter 'mType' is set
            if (mType == null)
                throw new ApiException(400, "Missing required parameter 'mType' when calling GroupV2Api->GroupV2SetUserClanInviteSetting");

            var localVarPath = "/GroupV2/SetUserClanInviteSetting/{mType}/{allowInvites}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allowInvites != null) localVarPathParams.Add("allowInvites", Configuration.ApiClient.ParameterToString(allowInvites)); // path parameter
            if (mType != null) localVarPathParams.Add("mType", Configuration.ApiClient.ParameterToString(mType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2SetUserClanInviteSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GroupV2UnbanMember (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GroupV2UnbanMemberWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GroupV2UnbanMemberWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2UnbanMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2UnbanMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2UnbanMember");

            var localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2UnbanMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GroupV2UnbanMemberAsync (long? groupId, long? membershipId, int? membershipType)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GroupV2UnbanMemberAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="BungieNetPlatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2UnbanMemberAsyncWithHttpInfo (long? groupId, long? membershipId, int? membershipType)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupV2Api->GroupV2UnbanMember");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling GroupV2Api->GroupV2UnbanMember");
            // verify the required parameter 'membershipType' is set
            if (membershipType == null)
                throw new ApiException(400, "Missing required parameter 'membershipType' when calling GroupV2Api->GroupV2UnbanMember");

            var localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", Configuration.ApiClient.ParameterToString(membershipId)); // path parameter
            if (membershipType != null) localVarPathParams.Add("membershipType", Configuration.ApiClient.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupV2UnbanMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

    }
}
