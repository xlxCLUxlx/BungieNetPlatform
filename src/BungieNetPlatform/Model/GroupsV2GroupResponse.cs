/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// GroupsV2GroupResponse
    /// </summary>
    [DataContract]
    public partial class GroupsV2GroupResponse :  IEquatable<GroupsV2GroupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsV2GroupResponse" /> class.
        /// </summary>
        /// <param name="Detail">Detail.</param>
        /// <param name="Founder">Founder.</param>
        /// <param name="AlliedIds">AlliedIds.</param>
        /// <param name="ParentGroup">ParentGroup.</param>
        /// <param name="AllianceStatus">AllianceStatus.</param>
        /// <param name="GroupJoinInviteCount">GroupJoinInviteCount.</param>
        /// <param name="CurrentUserMemberMap">This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available..</param>
        /// <param name="CurrentUserPotentialMemberMap">This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once..</param>
        public GroupsV2GroupResponse(GroupsV2GroupV2 Detail = default(GroupsV2GroupV2), GroupsV2GroupMember Founder = default(GroupsV2GroupMember), List<long?> AlliedIds = default(List<long?>), GroupsV2GroupV2 ParentGroup = default(GroupsV2GroupV2), GroupsV2GroupAllianceStatus AllianceStatus = default(GroupsV2GroupAllianceStatus), int? GroupJoinInviteCount = default(int?), Dictionary<string, GroupsV2GroupMember> CurrentUserMemberMap = default(Dictionary<string, GroupsV2GroupMember>), Dictionary<string, GroupsV2GroupPotentialMember> CurrentUserPotentialMemberMap = default(Dictionary<string, GroupsV2GroupPotentialMember>))
        {
            this.Detail = Detail;
            this.Founder = Founder;
            this.AlliedIds = AlliedIds;
            this.ParentGroup = ParentGroup;
            this.AllianceStatus = AllianceStatus;
            this.GroupJoinInviteCount = GroupJoinInviteCount;
            this.CurrentUserMemberMap = CurrentUserMemberMap;
            this.CurrentUserPotentialMemberMap = CurrentUserPotentialMemberMap;
        }
        
        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public GroupsV2GroupV2 Detail { get; set; }

        /// <summary>
        /// Gets or Sets Founder
        /// </summary>
        [DataMember(Name="founder", EmitDefaultValue=false)]
        public GroupsV2GroupMember Founder { get; set; }

        /// <summary>
        /// Gets or Sets AlliedIds
        /// </summary>
        [DataMember(Name="alliedIds", EmitDefaultValue=false)]
        public List<long?> AlliedIds { get; set; }

        /// <summary>
        /// Gets or Sets ParentGroup
        /// </summary>
        [DataMember(Name="parentGroup", EmitDefaultValue=false)]
        public GroupsV2GroupV2 ParentGroup { get; set; }

        /// <summary>
        /// Gets or Sets AllianceStatus
        /// </summary>
        [DataMember(Name="allianceStatus", EmitDefaultValue=false)]
        public GroupsV2GroupAllianceStatus AllianceStatus { get; set; }

        /// <summary>
        /// Gets or Sets GroupJoinInviteCount
        /// </summary>
        [DataMember(Name="groupJoinInviteCount", EmitDefaultValue=false)]
        public int? GroupJoinInviteCount { get; set; }

        /// <summary>
        /// This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.
        /// </summary>
        /// <value>This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.</value>
        [DataMember(Name="currentUserMemberMap", EmitDefaultValue=false)]
        public Dictionary<string, GroupsV2GroupMember> CurrentUserMemberMap { get; set; }

        /// <summary>
        /// This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.
        /// </summary>
        /// <value>This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.</value>
        [DataMember(Name="currentUserPotentialMemberMap", EmitDefaultValue=false)]
        public Dictionary<string, GroupsV2GroupPotentialMember> CurrentUserPotentialMemberMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupsV2GroupResponse {\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Founder: ").Append(Founder).Append("\n");
            sb.Append("  AlliedIds: ").Append(AlliedIds).Append("\n");
            sb.Append("  ParentGroup: ").Append(ParentGroup).Append("\n");
            sb.Append("  AllianceStatus: ").Append(AllianceStatus).Append("\n");
            sb.Append("  GroupJoinInviteCount: ").Append(GroupJoinInviteCount).Append("\n");
            sb.Append("  CurrentUserMemberMap: ").Append(CurrentUserMemberMap).Append("\n");
            sb.Append("  CurrentUserPotentialMemberMap: ").Append(CurrentUserPotentialMemberMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupsV2GroupResponse);
        }

        /// <summary>
        /// Returns true if GroupsV2GroupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupsV2GroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupsV2GroupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Founder == input.Founder ||
                    (this.Founder != null &&
                    this.Founder.Equals(input.Founder))
                ) && 
                (
                    this.AlliedIds == input.AlliedIds ||
                    this.AlliedIds != null &&
                    this.AlliedIds.SequenceEqual(input.AlliedIds)
                ) && 
                (
                    this.ParentGroup == input.ParentGroup ||
                    (this.ParentGroup != null &&
                    this.ParentGroup.Equals(input.ParentGroup))
                ) && 
                (
                    this.AllianceStatus == input.AllianceStatus ||
                    (this.AllianceStatus != null &&
                    this.AllianceStatus.Equals(input.AllianceStatus))
                ) && 
                (
                    this.GroupJoinInviteCount == input.GroupJoinInviteCount ||
                    (this.GroupJoinInviteCount != null &&
                    this.GroupJoinInviteCount.Equals(input.GroupJoinInviteCount))
                ) && 
                (
                    this.CurrentUserMemberMap == input.CurrentUserMemberMap ||
                    this.CurrentUserMemberMap != null &&
                    this.CurrentUserMemberMap.SequenceEqual(input.CurrentUserMemberMap)
                ) && 
                (
                    this.CurrentUserPotentialMemberMap == input.CurrentUserPotentialMemberMap ||
                    this.CurrentUserPotentialMemberMap != null &&
                    this.CurrentUserPotentialMemberMap.SequenceEqual(input.CurrentUserPotentialMemberMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.Founder != null)
                    hashCode = hashCode * 59 + this.Founder.GetHashCode();
                if (this.AlliedIds != null)
                    hashCode = hashCode * 59 + this.AlliedIds.GetHashCode();
                if (this.ParentGroup != null)
                    hashCode = hashCode * 59 + this.ParentGroup.GetHashCode();
                if (this.AllianceStatus != null)
                    hashCode = hashCode * 59 + this.AllianceStatus.GetHashCode();
                if (this.GroupJoinInviteCount != null)
                    hashCode = hashCode * 59 + this.GroupJoinInviteCount.GetHashCode();
                if (this.CurrentUserMemberMap != null)
                    hashCode = hashCode * 59 + this.CurrentUserMemberMap.GetHashCode();
                if (this.CurrentUserPotentialMemberMap != null)
                    hashCode = hashCode * 59 + this.CurrentUserPotentialMemberMap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
