/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Some items are \&quot;sacks\&quot; - they can be \&quot;opened\&quot; to produce other items. This is information related to its sack status, mostly UI strings. Engrams are an example of items that are considered to be \&quot;Sacks\&quot;.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyItemSackBlockDefinition :  IEquatable<DestinyDefinitionsDestinyItemSackBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemSackBlockDefinition" /> class.
        /// </summary>
        /// <param name="DetailAction">A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info..</param>
        /// <param name="OpenAction">The localized name of the action being performed when you open the sack..</param>
        /// <param name="SelectItemCount">SelectItemCount.</param>
        /// <param name="VendorSackType">VendorSackType.</param>
        public DestinyDefinitionsDestinyItemSackBlockDefinition(string DetailAction = default(string), string OpenAction = default(string), int? SelectItemCount = default(int?), string VendorSackType = default(string))
        {
            this.DetailAction = DetailAction;
            this.OpenAction = OpenAction;
            this.SelectItemCount = SelectItemCount;
            this.VendorSackType = VendorSackType;
        }
        
        /// <summary>
        /// A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info.
        /// </summary>
        /// <value>A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info.</value>
        [DataMember(Name="detailAction", EmitDefaultValue=false)]
        public string DetailAction { get; set; }

        /// <summary>
        /// The localized name of the action being performed when you open the sack.
        /// </summary>
        /// <value>The localized name of the action being performed when you open the sack.</value>
        [DataMember(Name="openAction", EmitDefaultValue=false)]
        public string OpenAction { get; set; }

        /// <summary>
        /// Gets or Sets SelectItemCount
        /// </summary>
        [DataMember(Name="selectItemCount", EmitDefaultValue=false)]
        public int? SelectItemCount { get; set; }

        /// <summary>
        /// Gets or Sets VendorSackType
        /// </summary>
        [DataMember(Name="vendorSackType", EmitDefaultValue=false)]
        public string VendorSackType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemSackBlockDefinition {\n");
            sb.Append("  DetailAction: ").Append(DetailAction).Append("\n");
            sb.Append("  OpenAction: ").Append(OpenAction).Append("\n");
            sb.Append("  SelectItemCount: ").Append(SelectItemCount).Append("\n");
            sb.Append("  VendorSackType: ").Append(VendorSackType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemSackBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemSackBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemSackBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemSackBlockDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DetailAction == input.DetailAction ||
                    (this.DetailAction != null &&
                    this.DetailAction.Equals(input.DetailAction))
                ) && 
                (
                    this.OpenAction == input.OpenAction ||
                    (this.OpenAction != null &&
                    this.OpenAction.Equals(input.OpenAction))
                ) && 
                (
                    this.SelectItemCount == input.SelectItemCount ||
                    (this.SelectItemCount != null &&
                    this.SelectItemCount.Equals(input.SelectItemCount))
                ) && 
                (
                    this.VendorSackType == input.VendorSackType ||
                    (this.VendorSackType != null &&
                    this.VendorSackType.Equals(input.VendorSackType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DetailAction != null)
                    hashCode = hashCode * 59 + this.DetailAction.GetHashCode();
                if (this.OpenAction != null)
                    hashCode = hashCode * 59 + this.OpenAction.GetHashCode();
                if (this.SelectItemCount != null)
                    hashCode = hashCode * 59 + this.SelectItemCount.GetHashCode();
                if (this.VendorSackType != null)
                    hashCode = hashCode * 59 + this.VendorSackType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
