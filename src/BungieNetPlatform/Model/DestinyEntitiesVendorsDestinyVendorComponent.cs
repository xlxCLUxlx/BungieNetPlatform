/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// This component contains essential/summary information about the vendor.
    /// </summary>
    [DataContract]
    public partial class DestinyEntitiesVendorsDestinyVendorComponent :  IEquatable<DestinyEntitiesVendorsDestinyVendorComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyEntitiesVendorsDestinyVendorComponent" /> class.
        /// </summary>
        /// <param name="VendorHash">The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition..</param>
        /// <param name="AckState">Long ago, we thought it would be a good idea to have special UI that showed whether or not you&#39;ve seen a Vendor&#39;s inventory after cycling.   For now, we don&#39;t have that UI anymore. This property still exists for historical purposes. Don&#39;t worry about it..</param>
        /// <param name="NextRefreshDate">The date when this vendor&#39;s inventory will next rotate/refresh..</param>
        /// <param name="Enabled">If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment..</param>
        /// <param name="CanPurchase">If True, you can purchase from the Vendor.  Theoretically, Vendors can be restricted from selling items. In practice, none do that (yet?)..</param>
        /// <param name="Progression">If the Vendor has a related Reputation, this is the Progression data that represents the character&#39;s Reputation level with this Vendor..</param>
        public DestinyEntitiesVendorsDestinyVendorComponent(uint? VendorHash = default(uint?), UserAckState AckState = default(UserAckState), DateTime? NextRefreshDate = default(DateTime?), bool? Enabled = default(bool?), bool? CanPurchase = default(bool?), DestinyDestinyProgression Progression = default(DestinyDestinyProgression))
        {
            this.VendorHash = VendorHash;
            this.AckState = AckState;
            this.NextRefreshDate = NextRefreshDate;
            this.Enabled = Enabled;
            this.CanPurchase = CanPurchase;
            this.Progression = Progression;
        }
        
        /// <summary>
        /// The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.
        /// </summary>
        /// <value>The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.</value>
        [DataMember(Name="vendorHash", EmitDefaultValue=false)]
        public uint? VendorHash { get; set; }

        /// <summary>
        /// Long ago, we thought it would be a good idea to have special UI that showed whether or not you&#39;ve seen a Vendor&#39;s inventory after cycling.   For now, we don&#39;t have that UI anymore. This property still exists for historical purposes. Don&#39;t worry about it.
        /// </summary>
        /// <value>Long ago, we thought it would be a good idea to have special UI that showed whether or not you&#39;ve seen a Vendor&#39;s inventory after cycling.   For now, we don&#39;t have that UI anymore. This property still exists for historical purposes. Don&#39;t worry about it.</value>
        [DataMember(Name="ackState", EmitDefaultValue=false)]
        public UserAckState AckState { get; set; }

        /// <summary>
        /// The date when this vendor&#39;s inventory will next rotate/refresh.
        /// </summary>
        /// <value>The date when this vendor&#39;s inventory will next rotate/refresh.</value>
        [DataMember(Name="nextRefreshDate", EmitDefaultValue=false)]
        public DateTime? NextRefreshDate { get; set; }

        /// <summary>
        /// If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment.
        /// </summary>
        /// <value>If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// If True, you can purchase from the Vendor.  Theoretically, Vendors can be restricted from selling items. In practice, none do that (yet?).
        /// </summary>
        /// <value>If True, you can purchase from the Vendor.  Theoretically, Vendors can be restricted from selling items. In practice, none do that (yet?).</value>
        [DataMember(Name="canPurchase", EmitDefaultValue=false)]
        public bool? CanPurchase { get; set; }

        /// <summary>
        /// If the Vendor has a related Reputation, this is the Progression data that represents the character&#39;s Reputation level with this Vendor.
        /// </summary>
        /// <value>If the Vendor has a related Reputation, this is the Progression data that represents the character&#39;s Reputation level with this Vendor.</value>
        [DataMember(Name="progression", EmitDefaultValue=false)]
        public DestinyDestinyProgression Progression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyEntitiesVendorsDestinyVendorComponent {\n");
            sb.Append("  VendorHash: ").Append(VendorHash).Append("\n");
            sb.Append("  AckState: ").Append(AckState).Append("\n");
            sb.Append("  NextRefreshDate: ").Append(NextRefreshDate).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  CanPurchase: ").Append(CanPurchase).Append("\n");
            sb.Append("  Progression: ").Append(Progression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyEntitiesVendorsDestinyVendorComponent);
        }

        /// <summary>
        /// Returns true if DestinyEntitiesVendorsDestinyVendorComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyEntitiesVendorsDestinyVendorComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyEntitiesVendorsDestinyVendorComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VendorHash == input.VendorHash ||
                    (this.VendorHash != null &&
                    this.VendorHash.Equals(input.VendorHash))
                ) && 
                (
                    this.AckState == input.AckState ||
                    (this.AckState != null &&
                    this.AckState.Equals(input.AckState))
                ) && 
                (
                    this.NextRefreshDate == input.NextRefreshDate ||
                    (this.NextRefreshDate != null &&
                    this.NextRefreshDate.Equals(input.NextRefreshDate))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.CanPurchase == input.CanPurchase ||
                    (this.CanPurchase != null &&
                    this.CanPurchase.Equals(input.CanPurchase))
                ) && 
                (
                    this.Progression == input.Progression ||
                    (this.Progression != null &&
                    this.Progression.Equals(input.Progression))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VendorHash != null)
                    hashCode = hashCode * 59 + this.VendorHash.GetHashCode();
                if (this.AckState != null)
                    hashCode = hashCode * 59 + this.AckState.GetHashCode();
                if (this.NextRefreshDate != null)
                    hashCode = hashCode * 59 + this.NextRefreshDate.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.CanPurchase != null)
                    hashCode = hashCode * 59 + this.CanPurchase.GetHashCode();
                if (this.Progression != null)
                    hashCode = hashCode * 59 + this.Progression.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
