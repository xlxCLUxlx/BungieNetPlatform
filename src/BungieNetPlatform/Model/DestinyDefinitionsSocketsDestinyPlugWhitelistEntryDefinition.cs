/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Defines a plug \&quot;Category\&quot; that is allowed to be plugged into a socket of this type.  This should be compared against a given plug item&#39;s DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item&#39;s category.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition :  IEquatable<DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition" /> class.
        /// </summary>
        /// <param name="CategoryHash">The hash identifier of the Plug Category to compare against the plug item&#39;s plug.plugCategoryHash.  Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes..</param>
        /// <param name="CategoryIdentifier">The string identifier for the category, which is here mostly for debug purposes..</param>
        public DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition(uint? CategoryHash = default(uint?), string CategoryIdentifier = default(string))
        {
            this.CategoryHash = CategoryHash;
            this.CategoryIdentifier = CategoryIdentifier;
        }
        
        /// <summary>
        /// The hash identifier of the Plug Category to compare against the plug item&#39;s plug.plugCategoryHash.  Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.
        /// </summary>
        /// <value>The hash identifier of the Plug Category to compare against the plug item&#39;s plug.plugCategoryHash.  Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.</value>
        [DataMember(Name="categoryHash", EmitDefaultValue=false)]
        public uint? CategoryHash { get; set; }

        /// <summary>
        /// The string identifier for the category, which is here mostly for debug purposes.
        /// </summary>
        /// <value>The string identifier for the category, which is here mostly for debug purposes.</value>
        [DataMember(Name="categoryIdentifier", EmitDefaultValue=false)]
        public string CategoryIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition {\n");
            sb.Append("  CategoryHash: ").Append(CategoryHash).Append("\n");
            sb.Append("  CategoryIdentifier: ").Append(CategoryIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryHash == input.CategoryHash ||
                    (this.CategoryHash != null &&
                    this.CategoryHash.Equals(input.CategoryHash))
                ) && 
                (
                    this.CategoryIdentifier == input.CategoryIdentifier ||
                    (this.CategoryIdentifier != null &&
                    this.CategoryIdentifier.Equals(input.CategoryIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryHash != null)
                    hashCode = hashCode * 59 + this.CategoryHash.GetHashCode();
                if (this.CategoryIdentifier != null)
                    hashCode = hashCode * 59 + this.CategoryIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
