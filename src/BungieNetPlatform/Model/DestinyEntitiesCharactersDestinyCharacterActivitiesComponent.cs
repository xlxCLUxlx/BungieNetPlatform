/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// This component holds activity data for a character. It will tell you about the character&#39;s current activity status, as well as activities that are available to the user.
    /// </summary>
    [DataContract]
    public partial class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent :  IEquatable<DestinyEntitiesCharactersDestinyCharacterActivitiesComponent>, IValidatableObject
    {
        /// <summary>
        /// And the current activity&#39;s most specific mode type, if it can be found.
        /// </summary>
        /// <value>And the current activity&#39;s most specific mode type, if it can be found.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrentActivityModeTypeEnum
        {
            
            /// <summary>
            /// Enum None for 0
            /// </summary>
            [EnumMember(Value = "0")]
            None = 0,
            
            /// <summary>
            /// Enum Story for 2
            /// </summary>
            [EnumMember(Value = "2")]
            Story = 2,
            
            /// <summary>
            /// Enum Strike for 3
            /// </summary>
            [EnumMember(Value = "3")]
            Strike = 3,
            
            /// <summary>
            /// Enum Raid for 4
            /// </summary>
            [EnumMember(Value = "4")]
            Raid = 4,
            
            /// <summary>
            /// Enum AllPvP for 5
            /// </summary>
            [EnumMember(Value = "5")]
            AllPvP = 5,
            
            /// <summary>
            /// Enum Patrol for 6
            /// </summary>
            [EnumMember(Value = "6")]
            Patrol = 6,
            
            /// <summary>
            /// Enum AllPvE for 7
            /// </summary>
            [EnumMember(Value = "7")]
            AllPvE = 7,
            
            /// <summary>
            /// Enum Reserved9 for 9
            /// </summary>
            [EnumMember(Value = "9")]
            Reserved9 = 9,
            
            /// <summary>
            /// Enum Control for 10
            /// </summary>
            [EnumMember(Value = "10")]
            Control = 10,
            
            /// <summary>
            /// Enum Reserved11 for 11
            /// </summary>
            [EnumMember(Value = "11")]
            Reserved11 = 11,
            
            /// <summary>
            /// Enum Clash for 12
            /// </summary>
            [EnumMember(Value = "12")]
            Clash = 12,
            
            /// <summary>
            /// Enum Reserved13 for 13
            /// </summary>
            [EnumMember(Value = "13")]
            Reserved13 = 13,
            
            /// <summary>
            /// Enum Reserved15 for 15
            /// </summary>
            [EnumMember(Value = "15")]
            Reserved15 = 15,
            
            /// <summary>
            /// Enum Nightfall for 16
            /// </summary>
            [EnumMember(Value = "16")]
            Nightfall = 16,
            
            /// <summary>
            /// Enum HeroicNightfall for 17
            /// </summary>
            [EnumMember(Value = "17")]
            HeroicNightfall = 17,
            
            /// <summary>
            /// Enum AllStrikes for 18
            /// </summary>
            [EnumMember(Value = "18")]
            AllStrikes = 18,
            
            /// <summary>
            /// Enum IronBanner for 19
            /// </summary>
            [EnumMember(Value = "19")]
            IronBanner = 19,
            
            /// <summary>
            /// Enum Reserved20 for 20
            /// </summary>
            [EnumMember(Value = "20")]
            Reserved20 = 20,
            
            /// <summary>
            /// Enum Reserved21 for 21
            /// </summary>
            [EnumMember(Value = "21")]
            Reserved21 = 21,
            
            /// <summary>
            /// Enum Reserved22 for 22
            /// </summary>
            [EnumMember(Value = "22")]
            Reserved22 = 22,
            
            /// <summary>
            /// Enum Reserved24 for 24
            /// </summary>
            [EnumMember(Value = "24")]
            Reserved24 = 24,
            
            /// <summary>
            /// Enum Reserved25 for 25
            /// </summary>
            [EnumMember(Value = "25")]
            Reserved25 = 25,
            
            /// <summary>
            /// Enum Reserved26 for 26
            /// </summary>
            [EnumMember(Value = "26")]
            Reserved26 = 26,
            
            /// <summary>
            /// Enum Reserved27 for 27
            /// </summary>
            [EnumMember(Value = "27")]
            Reserved27 = 27,
            
            /// <summary>
            /// Enum Reserved28 for 28
            /// </summary>
            [EnumMember(Value = "28")]
            Reserved28 = 28,
            
            /// <summary>
            /// Enum Reserved29 for 29
            /// </summary>
            [EnumMember(Value = "29")]
            Reserved29 = 29,
            
            /// <summary>
            /// Enum Reserved30 for 30
            /// </summary>
            [EnumMember(Value = "30")]
            Reserved30 = 30,
            
            /// <summary>
            /// Enum Supremacy for 31
            /// </summary>
            [EnumMember(Value = "31")]
            Supremacy = 31,
            
            /// <summary>
            /// Enum Reserved32 for 32
            /// </summary>
            [EnumMember(Value = "32")]
            Reserved32 = 32,
            
            /// <summary>
            /// Enum Survival for 37
            /// </summary>
            [EnumMember(Value = "37")]
            Survival = 37,
            
            /// <summary>
            /// Enum Countdown for 38
            /// </summary>
            [EnumMember(Value = "38")]
            Countdown = 38,
            
            /// <summary>
            /// Enum TrialsOfTheNine for 39
            /// </summary>
            [EnumMember(Value = "39")]
            TrialsOfTheNine = 39,
            
            /// <summary>
            /// Enum Social for 40
            /// </summary>
            [EnumMember(Value = "40")]
            Social = 40,
            
            /// <summary>
            /// Enum TrialsCountdown for 41
            /// </summary>
            [EnumMember(Value = "41")]
            TrialsCountdown = 41,
            
            /// <summary>
            /// Enum TrialsSurvival for 42
            /// </summary>
            [EnumMember(Value = "42")]
            TrialsSurvival = 42,
            
            /// <summary>
            /// Enum IronBannerControl for 43
            /// </summary>
            [EnumMember(Value = "43")]
            IronBannerControl = 43,
            
            /// <summary>
            /// Enum IronBannerClash for 44
            /// </summary>
            [EnumMember(Value = "44")]
            IronBannerClash = 44,
            
            /// <summary>
            /// Enum IronBannerSupremacy for 45
            /// </summary>
            [EnumMember(Value = "45")]
            IronBannerSupremacy = 45
        }

        /// <summary>
        /// And the current activity&#39;s most specific mode type, if it can be found.
        /// </summary>
        /// <value>And the current activity&#39;s most specific mode type, if it can be found.</value>
        [DataMember(Name="currentActivityModeType", EmitDefaultValue=false)]
        public CurrentActivityModeTypeEnum? CurrentActivityModeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyEntitiesCharactersDestinyCharacterActivitiesComponent" /> class.
        /// </summary>
        /// <param name="DateActivityStarted">The last date that the user started playing an activity..</param>
        /// <param name="AvailableActivities">The list of activities that the user can play..</param>
        /// <param name="CurrentActivityHash">If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \&quot;Activities\&quot; are just maps: it&#39;s the ActivityMode that determines what type of PVP game they&#39;re playing..</param>
        /// <param name="CurrentActivityModeHash">If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now..</param>
        /// <param name="CurrentActivityModeType">And the current activity&#39;s most specific mode type, if it can be found..</param>
        /// <param name="CurrentActivityModeHashes">If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now..</param>
        /// <param name="CurrentActivityModeTypes">All Activity Modes that apply to the current activity being played, in enum form..</param>
        /// <param name="CurrentPlaylistActivityHash">If the user is in a playlist, this is the hash identifier for the playlist that they chose..</param>
        /// <param name="LastCompletedStoryHash">This will have the activity hash of the last completed story/campaign mission, in case you care about that..</param>
        public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent(DateTime? DateActivityStarted = default(DateTime?), List<DestinyDestinyActivity> AvailableActivities = default(List<DestinyDestinyActivity>), uint? CurrentActivityHash = default(uint?), uint? CurrentActivityModeHash = default(uint?), CurrentActivityModeTypeEnum? CurrentActivityModeType = default(CurrentActivityModeTypeEnum?), List<uint?> CurrentActivityModeHashes = default(List<uint?>), List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> CurrentActivityModeTypes = default(List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType>), uint? CurrentPlaylistActivityHash = default(uint?), uint? LastCompletedStoryHash = default(uint?))
        {
            this.DateActivityStarted = DateActivityStarted;
            this.AvailableActivities = AvailableActivities;
            this.CurrentActivityHash = CurrentActivityHash;
            this.CurrentActivityModeHash = CurrentActivityModeHash;
            this.CurrentActivityModeType = CurrentActivityModeType;
            this.CurrentActivityModeHashes = CurrentActivityModeHashes;
            this.CurrentActivityModeTypes = CurrentActivityModeTypes;
            this.CurrentPlaylistActivityHash = CurrentPlaylistActivityHash;
            this.LastCompletedStoryHash = LastCompletedStoryHash;
        }
        
        /// <summary>
        /// The last date that the user started playing an activity.
        /// </summary>
        /// <value>The last date that the user started playing an activity.</value>
        [DataMember(Name="dateActivityStarted", EmitDefaultValue=false)]
        public DateTime? DateActivityStarted { get; set; }

        /// <summary>
        /// The list of activities that the user can play.
        /// </summary>
        /// <value>The list of activities that the user can play.</value>
        [DataMember(Name="availableActivities", EmitDefaultValue=false)]
        public List<DestinyDestinyActivity> AvailableActivities { get; set; }

        /// <summary>
        /// If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \&quot;Activities\&quot; are just maps: it&#39;s the ActivityMode that determines what type of PVP game they&#39;re playing.
        /// </summary>
        /// <value>If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \&quot;Activities\&quot; are just maps: it&#39;s the ActivityMode that determines what type of PVP game they&#39;re playing.</value>
        [DataMember(Name="currentActivityHash", EmitDefaultValue=false)]
        public uint? CurrentActivityHash { get; set; }

        /// <summary>
        /// If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.
        /// </summary>
        /// <value>If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.</value>
        [DataMember(Name="currentActivityModeHash", EmitDefaultValue=false)]
        public uint? CurrentActivityModeHash { get; set; }


        /// <summary>
        /// If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.
        /// </summary>
        /// <value>If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.</value>
        [DataMember(Name="currentActivityModeHashes", EmitDefaultValue=false)]
        public List<uint?> CurrentActivityModeHashes { get; set; }

        /// <summary>
        /// All Activity Modes that apply to the current activity being played, in enum form.
        /// </summary>
        /// <value>All Activity Modes that apply to the current activity being played, in enum form.</value>
        [DataMember(Name="currentActivityModeTypes", EmitDefaultValue=false)]
        public List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> CurrentActivityModeTypes { get; set; }

        /// <summary>
        /// If the user is in a playlist, this is the hash identifier for the playlist that they chose.
        /// </summary>
        /// <value>If the user is in a playlist, this is the hash identifier for the playlist that they chose.</value>
        [DataMember(Name="currentPlaylistActivityHash", EmitDefaultValue=false)]
        public uint? CurrentPlaylistActivityHash { get; set; }

        /// <summary>
        /// This will have the activity hash of the last completed story/campaign mission, in case you care about that.
        /// </summary>
        /// <value>This will have the activity hash of the last completed story/campaign mission, in case you care about that.</value>
        [DataMember(Name="lastCompletedStoryHash", EmitDefaultValue=false)]
        public uint? LastCompletedStoryHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {\n");
            sb.Append("  DateActivityStarted: ").Append(DateActivityStarted).Append("\n");
            sb.Append("  AvailableActivities: ").Append(AvailableActivities).Append("\n");
            sb.Append("  CurrentActivityHash: ").Append(CurrentActivityHash).Append("\n");
            sb.Append("  CurrentActivityModeHash: ").Append(CurrentActivityModeHash).Append("\n");
            sb.Append("  CurrentActivityModeType: ").Append(CurrentActivityModeType).Append("\n");
            sb.Append("  CurrentActivityModeHashes: ").Append(CurrentActivityModeHashes).Append("\n");
            sb.Append("  CurrentActivityModeTypes: ").Append(CurrentActivityModeTypes).Append("\n");
            sb.Append("  CurrentPlaylistActivityHash: ").Append(CurrentPlaylistActivityHash).Append("\n");
            sb.Append("  LastCompletedStoryHash: ").Append(LastCompletedStoryHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyEntitiesCharactersDestinyCharacterActivitiesComponent);
        }

        /// <summary>
        /// Returns true if DestinyEntitiesCharactersDestinyCharacterActivitiesComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyEntitiesCharactersDestinyCharacterActivitiesComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyEntitiesCharactersDestinyCharacterActivitiesComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateActivityStarted == input.DateActivityStarted ||
                    (this.DateActivityStarted != null &&
                    this.DateActivityStarted.Equals(input.DateActivityStarted))
                ) && 
                (
                    this.AvailableActivities == input.AvailableActivities ||
                    this.AvailableActivities != null &&
                    this.AvailableActivities.SequenceEqual(input.AvailableActivities)
                ) && 
                (
                    this.CurrentActivityHash == input.CurrentActivityHash ||
                    (this.CurrentActivityHash != null &&
                    this.CurrentActivityHash.Equals(input.CurrentActivityHash))
                ) && 
                (
                    this.CurrentActivityModeHash == input.CurrentActivityModeHash ||
                    (this.CurrentActivityModeHash != null &&
                    this.CurrentActivityModeHash.Equals(input.CurrentActivityModeHash))
                ) && 
                (
                    this.CurrentActivityModeType == input.CurrentActivityModeType ||
                    (this.CurrentActivityModeType != null &&
                    this.CurrentActivityModeType.Equals(input.CurrentActivityModeType))
                ) && 
                (
                    this.CurrentActivityModeHashes == input.CurrentActivityModeHashes ||
                    this.CurrentActivityModeHashes != null &&
                    this.CurrentActivityModeHashes.SequenceEqual(input.CurrentActivityModeHashes)
                ) && 
                (
                    this.CurrentActivityModeTypes == input.CurrentActivityModeTypes ||
                    this.CurrentActivityModeTypes != null &&
                    this.CurrentActivityModeTypes.SequenceEqual(input.CurrentActivityModeTypes)
                ) && 
                (
                    this.CurrentPlaylistActivityHash == input.CurrentPlaylistActivityHash ||
                    (this.CurrentPlaylistActivityHash != null &&
                    this.CurrentPlaylistActivityHash.Equals(input.CurrentPlaylistActivityHash))
                ) && 
                (
                    this.LastCompletedStoryHash == input.LastCompletedStoryHash ||
                    (this.LastCompletedStoryHash != null &&
                    this.LastCompletedStoryHash.Equals(input.LastCompletedStoryHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateActivityStarted != null)
                    hashCode = hashCode * 59 + this.DateActivityStarted.GetHashCode();
                if (this.AvailableActivities != null)
                    hashCode = hashCode * 59 + this.AvailableActivities.GetHashCode();
                if (this.CurrentActivityHash != null)
                    hashCode = hashCode * 59 + this.CurrentActivityHash.GetHashCode();
                if (this.CurrentActivityModeHash != null)
                    hashCode = hashCode * 59 + this.CurrentActivityModeHash.GetHashCode();
                if (this.CurrentActivityModeType != null)
                    hashCode = hashCode * 59 + this.CurrentActivityModeType.GetHashCode();
                if (this.CurrentActivityModeHashes != null)
                    hashCode = hashCode * 59 + this.CurrentActivityModeHashes.GetHashCode();
                if (this.CurrentActivityModeTypes != null)
                    hashCode = hashCode * 59 + this.CurrentActivityModeTypes.GetHashCode();
                if (this.CurrentPlaylistActivityHash != null)
                    hashCode = hashCode * 59 + this.CurrentPlaylistActivityHash.GetHashCode();
                if (this.LastCompletedStoryHash != null)
                    hashCode = hashCode * 59 + this.LastCompletedStoryHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
