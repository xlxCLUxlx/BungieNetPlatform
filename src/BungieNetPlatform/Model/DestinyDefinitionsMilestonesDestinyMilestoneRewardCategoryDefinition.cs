/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// The definition of a category of rewards, that contains many individual rewards.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition :  IEquatable<DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition" /> class.
        /// </summary>
        /// <param name="CategoryHash">Identifies the reward category. Only guaranteed unique within this specific component!.</param>
        /// <param name="CategoryIdentifier">The string identifier for the category, if you want to use it for some end. Guaranteed unique within the specific component..</param>
        /// <param name="DisplayProperties">Hopefully this is obvious by now..</param>
        /// <param name="RewardEntries">If this milestone can provide rewards, this will define the sets of rewards that can be earned, the conditions under which they can be acquired, internal data that we&#39;ll use at runtime to determine whether you&#39;ve already earned or redeemed this set of rewards, and the category that this reward should be placed under..</param>
        /// <param name="Order">If you want to use BNet&#39;s recommended order for rendering categories programmatically, use this value and compare it to other categories to determine the order in which they should be rendered. I don&#39;t feel great about putting this here, I won&#39;t lie..</param>
        public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition(uint? CategoryHash = default(uint?), string CategoryIdentifier = default(string), DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition> RewardEntries = default(Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition>), int? Order = default(int?))
        {
            this.CategoryHash = CategoryHash;
            this.CategoryIdentifier = CategoryIdentifier;
            this.DisplayProperties = DisplayProperties;
            this.RewardEntries = RewardEntries;
            this.Order = Order;
        }
        
        /// <summary>
        /// Identifies the reward category. Only guaranteed unique within this specific component!
        /// </summary>
        /// <value>Identifies the reward category. Only guaranteed unique within this specific component!</value>
        [DataMember(Name="categoryHash", EmitDefaultValue=false)]
        public uint? CategoryHash { get; set; }

        /// <summary>
        /// The string identifier for the category, if you want to use it for some end. Guaranteed unique within the specific component.
        /// </summary>
        /// <value>The string identifier for the category, if you want to use it for some end. Guaranteed unique within the specific component.</value>
        [DataMember(Name="categoryIdentifier", EmitDefaultValue=false)]
        public string CategoryIdentifier { get; set; }

        /// <summary>
        /// Hopefully this is obvious by now.
        /// </summary>
        /// <value>Hopefully this is obvious by now.</value>
        [DataMember(Name="displayProperties", EmitDefaultValue=false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// If this milestone can provide rewards, this will define the sets of rewards that can be earned, the conditions under which they can be acquired, internal data that we&#39;ll use at runtime to determine whether you&#39;ve already earned or redeemed this set of rewards, and the category that this reward should be placed under.
        /// </summary>
        /// <value>If this milestone can provide rewards, this will define the sets of rewards that can be earned, the conditions under which they can be acquired, internal data that we&#39;ll use at runtime to determine whether you&#39;ve already earned or redeemed this set of rewards, and the category that this reward should be placed under.</value>
        [DataMember(Name="rewardEntries", EmitDefaultValue=false)]
        public Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition> RewardEntries { get; set; }

        /// <summary>
        /// If you want to use BNet&#39;s recommended order for rendering categories programmatically, use this value and compare it to other categories to determine the order in which they should be rendered. I don&#39;t feel great about putting this here, I won&#39;t lie.
        /// </summary>
        /// <value>If you want to use BNet&#39;s recommended order for rendering categories programmatically, use this value and compare it to other categories to determine the order in which they should be rendered. I don&#39;t feel great about putting this here, I won&#39;t lie.</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition {\n");
            sb.Append("  CategoryHash: ").Append(CategoryHash).Append("\n");
            sb.Append("  CategoryIdentifier: ").Append(CategoryIdentifier).Append("\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  RewardEntries: ").Append(RewardEntries).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryHash == input.CategoryHash ||
                    (this.CategoryHash != null &&
                    this.CategoryHash.Equals(input.CategoryHash))
                ) && 
                (
                    this.CategoryIdentifier == input.CategoryIdentifier ||
                    (this.CategoryIdentifier != null &&
                    this.CategoryIdentifier.Equals(input.CategoryIdentifier))
                ) && 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.RewardEntries == input.RewardEntries ||
                    this.RewardEntries != null &&
                    this.RewardEntries.SequenceEqual(input.RewardEntries)
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryHash != null)
                    hashCode = hashCode * 59 + this.CategoryHash.GetHashCode();
                if (this.CategoryIdentifier != null)
                    hashCode = hashCode * 59 + this.CategoryIdentifier.GetHashCode();
                if (this.DisplayProperties != null)
                    hashCode = hashCode * 59 + this.DisplayProperties.GetHashCode();
                if (this.RewardEntries != null)
                    hashCode = hashCode * 59 + this.RewardEntries.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
