/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// These properties are an attempt to categorize talent node steps by certain common properties. See the related enumerations for the type of properties being categorized.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyTalentNodeStepGroups :  IEquatable<DestinyDefinitionsDestinyTalentNodeStepGroups>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyTalentNodeStepGroups" /> class.
        /// </summary>
        /// <param name="WeaponPerformance">WeaponPerformance.</param>
        /// <param name="ImpactEffects">ImpactEffects.</param>
        /// <param name="GuardianAttributes">GuardianAttributes.</param>
        /// <param name="LightAbilities">LightAbilities.</param>
        /// <param name="DamageTypes">DamageTypes.</param>
        public DestinyDefinitionsDestinyTalentNodeStepGroups(DestinyDefinitionsDestinyTalentNodeStepWeaponPerformances WeaponPerformance = default(DestinyDefinitionsDestinyTalentNodeStepWeaponPerformances), DestinyDefinitionsDestinyTalentNodeStepImpactEffects ImpactEffects = default(DestinyDefinitionsDestinyTalentNodeStepImpactEffects), DestinyDefinitionsDestinyTalentNodeStepGuardianAttributes GuardianAttributes = default(DestinyDefinitionsDestinyTalentNodeStepGuardianAttributes), DestinyDefinitionsDestinyTalentNodeStepLightAbilities LightAbilities = default(DestinyDefinitionsDestinyTalentNodeStepLightAbilities), DestinyDefinitionsDestinyTalentNodeStepDamageTypes DamageTypes = default(DestinyDefinitionsDestinyTalentNodeStepDamageTypes))
        {
            this.WeaponPerformance = WeaponPerformance;
            this.ImpactEffects = ImpactEffects;
            this.GuardianAttributes = GuardianAttributes;
            this.LightAbilities = LightAbilities;
            this.DamageTypes = DamageTypes;
        }
        
        /// <summary>
        /// Gets or Sets WeaponPerformance
        /// </summary>
        [DataMember(Name="weaponPerformance", EmitDefaultValue=false)]
        public DestinyDefinitionsDestinyTalentNodeStepWeaponPerformances WeaponPerformance { get; set; }

        /// <summary>
        /// Gets or Sets ImpactEffects
        /// </summary>
        [DataMember(Name="impactEffects", EmitDefaultValue=false)]
        public DestinyDefinitionsDestinyTalentNodeStepImpactEffects ImpactEffects { get; set; }

        /// <summary>
        /// Gets or Sets GuardianAttributes
        /// </summary>
        [DataMember(Name="guardianAttributes", EmitDefaultValue=false)]
        public DestinyDefinitionsDestinyTalentNodeStepGuardianAttributes GuardianAttributes { get; set; }

        /// <summary>
        /// Gets or Sets LightAbilities
        /// </summary>
        [DataMember(Name="lightAbilities", EmitDefaultValue=false)]
        public DestinyDefinitionsDestinyTalentNodeStepLightAbilities LightAbilities { get; set; }

        /// <summary>
        /// Gets or Sets DamageTypes
        /// </summary>
        [DataMember(Name="damageTypes", EmitDefaultValue=false)]
        public DestinyDefinitionsDestinyTalentNodeStepDamageTypes DamageTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyTalentNodeStepGroups {\n");
            sb.Append("  WeaponPerformance: ").Append(WeaponPerformance).Append("\n");
            sb.Append("  ImpactEffects: ").Append(ImpactEffects).Append("\n");
            sb.Append("  GuardianAttributes: ").Append(GuardianAttributes).Append("\n");
            sb.Append("  LightAbilities: ").Append(LightAbilities).Append("\n");
            sb.Append("  DamageTypes: ").Append(DamageTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyTalentNodeStepGroups);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyTalentNodeStepGroups instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyTalentNodeStepGroups to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyTalentNodeStepGroups input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WeaponPerformance == input.WeaponPerformance ||
                    (this.WeaponPerformance != null &&
                    this.WeaponPerformance.Equals(input.WeaponPerformance))
                ) && 
                (
                    this.ImpactEffects == input.ImpactEffects ||
                    (this.ImpactEffects != null &&
                    this.ImpactEffects.Equals(input.ImpactEffects))
                ) && 
                (
                    this.GuardianAttributes == input.GuardianAttributes ||
                    (this.GuardianAttributes != null &&
                    this.GuardianAttributes.Equals(input.GuardianAttributes))
                ) && 
                (
                    this.LightAbilities == input.LightAbilities ||
                    (this.LightAbilities != null &&
                    this.LightAbilities.Equals(input.LightAbilities))
                ) && 
                (
                    this.DamageTypes == input.DamageTypes ||
                    (this.DamageTypes != null &&
                    this.DamageTypes.Equals(input.DamageTypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WeaponPerformance != null)
                    hashCode = hashCode * 59 + this.WeaponPerformance.GetHashCode();
                if (this.ImpactEffects != null)
                    hashCode = hashCode * 59 + this.ImpactEffects.GetHashCode();
                if (this.GuardianAttributes != null)
                    hashCode = hashCode * 59 + this.GuardianAttributes.GetHashCode();
                if (this.LightAbilities != null)
                    hashCode = hashCode * 59 + this.LightAbilities.GetHashCode();
                if (this.DamageTypes != null)
                    hashCode = hashCode * 59 + this.DamageTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
