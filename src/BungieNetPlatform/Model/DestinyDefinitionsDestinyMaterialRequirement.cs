/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I&#39;m not sure yet whether I regret that.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyMaterialRequirement :  IEquatable<DestinyDefinitionsDestinyMaterialRequirement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyMaterialRequirement" /> class.
        /// </summary>
        /// <param name="ItemHash">The hash identifier of the material required. Use it to look up the material&#39;s DestinyInventoryItemDefinition..</param>
        /// <param name="DeleteOnAction">If True, the material will be removed from the character&#39;s inventory when the action is performed..</param>
        /// <param name="Count">The amount of the material required..</param>
        /// <param name="OmitFromRequirements">If True, this requirement is \&quot;silent\&quot;: don&#39;t bother showing it in a material requirements display. I mean, I&#39;m not your mom: I&#39;m not going to tell you you *can&#39;t* show it. But we won&#39;t show it in our UI..</param>
        public DestinyDefinitionsDestinyMaterialRequirement(uint? ItemHash = default(uint?), bool? DeleteOnAction = default(bool?), int? Count = default(int?), bool? OmitFromRequirements = default(bool?))
        {
            this.ItemHash = ItemHash;
            this.DeleteOnAction = DeleteOnAction;
            this.Count = Count;
            this.OmitFromRequirements = OmitFromRequirements;
        }
        
        /// <summary>
        /// The hash identifier of the material required. Use it to look up the material&#39;s DestinyInventoryItemDefinition.
        /// </summary>
        /// <value>The hash identifier of the material required. Use it to look up the material&#39;s DestinyInventoryItemDefinition.</value>
        [DataMember(Name="itemHash", EmitDefaultValue=false)]
        public uint? ItemHash { get; set; }

        /// <summary>
        /// If True, the material will be removed from the character&#39;s inventory when the action is performed.
        /// </summary>
        /// <value>If True, the material will be removed from the character&#39;s inventory when the action is performed.</value>
        [DataMember(Name="deleteOnAction", EmitDefaultValue=false)]
        public bool? DeleteOnAction { get; set; }

        /// <summary>
        /// The amount of the material required.
        /// </summary>
        /// <value>The amount of the material required.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// If True, this requirement is \&quot;silent\&quot;: don&#39;t bother showing it in a material requirements display. I mean, I&#39;m not your mom: I&#39;m not going to tell you you *can&#39;t* show it. But we won&#39;t show it in our UI.
        /// </summary>
        /// <value>If True, this requirement is \&quot;silent\&quot;: don&#39;t bother showing it in a material requirements display. I mean, I&#39;m not your mom: I&#39;m not going to tell you you *can&#39;t* show it. But we won&#39;t show it in our UI.</value>
        [DataMember(Name="omitFromRequirements", EmitDefaultValue=false)]
        public bool? OmitFromRequirements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyMaterialRequirement {\n");
            sb.Append("  ItemHash: ").Append(ItemHash).Append("\n");
            sb.Append("  DeleteOnAction: ").Append(DeleteOnAction).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  OmitFromRequirements: ").Append(OmitFromRequirements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyMaterialRequirement);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyMaterialRequirement instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyMaterialRequirement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyMaterialRequirement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemHash == input.ItemHash ||
                    (this.ItemHash != null &&
                    this.ItemHash.Equals(input.ItemHash))
                ) && 
                (
                    this.DeleteOnAction == input.DeleteOnAction ||
                    (this.DeleteOnAction != null &&
                    this.DeleteOnAction.Equals(input.DeleteOnAction))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.OmitFromRequirements == input.OmitFromRequirements ||
                    (this.OmitFromRequirements != null &&
                    this.OmitFromRequirements.Equals(input.OmitFromRequirements))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemHash != null)
                    hashCode = hashCode * 59 + this.ItemHash.GetHashCode();
                if (this.DeleteOnAction != null)
                    hashCode = hashCode * 59 + this.DeleteOnAction.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.OmitFromRequirements != null)
                    hashCode = hashCode * 59 + this.OmitFromRequirements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
