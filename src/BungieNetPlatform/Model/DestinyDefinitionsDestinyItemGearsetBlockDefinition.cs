/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// If an item has a related gearset, this is the list of items in that set, and an unlock expression that evaluates to a number representing the progress toward gearset completion (a very rare use for unlock expressions!)
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyItemGearsetBlockDefinition :  IEquatable<DestinyDefinitionsDestinyItemGearsetBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemGearsetBlockDefinition" /> class.
        /// </summary>
        /// <param name="TrackingValueMax">The maximum possible number of items that can be collected..</param>
        /// <param name="ItemList">The list of hashes for items in the gearset. Use them to look up DestinyInventoryItemDefinition entries for the items in the set..</param>
        public DestinyDefinitionsDestinyItemGearsetBlockDefinition(int? TrackingValueMax = default(int?), List<uint?> ItemList = default(List<uint?>))
        {
            this.TrackingValueMax = TrackingValueMax;
            this.ItemList = ItemList;
        }
        
        /// <summary>
        /// The maximum possible number of items that can be collected.
        /// </summary>
        /// <value>The maximum possible number of items that can be collected.</value>
        [DataMember(Name="trackingValueMax", EmitDefaultValue=false)]
        public int? TrackingValueMax { get; set; }

        /// <summary>
        /// The list of hashes for items in the gearset. Use them to look up DestinyInventoryItemDefinition entries for the items in the set.
        /// </summary>
        /// <value>The list of hashes for items in the gearset. Use them to look up DestinyInventoryItemDefinition entries for the items in the set.</value>
        [DataMember(Name="itemList", EmitDefaultValue=false)]
        public List<uint?> ItemList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemGearsetBlockDefinition {\n");
            sb.Append("  TrackingValueMax: ").Append(TrackingValueMax).Append("\n");
            sb.Append("  ItemList: ").Append(ItemList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemGearsetBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemGearsetBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemGearsetBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemGearsetBlockDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrackingValueMax == input.TrackingValueMax ||
                    (this.TrackingValueMax != null &&
                    this.TrackingValueMax.Equals(input.TrackingValueMax))
                ) && 
                (
                    this.ItemList == input.ItemList ||
                    this.ItemList != null &&
                    this.ItemList.SequenceEqual(input.ItemList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrackingValueMax != null)
                    hashCode = hashCode * 59 + this.TrackingValueMax.GetHashCode();
                if (this.ItemList != null)
                    hashCode = hashCode * 59 + this.ItemList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
