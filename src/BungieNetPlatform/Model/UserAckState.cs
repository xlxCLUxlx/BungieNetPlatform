/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// UserAckState
    /// </summary>
    [DataContract]
    public partial class UserAckState :  IEquatable<UserAckState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAckState" /> class.
        /// </summary>
        /// <param name="NeedsAck">Indicates the related item has not been acknowledged..</param>
        /// <param name="AckId">Identifier to use when acknowledging the related item. [category]:[entityId]:[targetId].</param>
        public UserAckState(bool? NeedsAck = default(bool?), string AckId = default(string))
        {
            this.NeedsAck = NeedsAck;
            this.AckId = AckId;
        }
        
        /// <summary>
        /// Indicates the related item has not been acknowledged.
        /// </summary>
        /// <value>Indicates the related item has not been acknowledged.</value>
        [DataMember(Name="needsAck", EmitDefaultValue=false)]
        public bool? NeedsAck { get; set; }

        /// <summary>
        /// Identifier to use when acknowledging the related item. [category]:[entityId]:[targetId]
        /// </summary>
        /// <value>Identifier to use when acknowledging the related item. [category]:[entityId]:[targetId]</value>
        [DataMember(Name="ackId", EmitDefaultValue=false)]
        public string AckId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAckState {\n");
            sb.Append("  NeedsAck: ").Append(NeedsAck).Append("\n");
            sb.Append("  AckId: ").Append(AckId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAckState);
        }

        /// <summary>
        /// Returns true if UserAckState instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAckState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAckState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NeedsAck == input.NeedsAck ||
                    (this.NeedsAck != null &&
                    this.NeedsAck.Equals(input.NeedsAck))
                ) && 
                (
                    this.AckId == input.AckId ||
                    (this.AckId != null &&
                    this.AckId.Equals(input.AckId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NeedsAck != null)
                    hashCode = hashCode * 59 + this.NeedsAck.GetHashCode();
                if (this.AckId != null)
                    hashCode = hashCode * 59 + this.AckId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
