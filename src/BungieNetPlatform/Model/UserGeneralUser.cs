/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// UserGeneralUser
    /// </summary>
    [DataContract]
    public partial class UserGeneralUser :  IEquatable<UserGeneralUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGeneralUser" /> class.
        /// </summary>
        /// <param name="MembershipId">MembershipId.</param>
        /// <param name="UniqueName">UniqueName.</param>
        /// <param name="NormalizedName">NormalizedName.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="ProfilePicture">ProfilePicture.</param>
        /// <param name="ProfileTheme">ProfileTheme.</param>
        /// <param name="UserTitle">UserTitle.</param>
        /// <param name="SuccessMessageFlags">SuccessMessageFlags.</param>
        /// <param name="IsDeleted">IsDeleted.</param>
        /// <param name="About">About.</param>
        /// <param name="FirstAccess">FirstAccess.</param>
        /// <param name="LastUpdate">LastUpdate.</param>
        /// <param name="LegacyPortalUID">LegacyPortalUID.</param>
        /// <param name="Context">Context.</param>
        /// <param name="PsnDisplayName">PsnDisplayName.</param>
        /// <param name="XboxDisplayName">XboxDisplayName.</param>
        /// <param name="FbDisplayName">FbDisplayName.</param>
        /// <param name="ShowActivity">ShowActivity.</param>
        /// <param name="Locale">Locale.</param>
        /// <param name="LocaleInheritDefault">LocaleInheritDefault.</param>
        /// <param name="LastBanReportId">LastBanReportId.</param>
        /// <param name="ShowGroupMessaging">ShowGroupMessaging.</param>
        /// <param name="ProfilePicturePath">ProfilePicturePath.</param>
        /// <param name="ProfilePictureWidePath">ProfilePictureWidePath.</param>
        /// <param name="ProfileThemeName">ProfileThemeName.</param>
        /// <param name="UserTitleDisplay">UserTitleDisplay.</param>
        /// <param name="StatusText">StatusText.</param>
        /// <param name="StatusDate">StatusDate.</param>
        /// <param name="ProfileBanExpire">ProfileBanExpire.</param>
        /// <param name="BlizzardDisplayName">BlizzardDisplayName.</param>
        public UserGeneralUser(long? MembershipId = default(long?), string UniqueName = default(string), string NormalizedName = default(string), string DisplayName = default(string), int? ProfilePicture = default(int?), int? ProfileTheme = default(int?), int? UserTitle = default(int?), long? SuccessMessageFlags = default(long?), bool? IsDeleted = default(bool?), string About = default(string), DateTime? FirstAccess = default(DateTime?), DateTime? LastUpdate = default(DateTime?), long? LegacyPortalUID = default(long?), UserUserToUserContext Context = default(UserUserToUserContext), string PsnDisplayName = default(string), string XboxDisplayName = default(string), string FbDisplayName = default(string), bool? ShowActivity = default(bool?), string Locale = default(string), bool? LocaleInheritDefault = default(bool?), long? LastBanReportId = default(long?), bool? ShowGroupMessaging = default(bool?), string ProfilePicturePath = default(string), string ProfilePictureWidePath = default(string), string ProfileThemeName = default(string), string UserTitleDisplay = default(string), string StatusText = default(string), DateTime? StatusDate = default(DateTime?), DateTime? ProfileBanExpire = default(DateTime?), string BlizzardDisplayName = default(string))
        {
            this.MembershipId = MembershipId;
            this.UniqueName = UniqueName;
            this.NormalizedName = NormalizedName;
            this.DisplayName = DisplayName;
            this.ProfilePicture = ProfilePicture;
            this.ProfileTheme = ProfileTheme;
            this.UserTitle = UserTitle;
            this.SuccessMessageFlags = SuccessMessageFlags;
            this.IsDeleted = IsDeleted;
            this.About = About;
            this.FirstAccess = FirstAccess;
            this.LastUpdate = LastUpdate;
            this.LegacyPortalUID = LegacyPortalUID;
            this.Context = Context;
            this.PsnDisplayName = PsnDisplayName;
            this.XboxDisplayName = XboxDisplayName;
            this.FbDisplayName = FbDisplayName;
            this.ShowActivity = ShowActivity;
            this.Locale = Locale;
            this.LocaleInheritDefault = LocaleInheritDefault;
            this.LastBanReportId = LastBanReportId;
            this.ShowGroupMessaging = ShowGroupMessaging;
            this.ProfilePicturePath = ProfilePicturePath;
            this.ProfilePictureWidePath = ProfilePictureWidePath;
            this.ProfileThemeName = ProfileThemeName;
            this.UserTitleDisplay = UserTitleDisplay;
            this.StatusText = StatusText;
            this.StatusDate = StatusDate;
            this.ProfileBanExpire = ProfileBanExpire;
            this.BlizzardDisplayName = BlizzardDisplayName;
        }
        
        /// <summary>
        /// Gets or Sets MembershipId
        /// </summary>
        [DataMember(Name="membershipId", EmitDefaultValue=false)]
        public long? MembershipId { get; set; }

        /// <summary>
        /// Gets or Sets UniqueName
        /// </summary>
        [DataMember(Name="uniqueName", EmitDefaultValue=false)]
        public string UniqueName { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedName
        /// </summary>
        [DataMember(Name="normalizedName", EmitDefaultValue=false)]
        public string NormalizedName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicture
        /// </summary>
        [DataMember(Name="profilePicture", EmitDefaultValue=false)]
        public int? ProfilePicture { get; set; }

        /// <summary>
        /// Gets or Sets ProfileTheme
        /// </summary>
        [DataMember(Name="profileTheme", EmitDefaultValue=false)]
        public int? ProfileTheme { get; set; }

        /// <summary>
        /// Gets or Sets UserTitle
        /// </summary>
        [DataMember(Name="userTitle", EmitDefaultValue=false)]
        public int? UserTitle { get; set; }

        /// <summary>
        /// Gets or Sets SuccessMessageFlags
        /// </summary>
        [DataMember(Name="successMessageFlags", EmitDefaultValue=false)]
        public long? SuccessMessageFlags { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets About
        /// </summary>
        [DataMember(Name="about", EmitDefaultValue=false)]
        public string About { get; set; }

        /// <summary>
        /// Gets or Sets FirstAccess
        /// </summary>
        [DataMember(Name="firstAccess", EmitDefaultValue=false)]
        public DateTime? FirstAccess { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name="lastUpdate", EmitDefaultValue=false)]
        public DateTime? LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets LegacyPortalUID
        /// </summary>
        [DataMember(Name="legacyPortalUID", EmitDefaultValue=false)]
        public long? LegacyPortalUID { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public UserUserToUserContext Context { get; set; }

        /// <summary>
        /// Gets or Sets PsnDisplayName
        /// </summary>
        [DataMember(Name="psnDisplayName", EmitDefaultValue=false)]
        public string PsnDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets XboxDisplayName
        /// </summary>
        [DataMember(Name="xboxDisplayName", EmitDefaultValue=false)]
        public string XboxDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FbDisplayName
        /// </summary>
        [DataMember(Name="fbDisplayName", EmitDefaultValue=false)]
        public string FbDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ShowActivity
        /// </summary>
        [DataMember(Name="showActivity", EmitDefaultValue=false)]
        public bool? ShowActivity { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets LocaleInheritDefault
        /// </summary>
        [DataMember(Name="localeInheritDefault", EmitDefaultValue=false)]
        public bool? LocaleInheritDefault { get; set; }

        /// <summary>
        /// Gets or Sets LastBanReportId
        /// </summary>
        [DataMember(Name="lastBanReportId", EmitDefaultValue=false)]
        public long? LastBanReportId { get; set; }

        /// <summary>
        /// Gets or Sets ShowGroupMessaging
        /// </summary>
        [DataMember(Name="showGroupMessaging", EmitDefaultValue=false)]
        public bool? ShowGroupMessaging { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicturePath
        /// </summary>
        [DataMember(Name="profilePicturePath", EmitDefaultValue=false)]
        public string ProfilePicturePath { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePictureWidePath
        /// </summary>
        [DataMember(Name="profilePictureWidePath", EmitDefaultValue=false)]
        public string ProfilePictureWidePath { get; set; }

        /// <summary>
        /// Gets or Sets ProfileThemeName
        /// </summary>
        [DataMember(Name="profileThemeName", EmitDefaultValue=false)]
        public string ProfileThemeName { get; set; }

        /// <summary>
        /// Gets or Sets UserTitleDisplay
        /// </summary>
        [DataMember(Name="userTitleDisplay", EmitDefaultValue=false)]
        public string UserTitleDisplay { get; set; }

        /// <summary>
        /// Gets or Sets StatusText
        /// </summary>
        [DataMember(Name="statusText", EmitDefaultValue=false)]
        public string StatusText { get; set; }

        /// <summary>
        /// Gets or Sets StatusDate
        /// </summary>
        [DataMember(Name="statusDate", EmitDefaultValue=false)]
        public DateTime? StatusDate { get; set; }

        /// <summary>
        /// Gets or Sets ProfileBanExpire
        /// </summary>
        [DataMember(Name="profileBanExpire", EmitDefaultValue=false)]
        public DateTime? ProfileBanExpire { get; set; }

        /// <summary>
        /// Gets or Sets BlizzardDisplayName
        /// </summary>
        [DataMember(Name="blizzardDisplayName", EmitDefaultValue=false)]
        public string BlizzardDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserGeneralUser {\n");
            sb.Append("  MembershipId: ").Append(MembershipId).Append("\n");
            sb.Append("  UniqueName: ").Append(UniqueName).Append("\n");
            sb.Append("  NormalizedName: ").Append(NormalizedName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ProfilePicture: ").Append(ProfilePicture).Append("\n");
            sb.Append("  ProfileTheme: ").Append(ProfileTheme).Append("\n");
            sb.Append("  UserTitle: ").Append(UserTitle).Append("\n");
            sb.Append("  SuccessMessageFlags: ").Append(SuccessMessageFlags).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  About: ").Append(About).Append("\n");
            sb.Append("  FirstAccess: ").Append(FirstAccess).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  LegacyPortalUID: ").Append(LegacyPortalUID).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  PsnDisplayName: ").Append(PsnDisplayName).Append("\n");
            sb.Append("  XboxDisplayName: ").Append(XboxDisplayName).Append("\n");
            sb.Append("  FbDisplayName: ").Append(FbDisplayName).Append("\n");
            sb.Append("  ShowActivity: ").Append(ShowActivity).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  LocaleInheritDefault: ").Append(LocaleInheritDefault).Append("\n");
            sb.Append("  LastBanReportId: ").Append(LastBanReportId).Append("\n");
            sb.Append("  ShowGroupMessaging: ").Append(ShowGroupMessaging).Append("\n");
            sb.Append("  ProfilePicturePath: ").Append(ProfilePicturePath).Append("\n");
            sb.Append("  ProfilePictureWidePath: ").Append(ProfilePictureWidePath).Append("\n");
            sb.Append("  ProfileThemeName: ").Append(ProfileThemeName).Append("\n");
            sb.Append("  UserTitleDisplay: ").Append(UserTitleDisplay).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  ProfileBanExpire: ").Append(ProfileBanExpire).Append("\n");
            sb.Append("  BlizzardDisplayName: ").Append(BlizzardDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserGeneralUser);
        }

        /// <summary>
        /// Returns true if UserGeneralUser instances are equal
        /// </summary>
        /// <param name="input">Instance of UserGeneralUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserGeneralUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MembershipId == input.MembershipId ||
                    (this.MembershipId != null &&
                    this.MembershipId.Equals(input.MembershipId))
                ) && 
                (
                    this.UniqueName == input.UniqueName ||
                    (this.UniqueName != null &&
                    this.UniqueName.Equals(input.UniqueName))
                ) && 
                (
                    this.NormalizedName == input.NormalizedName ||
                    (this.NormalizedName != null &&
                    this.NormalizedName.Equals(input.NormalizedName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ProfilePicture == input.ProfilePicture ||
                    (this.ProfilePicture != null &&
                    this.ProfilePicture.Equals(input.ProfilePicture))
                ) && 
                (
                    this.ProfileTheme == input.ProfileTheme ||
                    (this.ProfileTheme != null &&
                    this.ProfileTheme.Equals(input.ProfileTheme))
                ) && 
                (
                    this.UserTitle == input.UserTitle ||
                    (this.UserTitle != null &&
                    this.UserTitle.Equals(input.UserTitle))
                ) && 
                (
                    this.SuccessMessageFlags == input.SuccessMessageFlags ||
                    (this.SuccessMessageFlags != null &&
                    this.SuccessMessageFlags.Equals(input.SuccessMessageFlags))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.About == input.About ||
                    (this.About != null &&
                    this.About.Equals(input.About))
                ) && 
                (
                    this.FirstAccess == input.FirstAccess ||
                    (this.FirstAccess != null &&
                    this.FirstAccess.Equals(input.FirstAccess))
                ) && 
                (
                    this.LastUpdate == input.LastUpdate ||
                    (this.LastUpdate != null &&
                    this.LastUpdate.Equals(input.LastUpdate))
                ) && 
                (
                    this.LegacyPortalUID == input.LegacyPortalUID ||
                    (this.LegacyPortalUID != null &&
                    this.LegacyPortalUID.Equals(input.LegacyPortalUID))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.PsnDisplayName == input.PsnDisplayName ||
                    (this.PsnDisplayName != null &&
                    this.PsnDisplayName.Equals(input.PsnDisplayName))
                ) && 
                (
                    this.XboxDisplayName == input.XboxDisplayName ||
                    (this.XboxDisplayName != null &&
                    this.XboxDisplayName.Equals(input.XboxDisplayName))
                ) && 
                (
                    this.FbDisplayName == input.FbDisplayName ||
                    (this.FbDisplayName != null &&
                    this.FbDisplayName.Equals(input.FbDisplayName))
                ) && 
                (
                    this.ShowActivity == input.ShowActivity ||
                    (this.ShowActivity != null &&
                    this.ShowActivity.Equals(input.ShowActivity))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.LocaleInheritDefault == input.LocaleInheritDefault ||
                    (this.LocaleInheritDefault != null &&
                    this.LocaleInheritDefault.Equals(input.LocaleInheritDefault))
                ) && 
                (
                    this.LastBanReportId == input.LastBanReportId ||
                    (this.LastBanReportId != null &&
                    this.LastBanReportId.Equals(input.LastBanReportId))
                ) && 
                (
                    this.ShowGroupMessaging == input.ShowGroupMessaging ||
                    (this.ShowGroupMessaging != null &&
                    this.ShowGroupMessaging.Equals(input.ShowGroupMessaging))
                ) && 
                (
                    this.ProfilePicturePath == input.ProfilePicturePath ||
                    (this.ProfilePicturePath != null &&
                    this.ProfilePicturePath.Equals(input.ProfilePicturePath))
                ) && 
                (
                    this.ProfilePictureWidePath == input.ProfilePictureWidePath ||
                    (this.ProfilePictureWidePath != null &&
                    this.ProfilePictureWidePath.Equals(input.ProfilePictureWidePath))
                ) && 
                (
                    this.ProfileThemeName == input.ProfileThemeName ||
                    (this.ProfileThemeName != null &&
                    this.ProfileThemeName.Equals(input.ProfileThemeName))
                ) && 
                (
                    this.UserTitleDisplay == input.UserTitleDisplay ||
                    (this.UserTitleDisplay != null &&
                    this.UserTitleDisplay.Equals(input.UserTitleDisplay))
                ) && 
                (
                    this.StatusText == input.StatusText ||
                    (this.StatusText != null &&
                    this.StatusText.Equals(input.StatusText))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.ProfileBanExpire == input.ProfileBanExpire ||
                    (this.ProfileBanExpire != null &&
                    this.ProfileBanExpire.Equals(input.ProfileBanExpire))
                ) && 
                (
                    this.BlizzardDisplayName == input.BlizzardDisplayName ||
                    (this.BlizzardDisplayName != null &&
                    this.BlizzardDisplayName.Equals(input.BlizzardDisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MembershipId != null)
                    hashCode = hashCode * 59 + this.MembershipId.GetHashCode();
                if (this.UniqueName != null)
                    hashCode = hashCode * 59 + this.UniqueName.GetHashCode();
                if (this.NormalizedName != null)
                    hashCode = hashCode * 59 + this.NormalizedName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ProfilePicture != null)
                    hashCode = hashCode * 59 + this.ProfilePicture.GetHashCode();
                if (this.ProfileTheme != null)
                    hashCode = hashCode * 59 + this.ProfileTheme.GetHashCode();
                if (this.UserTitle != null)
                    hashCode = hashCode * 59 + this.UserTitle.GetHashCode();
                if (this.SuccessMessageFlags != null)
                    hashCode = hashCode * 59 + this.SuccessMessageFlags.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.About != null)
                    hashCode = hashCode * 59 + this.About.GetHashCode();
                if (this.FirstAccess != null)
                    hashCode = hashCode * 59 + this.FirstAccess.GetHashCode();
                if (this.LastUpdate != null)
                    hashCode = hashCode * 59 + this.LastUpdate.GetHashCode();
                if (this.LegacyPortalUID != null)
                    hashCode = hashCode * 59 + this.LegacyPortalUID.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.PsnDisplayName != null)
                    hashCode = hashCode * 59 + this.PsnDisplayName.GetHashCode();
                if (this.XboxDisplayName != null)
                    hashCode = hashCode * 59 + this.XboxDisplayName.GetHashCode();
                if (this.FbDisplayName != null)
                    hashCode = hashCode * 59 + this.FbDisplayName.GetHashCode();
                if (this.ShowActivity != null)
                    hashCode = hashCode * 59 + this.ShowActivity.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.LocaleInheritDefault != null)
                    hashCode = hashCode * 59 + this.LocaleInheritDefault.GetHashCode();
                if (this.LastBanReportId != null)
                    hashCode = hashCode * 59 + this.LastBanReportId.GetHashCode();
                if (this.ShowGroupMessaging != null)
                    hashCode = hashCode * 59 + this.ShowGroupMessaging.GetHashCode();
                if (this.ProfilePicturePath != null)
                    hashCode = hashCode * 59 + this.ProfilePicturePath.GetHashCode();
                if (this.ProfilePictureWidePath != null)
                    hashCode = hashCode * 59 + this.ProfilePictureWidePath.GetHashCode();
                if (this.ProfileThemeName != null)
                    hashCode = hashCode * 59 + this.ProfileThemeName.GetHashCode();
                if (this.UserTitleDisplay != null)
                    hashCode = hashCode * 59 + this.UserTitleDisplay.GetHashCode();
                if (this.StatusText != null)
                    hashCode = hashCode * 59 + this.StatusText.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                if (this.ProfileBanExpire != null)
                    hashCode = hashCode * 59 + this.ProfileBanExpire.GetHashCode();
                if (this.BlizzardDisplayName != null)
                    hashCode = hashCode * 59 + this.BlizzardDisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
