/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// If the activity is a playlist, this is the definition for a specific entry in the playlist: a single possible combination of Activity and Activity Mode that can be chosen.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyActivityPlaylistItemDefinition :  IEquatable<DestinyDefinitionsDestinyActivityPlaylistItemDefinition>, IValidatableObject
    {
        /// <summary>
        /// If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.
        /// </summary>
        /// <value>If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectActivityModeTypeEnum
        {
            
            /// <summary>
            /// Enum None for 0
            /// </summary>
            [EnumMember(Value = "0")]
            None = 0,
            
            /// <summary>
            /// Enum Story for 2
            /// </summary>
            [EnumMember(Value = "2")]
            Story = 2,
            
            /// <summary>
            /// Enum Strike for 3
            /// </summary>
            [EnumMember(Value = "3")]
            Strike = 3,
            
            /// <summary>
            /// Enum Raid for 4
            /// </summary>
            [EnumMember(Value = "4")]
            Raid = 4,
            
            /// <summary>
            /// Enum AllPvP for 5
            /// </summary>
            [EnumMember(Value = "5")]
            AllPvP = 5,
            
            /// <summary>
            /// Enum Patrol for 6
            /// </summary>
            [EnumMember(Value = "6")]
            Patrol = 6,
            
            /// <summary>
            /// Enum AllPvE for 7
            /// </summary>
            [EnumMember(Value = "7")]
            AllPvE = 7,
            
            /// <summary>
            /// Enum Reserved9 for 9
            /// </summary>
            [EnumMember(Value = "9")]
            Reserved9 = 9,
            
            /// <summary>
            /// Enum Control for 10
            /// </summary>
            [EnumMember(Value = "10")]
            Control = 10,
            
            /// <summary>
            /// Enum Reserved11 for 11
            /// </summary>
            [EnumMember(Value = "11")]
            Reserved11 = 11,
            
            /// <summary>
            /// Enum Clash for 12
            /// </summary>
            [EnumMember(Value = "12")]
            Clash = 12,
            
            /// <summary>
            /// Enum Reserved13 for 13
            /// </summary>
            [EnumMember(Value = "13")]
            Reserved13 = 13,
            
            /// <summary>
            /// Enum Reserved15 for 15
            /// </summary>
            [EnumMember(Value = "15")]
            Reserved15 = 15,
            
            /// <summary>
            /// Enum Nightfall for 16
            /// </summary>
            [EnumMember(Value = "16")]
            Nightfall = 16,
            
            /// <summary>
            /// Enum HeroicNightfall for 17
            /// </summary>
            [EnumMember(Value = "17")]
            HeroicNightfall = 17,
            
            /// <summary>
            /// Enum AllStrikes for 18
            /// </summary>
            [EnumMember(Value = "18")]
            AllStrikes = 18,
            
            /// <summary>
            /// Enum IronBanner for 19
            /// </summary>
            [EnumMember(Value = "19")]
            IronBanner = 19,
            
            /// <summary>
            /// Enum Reserved20 for 20
            /// </summary>
            [EnumMember(Value = "20")]
            Reserved20 = 20,
            
            /// <summary>
            /// Enum Reserved21 for 21
            /// </summary>
            [EnumMember(Value = "21")]
            Reserved21 = 21,
            
            /// <summary>
            /// Enum Reserved22 for 22
            /// </summary>
            [EnumMember(Value = "22")]
            Reserved22 = 22,
            
            /// <summary>
            /// Enum Reserved24 for 24
            /// </summary>
            [EnumMember(Value = "24")]
            Reserved24 = 24,
            
            /// <summary>
            /// Enum Reserved25 for 25
            /// </summary>
            [EnumMember(Value = "25")]
            Reserved25 = 25,
            
            /// <summary>
            /// Enum Reserved26 for 26
            /// </summary>
            [EnumMember(Value = "26")]
            Reserved26 = 26,
            
            /// <summary>
            /// Enum Reserved27 for 27
            /// </summary>
            [EnumMember(Value = "27")]
            Reserved27 = 27,
            
            /// <summary>
            /// Enum Reserved28 for 28
            /// </summary>
            [EnumMember(Value = "28")]
            Reserved28 = 28,
            
            /// <summary>
            /// Enum Reserved29 for 29
            /// </summary>
            [EnumMember(Value = "29")]
            Reserved29 = 29,
            
            /// <summary>
            /// Enum Reserved30 for 30
            /// </summary>
            [EnumMember(Value = "30")]
            Reserved30 = 30,
            
            /// <summary>
            /// Enum Supremacy for 31
            /// </summary>
            [EnumMember(Value = "31")]
            Supremacy = 31,
            
            /// <summary>
            /// Enum Reserved32 for 32
            /// </summary>
            [EnumMember(Value = "32")]
            Reserved32 = 32,
            
            /// <summary>
            /// Enum Survival for 37
            /// </summary>
            [EnumMember(Value = "37")]
            Survival = 37,
            
            /// <summary>
            /// Enum Countdown for 38
            /// </summary>
            [EnumMember(Value = "38")]
            Countdown = 38,
            
            /// <summary>
            /// Enum TrialsOfTheNine for 39
            /// </summary>
            [EnumMember(Value = "39")]
            TrialsOfTheNine = 39,
            
            /// <summary>
            /// Enum Social for 40
            /// </summary>
            [EnumMember(Value = "40")]
            Social = 40,
            
            /// <summary>
            /// Enum TrialsCountdown for 41
            /// </summary>
            [EnumMember(Value = "41")]
            TrialsCountdown = 41,
            
            /// <summary>
            /// Enum TrialsSurvival for 42
            /// </summary>
            [EnumMember(Value = "42")]
            TrialsSurvival = 42,
            
            /// <summary>
            /// Enum IronBannerControl for 43
            /// </summary>
            [EnumMember(Value = "43")]
            IronBannerControl = 43,
            
            /// <summary>
            /// Enum IronBannerClash for 44
            /// </summary>
            [EnumMember(Value = "44")]
            IronBannerClash = 44,
            
            /// <summary>
            /// Enum IronBannerSupremacy for 45
            /// </summary>
            [EnumMember(Value = "45")]
            IronBannerSupremacy = 45
        }

        /// <summary>
        /// If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.
        /// </summary>
        /// <value>If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.</value>
        [DataMember(Name="directActivityModeType", EmitDefaultValue=false)]
        public DirectActivityModeTypeEnum? DirectActivityModeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyActivityPlaylistItemDefinition" /> class.
        /// </summary>
        /// <param name="ActivityHash">The hash identifier of the Activity that can be played. Use it to look up the DestinyActivityDefinition..</param>
        /// <param name="DirectActivityModeHash">If this playlist entry had an activity mode directly defined on it, this will be the hash of that mode..</param>
        /// <param name="DirectActivityModeType">If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode..</param>
        /// <param name="ActivityModeHashes">The hash identifiers for Activity Modes relevant to this entry..</param>
        /// <param name="ActivityModeTypes">The activity modes - if any - in enum form. Because we can&#39;t seem to escape the enums..</param>
        public DestinyDefinitionsDestinyActivityPlaylistItemDefinition(uint? ActivityHash = default(uint?), uint? DirectActivityModeHash = default(uint?), DirectActivityModeTypeEnum? DirectActivityModeType = default(DirectActivityModeTypeEnum?), List<uint?> ActivityModeHashes = default(List<uint?>), List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> ActivityModeTypes = default(List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType>))
        {
            this.ActivityHash = ActivityHash;
            this.DirectActivityModeHash = DirectActivityModeHash;
            this.DirectActivityModeType = DirectActivityModeType;
            this.ActivityModeHashes = ActivityModeHashes;
            this.ActivityModeTypes = ActivityModeTypes;
        }
        
        /// <summary>
        /// The hash identifier of the Activity that can be played. Use it to look up the DestinyActivityDefinition.
        /// </summary>
        /// <value>The hash identifier of the Activity that can be played. Use it to look up the DestinyActivityDefinition.</value>
        [DataMember(Name="activityHash", EmitDefaultValue=false)]
        public uint? ActivityHash { get; set; }

        /// <summary>
        /// If this playlist entry had an activity mode directly defined on it, this will be the hash of that mode.
        /// </summary>
        /// <value>If this playlist entry had an activity mode directly defined on it, this will be the hash of that mode.</value>
        [DataMember(Name="directActivityModeHash", EmitDefaultValue=false)]
        public uint? DirectActivityModeHash { get; set; }


        /// <summary>
        /// The hash identifiers for Activity Modes relevant to this entry.
        /// </summary>
        /// <value>The hash identifiers for Activity Modes relevant to this entry.</value>
        [DataMember(Name="activityModeHashes", EmitDefaultValue=false)]
        public List<uint?> ActivityModeHashes { get; set; }

        /// <summary>
        /// The activity modes - if any - in enum form. Because we can&#39;t seem to escape the enums.
        /// </summary>
        /// <value>The activity modes - if any - in enum form. Because we can&#39;t seem to escape the enums.</value>
        [DataMember(Name="activityModeTypes", EmitDefaultValue=false)]
        public List<DestinyHistoricalStatsDefinitionsDestinyActivityModeType> ActivityModeTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyActivityPlaylistItemDefinition {\n");
            sb.Append("  ActivityHash: ").Append(ActivityHash).Append("\n");
            sb.Append("  DirectActivityModeHash: ").Append(DirectActivityModeHash).Append("\n");
            sb.Append("  DirectActivityModeType: ").Append(DirectActivityModeType).Append("\n");
            sb.Append("  ActivityModeHashes: ").Append(ActivityModeHashes).Append("\n");
            sb.Append("  ActivityModeTypes: ").Append(ActivityModeTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyActivityPlaylistItemDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyActivityPlaylistItemDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyActivityPlaylistItemDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyActivityPlaylistItemDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityHash == input.ActivityHash ||
                    (this.ActivityHash != null &&
                    this.ActivityHash.Equals(input.ActivityHash))
                ) && 
                (
                    this.DirectActivityModeHash == input.DirectActivityModeHash ||
                    (this.DirectActivityModeHash != null &&
                    this.DirectActivityModeHash.Equals(input.DirectActivityModeHash))
                ) && 
                (
                    this.DirectActivityModeType == input.DirectActivityModeType ||
                    (this.DirectActivityModeType != null &&
                    this.DirectActivityModeType.Equals(input.DirectActivityModeType))
                ) && 
                (
                    this.ActivityModeHashes == input.ActivityModeHashes ||
                    this.ActivityModeHashes != null &&
                    this.ActivityModeHashes.SequenceEqual(input.ActivityModeHashes)
                ) && 
                (
                    this.ActivityModeTypes == input.ActivityModeTypes ||
                    this.ActivityModeTypes != null &&
                    this.ActivityModeTypes.SequenceEqual(input.ActivityModeTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityHash != null)
                    hashCode = hashCode * 59 + this.ActivityHash.GetHashCode();
                if (this.DirectActivityModeHash != null)
                    hashCode = hashCode * 59 + this.DirectActivityModeHash.GetHashCode();
                if (this.DirectActivityModeType != null)
                    hashCode = hashCode * 59 + this.DirectActivityModeType.GetHashCode();
                if (this.ActivityModeHashes != null)
                    hashCode = hashCode * 59 + this.ActivityModeHashes.GetHashCode();
                if (this.ActivityModeTypes != null)
                    hashCode = hashCode * 59 + this.ActivityModeTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
