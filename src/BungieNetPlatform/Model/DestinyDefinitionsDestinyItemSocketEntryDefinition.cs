/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// The definition information for a specific socket on an item. This will determine how the socket behaves in-game.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyItemSocketEntryDefinition :  IEquatable<DestinyDefinitionsDestinyItemSocketEntryDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemSocketEntryDefinition" /> class.
        /// </summary>
        /// <param name="SocketTypeHash">All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket..</param>
        /// <param name="SingleInitialItemHash">If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted..</param>
        /// <param name="ReusablePlugItems">This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs..</param>
        public DestinyDefinitionsDestinyItemSocketEntryDefinition(uint? SocketTypeHash = default(uint?), uint? SingleInitialItemHash = default(uint?), List<DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition> ReusablePlugItems = default(List<DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition>))
        {
            this.SocketTypeHash = SocketTypeHash;
            this.SingleInitialItemHash = SingleInitialItemHash;
            this.ReusablePlugItems = ReusablePlugItems;
        }
        
        /// <summary>
        /// All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket.
        /// </summary>
        /// <value>All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket.</value>
        [DataMember(Name="socketTypeHash", EmitDefaultValue=false)]
        public uint? SocketTypeHash { get; set; }

        /// <summary>
        /// If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted.
        /// </summary>
        /// <value>If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted.</value>
        [DataMember(Name="singleInitialItemHash", EmitDefaultValue=false)]
        public uint? SingleInitialItemHash { get; set; }

        /// <summary>
        /// This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.
        /// </summary>
        /// <value>This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.</value>
        [DataMember(Name="reusablePlugItems", EmitDefaultValue=false)]
        public List<DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition> ReusablePlugItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemSocketEntryDefinition {\n");
            sb.Append("  SocketTypeHash: ").Append(SocketTypeHash).Append("\n");
            sb.Append("  SingleInitialItemHash: ").Append(SingleInitialItemHash).Append("\n");
            sb.Append("  ReusablePlugItems: ").Append(ReusablePlugItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemSocketEntryDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemSocketEntryDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemSocketEntryDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemSocketEntryDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SocketTypeHash == input.SocketTypeHash ||
                    (this.SocketTypeHash != null &&
                    this.SocketTypeHash.Equals(input.SocketTypeHash))
                ) && 
                (
                    this.SingleInitialItemHash == input.SingleInitialItemHash ||
                    (this.SingleInitialItemHash != null &&
                    this.SingleInitialItemHash.Equals(input.SingleInitialItemHash))
                ) && 
                (
                    this.ReusablePlugItems == input.ReusablePlugItems ||
                    this.ReusablePlugItems != null &&
                    this.ReusablePlugItems.SequenceEqual(input.ReusablePlugItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SocketTypeHash != null)
                    hashCode = hashCode * 59 + this.SocketTypeHash.GetHashCode();
                if (this.SingleInitialItemHash != null)
                    hashCode = hashCode * 59 + this.SingleInitialItemHash.GetHashCode();
                if (this.ReusablePlugItems != null)
                    hashCode = hashCode * 59 + this.ReusablePlugItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
