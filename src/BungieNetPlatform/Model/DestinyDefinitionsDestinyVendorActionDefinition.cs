/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// If a vendor can ever end up performing actions, these are the properties that will be related to those actions. I&#39;m not going to bother documenting this yet, as it is unused and unclear if it will ever be used... but in case it is ever populated and someone finds it useful, it is defined here.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyVendorActionDefinition :  IEquatable<DestinyDefinitionsDestinyVendorActionDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorActionDefinition" /> class.
        /// </summary>
        /// <param name="Description">Description.</param>
        /// <param name="ExecuteSeconds">ExecuteSeconds.</param>
        /// <param name="Icon">Icon.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Verb">Verb.</param>
        /// <param name="IsPositive">IsPositive.</param>
        /// <param name="ActionId">ActionId.</param>
        /// <param name="ActionHash">ActionHash.</param>
        /// <param name="AutoPerformAction">AutoPerformAction.</param>
        public DestinyDefinitionsDestinyVendorActionDefinition(string Description = default(string), int? ExecuteSeconds = default(int?), string Icon = default(string), string Name = default(string), string Verb = default(string), bool? IsPositive = default(bool?), string ActionId = default(string), uint? ActionHash = default(uint?), bool? AutoPerformAction = default(bool?))
        {
            this.Description = Description;
            this.ExecuteSeconds = ExecuteSeconds;
            this.Icon = Icon;
            this.Name = Name;
            this.Verb = Verb;
            this.IsPositive = IsPositive;
            this.ActionId = ActionId;
            this.ActionHash = ActionHash;
            this.AutoPerformAction = AutoPerformAction;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExecuteSeconds
        /// </summary>
        [DataMember(Name="executeSeconds", EmitDefaultValue=false)]
        public int? ExecuteSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Verb
        /// </summary>
        [DataMember(Name="verb", EmitDefaultValue=false)]
        public string Verb { get; set; }

        /// <summary>
        /// Gets or Sets IsPositive
        /// </summary>
        [DataMember(Name="isPositive", EmitDefaultValue=false)]
        public bool? IsPositive { get; set; }

        /// <summary>
        /// Gets or Sets ActionId
        /// </summary>
        [DataMember(Name="actionId", EmitDefaultValue=false)]
        public string ActionId { get; set; }

        /// <summary>
        /// Gets or Sets ActionHash
        /// </summary>
        [DataMember(Name="actionHash", EmitDefaultValue=false)]
        public uint? ActionHash { get; set; }

        /// <summary>
        /// Gets or Sets AutoPerformAction
        /// </summary>
        [DataMember(Name="autoPerformAction", EmitDefaultValue=false)]
        public bool? AutoPerformAction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorActionDefinition {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExecuteSeconds: ").Append(ExecuteSeconds).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  IsPositive: ").Append(IsPositive).Append("\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  ActionHash: ").Append(ActionHash).Append("\n");
            sb.Append("  AutoPerformAction: ").Append(AutoPerformAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorActionDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorActionDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorActionDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorActionDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExecuteSeconds == input.ExecuteSeconds ||
                    (this.ExecuteSeconds != null &&
                    this.ExecuteSeconds.Equals(input.ExecuteSeconds))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Verb == input.Verb ||
                    (this.Verb != null &&
                    this.Verb.Equals(input.Verb))
                ) && 
                (
                    this.IsPositive == input.IsPositive ||
                    (this.IsPositive != null &&
                    this.IsPositive.Equals(input.IsPositive))
                ) && 
                (
                    this.ActionId == input.ActionId ||
                    (this.ActionId != null &&
                    this.ActionId.Equals(input.ActionId))
                ) && 
                (
                    this.ActionHash == input.ActionHash ||
                    (this.ActionHash != null &&
                    this.ActionHash.Equals(input.ActionHash))
                ) && 
                (
                    this.AutoPerformAction == input.AutoPerformAction ||
                    (this.AutoPerformAction != null &&
                    this.AutoPerformAction.Equals(input.AutoPerformAction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExecuteSeconds != null)
                    hashCode = hashCode * 59 + this.ExecuteSeconds.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Verb != null)
                    hashCode = hashCode * 59 + this.Verb.GetHashCode();
                if (this.IsPositive != null)
                    hashCode = hashCode * 59 + this.IsPositive.GetHashCode();
                if (this.ActionId != null)
                    hashCode = hashCode * 59 + this.ActionId.GetHashCode();
                if (this.ActionHash != null)
                    hashCode = hashCode * 59 + this.ActionHash.GetHashCode();
                if (this.AutoPerformAction != null)
                    hashCode = hashCode * 59 + this.AutoPerformAction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
