/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// This property has some history. A talent grid can provide stats on both the item it&#39;s related to and the character equipping the item. This returns data about those stat bonuses.
    /// </summary>
    [DataContract]
    public partial class DestinyDestinyTalentNodeStatBlock :  IEquatable<DestinyDestinyTalentNodeStatBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDestinyTalentNodeStatBlock" /> class.
        /// </summary>
        /// <param name="CurrentStepStats">The stat benefits conferred when this talent node is activated for the current Step that is active on the node..</param>
        /// <param name="NextStepStats">This is a holdover from the old days of Destiny 1, when a node could be activated multiple times, conferring multiple steps worth of benefits: you would use this property to show what activating the \&quot;next\&quot; step on the node would provide vs. what the current step is providing. While Nodes are currently not being used this way, the underlying system for this functionality still exists. I hesitate to remove this property while the ability for designers to make such a talent grid still exists. Whether you want to show it is up to you..</param>
        public DestinyDestinyTalentNodeStatBlock(List<DestinyDestinyStat> CurrentStepStats = default(List<DestinyDestinyStat>), List<DestinyDestinyStat> NextStepStats = default(List<DestinyDestinyStat>))
        {
            this.CurrentStepStats = CurrentStepStats;
            this.NextStepStats = NextStepStats;
        }
        
        /// <summary>
        /// The stat benefits conferred when this talent node is activated for the current Step that is active on the node.
        /// </summary>
        /// <value>The stat benefits conferred when this talent node is activated for the current Step that is active on the node.</value>
        [DataMember(Name="currentStepStats", EmitDefaultValue=false)]
        public List<DestinyDestinyStat> CurrentStepStats { get; set; }

        /// <summary>
        /// This is a holdover from the old days of Destiny 1, when a node could be activated multiple times, conferring multiple steps worth of benefits: you would use this property to show what activating the \&quot;next\&quot; step on the node would provide vs. what the current step is providing. While Nodes are currently not being used this way, the underlying system for this functionality still exists. I hesitate to remove this property while the ability for designers to make such a talent grid still exists. Whether you want to show it is up to you.
        /// </summary>
        /// <value>This is a holdover from the old days of Destiny 1, when a node could be activated multiple times, conferring multiple steps worth of benefits: you would use this property to show what activating the \&quot;next\&quot; step on the node would provide vs. what the current step is providing. While Nodes are currently not being used this way, the underlying system for this functionality still exists. I hesitate to remove this property while the ability for designers to make such a talent grid still exists. Whether you want to show it is up to you.</value>
        [DataMember(Name="nextStepStats", EmitDefaultValue=false)]
        public List<DestinyDestinyStat> NextStepStats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDestinyTalentNodeStatBlock {\n");
            sb.Append("  CurrentStepStats: ").Append(CurrentStepStats).Append("\n");
            sb.Append("  NextStepStats: ").Append(NextStepStats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDestinyTalentNodeStatBlock);
        }

        /// <summary>
        /// Returns true if DestinyDestinyTalentNodeStatBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDestinyTalentNodeStatBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDestinyTalentNodeStatBlock input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentStepStats == input.CurrentStepStats ||
                    this.CurrentStepStats != null &&
                    this.CurrentStepStats.SequenceEqual(input.CurrentStepStats)
                ) && 
                (
                    this.NextStepStats == input.NextStepStats ||
                    this.NextStepStats != null &&
                    this.NextStepStats.SequenceEqual(input.NextStepStats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentStepStats != null)
                    hashCode = hashCode * 59 + this.CurrentStepStats.GetHashCode();
                if (this.NextStepStats != null)
                    hashCode = hashCode * 59 + this.NextStepStats.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
