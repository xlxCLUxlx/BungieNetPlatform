/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
    /// </summary>
    [DataContract]
    public partial class DestinyResponsesDestinyCharacterResponse :  IEquatable<DestinyResponsesDestinyCharacterResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyResponsesDestinyCharacterResponse" /> class.
        /// </summary>
        /// <param name="Inventory">The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories.</param>
        /// <param name="Character">Base information about the character in question.  COMPONENT TYPE: Characters.</param>
        /// <param name="Progressions">Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions.</param>
        /// <param name="RenderData">Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData.</param>
        /// <param name="Activities">Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities.</param>
        /// <param name="Equipment">Equipped items on the character.  COMPONENT TYPE: CharacterEquipment.</param>
        /// <param name="Kiosks">Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks.</param>
        /// <param name="ItemComponents">The set of components belonging to the player&#39;s instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.].</param>
        public DestinyResponsesDestinyCharacterResponse(SingleComponentResponseOfDestinyInventoryComponent Inventory = default(SingleComponentResponseOfDestinyInventoryComponent), SingleComponentResponseOfDestinyCharacterComponent Character = default(SingleComponentResponseOfDestinyCharacterComponent), SingleComponentResponseOfDestinyCharacterProgressionComponent Progressions = default(SingleComponentResponseOfDestinyCharacterProgressionComponent), SingleComponentResponseOfDestinyCharacterRenderComponent RenderData = default(SingleComponentResponseOfDestinyCharacterRenderComponent), SingleComponentResponseOfDestinyCharacterActivitiesComponent Activities = default(SingleComponentResponseOfDestinyCharacterActivitiesComponent), SingleComponentResponseOfDestinyInventoryComponent Equipment = default(SingleComponentResponseOfDestinyInventoryComponent), SingleComponentResponseOfDestinyKiosksComponent Kiosks = default(SingleComponentResponseOfDestinyKiosksComponent), DestinyItemComponentSetOfint64 ItemComponents = default(DestinyItemComponentSetOfint64))
        {
            this.Inventory = Inventory;
            this.Character = Character;
            this.Progressions = Progressions;
            this.RenderData = RenderData;
            this.Activities = Activities;
            this.Equipment = Equipment;
            this.Kiosks = Kiosks;
            this.ItemComponents = ItemComponents;
        }
        
        /// <summary>
        /// The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories
        /// </summary>
        /// <value>The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories</value>
        [DataMember(Name="inventory", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyInventoryComponent Inventory { get; set; }

        /// <summary>
        /// Base information about the character in question.  COMPONENT TYPE: Characters
        /// </summary>
        /// <value>Base information about the character in question.  COMPONENT TYPE: Characters</value>
        [DataMember(Name="character", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyCharacterComponent Character { get; set; }

        /// <summary>
        /// Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions
        /// </summary>
        /// <value>Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions</value>
        [DataMember(Name="progressions", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyCharacterProgressionComponent Progressions { get; set; }

        /// <summary>
        /// Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData
        /// </summary>
        /// <value>Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData</value>
        [DataMember(Name="renderData", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyCharacterRenderComponent RenderData { get; set; }

        /// <summary>
        /// Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities
        /// </summary>
        /// <value>Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities</value>
        [DataMember(Name="activities", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyCharacterActivitiesComponent Activities { get; set; }

        /// <summary>
        /// Equipped items on the character.  COMPONENT TYPE: CharacterEquipment
        /// </summary>
        /// <value>Equipped items on the character.  COMPONENT TYPE: CharacterEquipment</value>
        [DataMember(Name="equipment", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyInventoryComponent Equipment { get; set; }

        /// <summary>
        /// Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks
        /// </summary>
        /// <value>Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks</value>
        [DataMember(Name="kiosks", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyKiosksComponent Kiosks { get; set; }

        /// <summary>
        /// The set of components belonging to the player&#39;s instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
        /// </summary>
        /// <value>The set of components belonging to the player&#39;s instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</value>
        [DataMember(Name="itemComponents", EmitDefaultValue=false)]
        public DestinyItemComponentSetOfint64 ItemComponents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyResponsesDestinyCharacterResponse {\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  Character: ").Append(Character).Append("\n");
            sb.Append("  Progressions: ").Append(Progressions).Append("\n");
            sb.Append("  RenderData: ").Append(RenderData).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Equipment: ").Append(Equipment).Append("\n");
            sb.Append("  Kiosks: ").Append(Kiosks).Append("\n");
            sb.Append("  ItemComponents: ").Append(ItemComponents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyResponsesDestinyCharacterResponse);
        }

        /// <summary>
        /// Returns true if DestinyResponsesDestinyCharacterResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyResponsesDestinyCharacterResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyResponsesDestinyCharacterResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Inventory == input.Inventory ||
                    (this.Inventory != null &&
                    this.Inventory.Equals(input.Inventory))
                ) && 
                (
                    this.Character == input.Character ||
                    (this.Character != null &&
                    this.Character.Equals(input.Character))
                ) && 
                (
                    this.Progressions == input.Progressions ||
                    (this.Progressions != null &&
                    this.Progressions.Equals(input.Progressions))
                ) && 
                (
                    this.RenderData == input.RenderData ||
                    (this.RenderData != null &&
                    this.RenderData.Equals(input.RenderData))
                ) && 
                (
                    this.Activities == input.Activities ||
                    (this.Activities != null &&
                    this.Activities.Equals(input.Activities))
                ) && 
                (
                    this.Equipment == input.Equipment ||
                    (this.Equipment != null &&
                    this.Equipment.Equals(input.Equipment))
                ) && 
                (
                    this.Kiosks == input.Kiosks ||
                    (this.Kiosks != null &&
                    this.Kiosks.Equals(input.Kiosks))
                ) && 
                (
                    this.ItemComponents == input.ItemComponents ||
                    (this.ItemComponents != null &&
                    this.ItemComponents.Equals(input.ItemComponents))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                if (this.Character != null)
                    hashCode = hashCode * 59 + this.Character.GetHashCode();
                if (this.Progressions != null)
                    hashCode = hashCode * 59 + this.Progressions.GetHashCode();
                if (this.RenderData != null)
                    hashCode = hashCode * 59 + this.RenderData.GetHashCode();
                if (this.Activities != null)
                    hashCode = hashCode * 59 + this.Activities.GetHashCode();
                if (this.Equipment != null)
                    hashCode = hashCode * 59 + this.Equipment.GetHashCode();
                if (this.Kiosks != null)
                    hashCode = hashCode * 59 + this.Kiosks.GetHashCode();
                if (this.ItemComponents != null)
                    hashCode = hashCode * 59 + this.ItemComponents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
