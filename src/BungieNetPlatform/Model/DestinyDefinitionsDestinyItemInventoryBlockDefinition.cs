/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item&#39;s relationship with the inventory.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyItemInventoryBlockDefinition :  IEquatable<DestinyDefinitionsDestinyItemInventoryBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemInventoryBlockDefinition" /> class.
        /// </summary>
        /// <param name="StackUniqueLabel">If this string is populated, you can&#39;t have more than one stack with this label in a given inventory. Note that this is different from the equipping block&#39;s unique label, which is used for equipping uniqueness..</param>
        /// <param name="MaxStackSize">The maximum quantity of this item that can exist in a stack..</param>
        /// <param name="BucketTypeHash">The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this \&quot;bucketHash\&quot;, but too many things refer to it now. Sigh..</param>
        /// <param name="RecoveryBucketTypeHash">If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead..</param>
        /// <param name="TierTypeHash">The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item&#39;s tier..</param>
        /// <param name="IsInstanceItem">If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer)..</param>
        /// <param name="TierTypeName">The localized name of the tier type, which is a useful shortcut so you don&#39;t have to look up the definition every time. However, it&#39;s mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to..</param>
        /// <param name="TierType">The enumeration matching the tier type of the item to known values, again for convenience sake..</param>
        public DestinyDefinitionsDestinyItemInventoryBlockDefinition(string StackUniqueLabel = default(string), int? MaxStackSize = default(int?), uint? BucketTypeHash = default(uint?), uint? RecoveryBucketTypeHash = default(uint?), uint? TierTypeHash = default(uint?), bool? IsInstanceItem = default(bool?), string TierTypeName = default(string), DestinyTierType TierType = default(DestinyTierType))
        {
            this.StackUniqueLabel = StackUniqueLabel;
            this.MaxStackSize = MaxStackSize;
            this.BucketTypeHash = BucketTypeHash;
            this.RecoveryBucketTypeHash = RecoveryBucketTypeHash;
            this.TierTypeHash = TierTypeHash;
            this.IsInstanceItem = IsInstanceItem;
            this.TierTypeName = TierTypeName;
            this.TierType = TierType;
        }
        
        /// <summary>
        /// If this string is populated, you can&#39;t have more than one stack with this label in a given inventory. Note that this is different from the equipping block&#39;s unique label, which is used for equipping uniqueness.
        /// </summary>
        /// <value>If this string is populated, you can&#39;t have more than one stack with this label in a given inventory. Note that this is different from the equipping block&#39;s unique label, which is used for equipping uniqueness.</value>
        [DataMember(Name="stackUniqueLabel", EmitDefaultValue=false)]
        public string StackUniqueLabel { get; set; }

        /// <summary>
        /// The maximum quantity of this item that can exist in a stack.
        /// </summary>
        /// <value>The maximum quantity of this item that can exist in a stack.</value>
        [DataMember(Name="maxStackSize", EmitDefaultValue=false)]
        public int? MaxStackSize { get; set; }

        /// <summary>
        /// The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this \&quot;bucketHash\&quot;, but too many things refer to it now. Sigh.
        /// </summary>
        /// <value>The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this \&quot;bucketHash\&quot;, but too many things refer to it now. Sigh.</value>
        [DataMember(Name="bucketTypeHash", EmitDefaultValue=false)]
        public uint? BucketTypeHash { get; set; }

        /// <summary>
        /// If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
        /// </summary>
        /// <value>If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.</value>
        [DataMember(Name="recoveryBucketTypeHash", EmitDefaultValue=false)]
        public uint? RecoveryBucketTypeHash { get; set; }

        /// <summary>
        /// The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item&#39;s tier.
        /// </summary>
        /// <value>The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item&#39;s tier.</value>
        [DataMember(Name="tierTypeHash", EmitDefaultValue=false)]
        public uint? TierTypeHash { get; set; }

        /// <summary>
        /// If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
        /// </summary>
        /// <value>If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).</value>
        [DataMember(Name="isInstanceItem", EmitDefaultValue=false)]
        public bool? IsInstanceItem { get; set; }

        /// <summary>
        /// The localized name of the tier type, which is a useful shortcut so you don&#39;t have to look up the definition every time. However, it&#39;s mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
        /// </summary>
        /// <value>The localized name of the tier type, which is a useful shortcut so you don&#39;t have to look up the definition every time. However, it&#39;s mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.</value>
        [DataMember(Name="tierTypeName", EmitDefaultValue=false)]
        public string TierTypeName { get; set; }

        /// <summary>
        /// The enumeration matching the tier type of the item to known values, again for convenience sake.
        /// </summary>
        /// <value>The enumeration matching the tier type of the item to known values, again for convenience sake.</value>
        [DataMember(Name="tierType", EmitDefaultValue=false)]
        public DestinyTierType TierType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemInventoryBlockDefinition {\n");
            sb.Append("  StackUniqueLabel: ").Append(StackUniqueLabel).Append("\n");
            sb.Append("  MaxStackSize: ").Append(MaxStackSize).Append("\n");
            sb.Append("  BucketTypeHash: ").Append(BucketTypeHash).Append("\n");
            sb.Append("  RecoveryBucketTypeHash: ").Append(RecoveryBucketTypeHash).Append("\n");
            sb.Append("  TierTypeHash: ").Append(TierTypeHash).Append("\n");
            sb.Append("  IsInstanceItem: ").Append(IsInstanceItem).Append("\n");
            sb.Append("  TierTypeName: ").Append(TierTypeName).Append("\n");
            sb.Append("  TierType: ").Append(TierType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemInventoryBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemInventoryBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemInventoryBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemInventoryBlockDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StackUniqueLabel == input.StackUniqueLabel ||
                    (this.StackUniqueLabel != null &&
                    this.StackUniqueLabel.Equals(input.StackUniqueLabel))
                ) && 
                (
                    this.MaxStackSize == input.MaxStackSize ||
                    (this.MaxStackSize != null &&
                    this.MaxStackSize.Equals(input.MaxStackSize))
                ) && 
                (
                    this.BucketTypeHash == input.BucketTypeHash ||
                    (this.BucketTypeHash != null &&
                    this.BucketTypeHash.Equals(input.BucketTypeHash))
                ) && 
                (
                    this.RecoveryBucketTypeHash == input.RecoveryBucketTypeHash ||
                    (this.RecoveryBucketTypeHash != null &&
                    this.RecoveryBucketTypeHash.Equals(input.RecoveryBucketTypeHash))
                ) && 
                (
                    this.TierTypeHash == input.TierTypeHash ||
                    (this.TierTypeHash != null &&
                    this.TierTypeHash.Equals(input.TierTypeHash))
                ) && 
                (
                    this.IsInstanceItem == input.IsInstanceItem ||
                    (this.IsInstanceItem != null &&
                    this.IsInstanceItem.Equals(input.IsInstanceItem))
                ) && 
                (
                    this.TierTypeName == input.TierTypeName ||
                    (this.TierTypeName != null &&
                    this.TierTypeName.Equals(input.TierTypeName))
                ) && 
                (
                    this.TierType == input.TierType ||
                    (this.TierType != null &&
                    this.TierType.Equals(input.TierType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StackUniqueLabel != null)
                    hashCode = hashCode * 59 + this.StackUniqueLabel.GetHashCode();
                if (this.MaxStackSize != null)
                    hashCode = hashCode * 59 + this.MaxStackSize.GetHashCode();
                if (this.BucketTypeHash != null)
                    hashCode = hashCode * 59 + this.BucketTypeHash.GetHashCode();
                if (this.RecoveryBucketTypeHash != null)
                    hashCode = hashCode * 59 + this.RecoveryBucketTypeHash.GetHashCode();
                if (this.TierTypeHash != null)
                    hashCode = hashCode * 59 + this.TierTypeHash.GetHashCode();
                if (this.IsInstanceItem != null)
                    hashCode = hashCode * 59 + this.IsInstanceItem.GetHashCode();
                if (this.TierTypeName != null)
                    hashCode = hashCode * 59 + this.TierTypeName.GetHashCode();
                if (this.TierType != null)
                    hashCode = hashCode * 59 + this.TierType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
