/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyVendorInteractionDefinition :  IEquatable<DestinyDefinitionsDestinyVendorInteractionDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorInteractionDefinition" /> class.
        /// </summary>
        /// <param name="Replies">The potential replies that the user can make to the interaction..</param>
        /// <param name="VendorCategoryIndex">If &gt;&#x3D; 0, this is the category of sale items to show along with this interaction dialog..</param>
        /// <param name="QuestlineItemHash">If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character&#39;s status with the quest if you use it to find the character&#39;s current Quest Step by checking their inventory against this questlineItemHash&#39;s DestinyInventoryItemDefinition.setData..</param>
        /// <param name="SackInteractionList">If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks..</param>
        /// <param name="UiInteractionType">A UI hint for the behavior of the interaction screen. BNet doesn&#39;t use this, but you can choose to..</param>
        /// <param name="RewardBlockLabel">If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction..</param>
        /// <param name="RewardVendorCategoryIndex">If the vendor&#39;s reward list is sourced from one of his categories, this is the index into the category array of items to show..</param>
        /// <param name="FlavorLineOne">If the vendor interaction has flavor text, this is some of it..</param>
        /// <param name="FlavorLineTwo">If the vendor interaction has flavor text, this is the rest of it..</param>
        /// <param name="HeaderDisplayProperties">The header for the interaction dialog..</param>
        /// <param name="Instructions">The localized text telling the player what to do when they see this dialog..</param>
        public DestinyDefinitionsDestinyVendorInteractionDefinition(List<DestinyDefinitionsDestinyVendorInteractionReplyDefinition> Replies = default(List<DestinyDefinitionsDestinyVendorInteractionReplyDefinition>), int? VendorCategoryIndex = default(int?), uint? QuestlineItemHash = default(uint?), List<DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition> SackInteractionList = default(List<DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition>), uint? UiInteractionType = default(uint?), string RewardBlockLabel = default(string), int? RewardVendorCategoryIndex = default(int?), string FlavorLineOne = default(string), string FlavorLineTwo = default(string), DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition HeaderDisplayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), string Instructions = default(string))
        {
            this.Replies = Replies;
            this.VendorCategoryIndex = VendorCategoryIndex;
            this.QuestlineItemHash = QuestlineItemHash;
            this.SackInteractionList = SackInteractionList;
            this.UiInteractionType = UiInteractionType;
            this.RewardBlockLabel = RewardBlockLabel;
            this.RewardVendorCategoryIndex = RewardVendorCategoryIndex;
            this.FlavorLineOne = FlavorLineOne;
            this.FlavorLineTwo = FlavorLineTwo;
            this.HeaderDisplayProperties = HeaderDisplayProperties;
            this.Instructions = Instructions;
        }
        
        /// <summary>
        /// The potential replies that the user can make to the interaction.
        /// </summary>
        /// <value>The potential replies that the user can make to the interaction.</value>
        [DataMember(Name="replies", EmitDefaultValue=false)]
        public List<DestinyDefinitionsDestinyVendorInteractionReplyDefinition> Replies { get; set; }

        /// <summary>
        /// If &gt;&#x3D; 0, this is the category of sale items to show along with this interaction dialog.
        /// </summary>
        /// <value>If &gt;&#x3D; 0, this is the category of sale items to show along with this interaction dialog.</value>
        [DataMember(Name="vendorCategoryIndex", EmitDefaultValue=false)]
        public int? VendorCategoryIndex { get; set; }

        /// <summary>
        /// If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character&#39;s status with the quest if you use it to find the character&#39;s current Quest Step by checking their inventory against this questlineItemHash&#39;s DestinyInventoryItemDefinition.setData.
        /// </summary>
        /// <value>If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character&#39;s status with the quest if you use it to find the character&#39;s current Quest Step by checking their inventory against this questlineItemHash&#39;s DestinyInventoryItemDefinition.setData.</value>
        [DataMember(Name="questlineItemHash", EmitDefaultValue=false)]
        public uint? QuestlineItemHash { get; set; }

        /// <summary>
        /// If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.
        /// </summary>
        /// <value>If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.</value>
        [DataMember(Name="sackInteractionList", EmitDefaultValue=false)]
        public List<DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition> SackInteractionList { get; set; }

        /// <summary>
        /// A UI hint for the behavior of the interaction screen. BNet doesn&#39;t use this, but you can choose to.
        /// </summary>
        /// <value>A UI hint for the behavior of the interaction screen. BNet doesn&#39;t use this, but you can choose to.</value>
        [DataMember(Name="uiInteractionType", EmitDefaultValue=false)]
        public uint? UiInteractionType { get; set; }

        /// <summary>
        /// If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.
        /// </summary>
        /// <value>If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.</value>
        [DataMember(Name="rewardBlockLabel", EmitDefaultValue=false)]
        public string RewardBlockLabel { get; set; }

        /// <summary>
        /// If the vendor&#39;s reward list is sourced from one of his categories, this is the index into the category array of items to show.
        /// </summary>
        /// <value>If the vendor&#39;s reward list is sourced from one of his categories, this is the index into the category array of items to show.</value>
        [DataMember(Name="rewardVendorCategoryIndex", EmitDefaultValue=false)]
        public int? RewardVendorCategoryIndex { get; set; }

        /// <summary>
        /// If the vendor interaction has flavor text, this is some of it.
        /// </summary>
        /// <value>If the vendor interaction has flavor text, this is some of it.</value>
        [DataMember(Name="flavorLineOne", EmitDefaultValue=false)]
        public string FlavorLineOne { get; set; }

        /// <summary>
        /// If the vendor interaction has flavor text, this is the rest of it.
        /// </summary>
        /// <value>If the vendor interaction has flavor text, this is the rest of it.</value>
        [DataMember(Name="flavorLineTwo", EmitDefaultValue=false)]
        public string FlavorLineTwo { get; set; }

        /// <summary>
        /// The header for the interaction dialog.
        /// </summary>
        /// <value>The header for the interaction dialog.</value>
        [DataMember(Name="headerDisplayProperties", EmitDefaultValue=false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition HeaderDisplayProperties { get; set; }

        /// <summary>
        /// The localized text telling the player what to do when they see this dialog.
        /// </summary>
        /// <value>The localized text telling the player what to do when they see this dialog.</value>
        [DataMember(Name="instructions", EmitDefaultValue=false)]
        public string Instructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorInteractionDefinition {\n");
            sb.Append("  Replies: ").Append(Replies).Append("\n");
            sb.Append("  VendorCategoryIndex: ").Append(VendorCategoryIndex).Append("\n");
            sb.Append("  QuestlineItemHash: ").Append(QuestlineItemHash).Append("\n");
            sb.Append("  SackInteractionList: ").Append(SackInteractionList).Append("\n");
            sb.Append("  UiInteractionType: ").Append(UiInteractionType).Append("\n");
            sb.Append("  RewardBlockLabel: ").Append(RewardBlockLabel).Append("\n");
            sb.Append("  RewardVendorCategoryIndex: ").Append(RewardVendorCategoryIndex).Append("\n");
            sb.Append("  FlavorLineOne: ").Append(FlavorLineOne).Append("\n");
            sb.Append("  FlavorLineTwo: ").Append(FlavorLineTwo).Append("\n");
            sb.Append("  HeaderDisplayProperties: ").Append(HeaderDisplayProperties).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorInteractionDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorInteractionDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorInteractionDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorInteractionDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Replies == input.Replies ||
                    this.Replies != null &&
                    this.Replies.SequenceEqual(input.Replies)
                ) && 
                (
                    this.VendorCategoryIndex == input.VendorCategoryIndex ||
                    (this.VendorCategoryIndex != null &&
                    this.VendorCategoryIndex.Equals(input.VendorCategoryIndex))
                ) && 
                (
                    this.QuestlineItemHash == input.QuestlineItemHash ||
                    (this.QuestlineItemHash != null &&
                    this.QuestlineItemHash.Equals(input.QuestlineItemHash))
                ) && 
                (
                    this.SackInteractionList == input.SackInteractionList ||
                    this.SackInteractionList != null &&
                    this.SackInteractionList.SequenceEqual(input.SackInteractionList)
                ) && 
                (
                    this.UiInteractionType == input.UiInteractionType ||
                    (this.UiInteractionType != null &&
                    this.UiInteractionType.Equals(input.UiInteractionType))
                ) && 
                (
                    this.RewardBlockLabel == input.RewardBlockLabel ||
                    (this.RewardBlockLabel != null &&
                    this.RewardBlockLabel.Equals(input.RewardBlockLabel))
                ) && 
                (
                    this.RewardVendorCategoryIndex == input.RewardVendorCategoryIndex ||
                    (this.RewardVendorCategoryIndex != null &&
                    this.RewardVendorCategoryIndex.Equals(input.RewardVendorCategoryIndex))
                ) && 
                (
                    this.FlavorLineOne == input.FlavorLineOne ||
                    (this.FlavorLineOne != null &&
                    this.FlavorLineOne.Equals(input.FlavorLineOne))
                ) && 
                (
                    this.FlavorLineTwo == input.FlavorLineTwo ||
                    (this.FlavorLineTwo != null &&
                    this.FlavorLineTwo.Equals(input.FlavorLineTwo))
                ) && 
                (
                    this.HeaderDisplayProperties == input.HeaderDisplayProperties ||
                    (this.HeaderDisplayProperties != null &&
                    this.HeaderDisplayProperties.Equals(input.HeaderDisplayProperties))
                ) && 
                (
                    this.Instructions == input.Instructions ||
                    (this.Instructions != null &&
                    this.Instructions.Equals(input.Instructions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Replies != null)
                    hashCode = hashCode * 59 + this.Replies.GetHashCode();
                if (this.VendorCategoryIndex != null)
                    hashCode = hashCode * 59 + this.VendorCategoryIndex.GetHashCode();
                if (this.QuestlineItemHash != null)
                    hashCode = hashCode * 59 + this.QuestlineItemHash.GetHashCode();
                if (this.SackInteractionList != null)
                    hashCode = hashCode * 59 + this.SackInteractionList.GetHashCode();
                if (this.UiInteractionType != null)
                    hashCode = hashCode * 59 + this.UiInteractionType.GetHashCode();
                if (this.RewardBlockLabel != null)
                    hashCode = hashCode * 59 + this.RewardBlockLabel.GetHashCode();
                if (this.RewardVendorCategoryIndex != null)
                    hashCode = hashCode * 59 + this.RewardVendorCategoryIndex.GetHashCode();
                if (this.FlavorLineOne != null)
                    hashCode = hashCode * 59 + this.FlavorLineOne.GetHashCode();
                if (this.FlavorLineTwo != null)
                    hashCode = hashCode * 59 + this.FlavorLineTwo.GetHashCode();
                if (this.HeaderDisplayProperties != null)
                    hashCode = hashCode * 59 + this.HeaderDisplayProperties.GetHashCode();
                if (this.Instructions != null)
                    hashCode = hashCode * 59 + this.Instructions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
