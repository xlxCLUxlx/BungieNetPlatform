/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Information about a single inventory bucket in a vendor flyout UI and how it is shown.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition :  IEquatable<DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition" /> class.
        /// </summary>
        /// <param name="Collapsible">If true, the inventory bucket should be able to be collapsed visually..</param>
        /// <param name="InventoryBucketHash">The inventory bucket whose contents should be shown..</param>
        /// <param name="SortItemsBy">The methodology to use for sorting items from the flyout..</param>
        public DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition(bool? Collapsible = default(bool?), uint? InventoryBucketHash = default(uint?), DestinyDestinyItemSortType SortItemsBy = default(DestinyDestinyItemSortType))
        {
            this.Collapsible = Collapsible;
            this.InventoryBucketHash = InventoryBucketHash;
            this.SortItemsBy = SortItemsBy;
        }
        
        /// <summary>
        /// If true, the inventory bucket should be able to be collapsed visually.
        /// </summary>
        /// <value>If true, the inventory bucket should be able to be collapsed visually.</value>
        [DataMember(Name="collapsible", EmitDefaultValue=false)]
        public bool? Collapsible { get; set; }

        /// <summary>
        /// The inventory bucket whose contents should be shown.
        /// </summary>
        /// <value>The inventory bucket whose contents should be shown.</value>
        [DataMember(Name="inventoryBucketHash", EmitDefaultValue=false)]
        public uint? InventoryBucketHash { get; set; }

        /// <summary>
        /// The methodology to use for sorting items from the flyout.
        /// </summary>
        /// <value>The methodology to use for sorting items from the flyout.</value>
        [DataMember(Name="sortItemsBy", EmitDefaultValue=false)]
        public DestinyDestinyItemSortType SortItemsBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition {\n");
            sb.Append("  Collapsible: ").Append(Collapsible).Append("\n");
            sb.Append("  InventoryBucketHash: ").Append(InventoryBucketHash).Append("\n");
            sb.Append("  SortItemsBy: ").Append(SortItemsBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Collapsible == input.Collapsible ||
                    (this.Collapsible != null &&
                    this.Collapsible.Equals(input.Collapsible))
                ) && 
                (
                    this.InventoryBucketHash == input.InventoryBucketHash ||
                    (this.InventoryBucketHash != null &&
                    this.InventoryBucketHash.Equals(input.InventoryBucketHash))
                ) && 
                (
                    this.SortItemsBy == input.SortItemsBy ||
                    (this.SortItemsBy != null &&
                    this.SortItemsBy.Equals(input.SortItemsBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Collapsible != null)
                    hashCode = hashCode * 59 + this.Collapsible.GetHashCode();
                if (this.InventoryBucketHash != null)
                    hashCode = hashCode * 59 + this.InventoryBucketHash.GetHashCode();
                if (this.SortItemsBy != null)
                    hashCode = hashCode * 59 + this.SortItemsBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
