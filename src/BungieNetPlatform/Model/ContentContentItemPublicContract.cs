/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// ContentContentItemPublicContract
    /// </summary>
    [DataContract]
    public partial class ContentContentItemPublicContract :  IEquatable<ContentContentItemPublicContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentContentItemPublicContract" /> class.
        /// </summary>
        /// <param name="ContentId">ContentId.</param>
        /// <param name="CType">CType.</param>
        /// <param name="CmsPath">CmsPath.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="ModifyDate">ModifyDate.</param>
        /// <param name="AllowComments">AllowComments.</param>
        /// <param name="HasAgeGate">HasAgeGate.</param>
        /// <param name="MinimumAge">MinimumAge.</param>
        /// <param name="RatingImagePath">RatingImagePath.</param>
        /// <param name="Author">Author.</param>
        /// <param name="AutoEnglishPropertyFallback">AutoEnglishPropertyFallback.</param>
        /// <param name="Properties">Firehose content is really a collection of metadata and \&quot;properties\&quot;, which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.  As Cole Porter would have crooned, \&quot;Anything Goes\&quot; with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized..</param>
        /// <param name="Representations">Representations.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="CommentSummary">CommentSummary.</param>
        public ContentContentItemPublicContract(long? ContentId = default(long?), string CType = default(string), string CmsPath = default(string), DateTime? CreationDate = default(DateTime?), DateTime? ModifyDate = default(DateTime?), bool? AllowComments = default(bool?), bool? HasAgeGate = default(bool?), int? MinimumAge = default(int?), string RatingImagePath = default(string), UserGeneralUser Author = default(UserGeneralUser), bool? AutoEnglishPropertyFallback = default(bool?), Dictionary<string, Object> Properties = default(Dictionary<string, Object>), List<ContentContentRepresentation> Representations = default(List<ContentContentRepresentation>), List<string> Tags = default(List<string>), ContentCommentSummary CommentSummary = default(ContentCommentSummary))
        {
            this.ContentId = ContentId;
            this.CType = CType;
            this.CmsPath = CmsPath;
            this.CreationDate = CreationDate;
            this.ModifyDate = ModifyDate;
            this.AllowComments = AllowComments;
            this.HasAgeGate = HasAgeGate;
            this.MinimumAge = MinimumAge;
            this.RatingImagePath = RatingImagePath;
            this.Author = Author;
            this.AutoEnglishPropertyFallback = AutoEnglishPropertyFallback;
            this.Properties = Properties;
            this.Representations = Representations;
            this.Tags = Tags;
            this.CommentSummary = CommentSummary;
        }
        
        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="contentId", EmitDefaultValue=false)]
        public long? ContentId { get; set; }

        /// <summary>
        /// Gets or Sets CType
        /// </summary>
        [DataMember(Name="cType", EmitDefaultValue=false)]
        public string CType { get; set; }

        /// <summary>
        /// Gets or Sets CmsPath
        /// </summary>
        [DataMember(Name="cmsPath", EmitDefaultValue=false)]
        public string CmsPath { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name="modifyDate", EmitDefaultValue=false)]
        public DateTime? ModifyDate { get; set; }

        /// <summary>
        /// Gets or Sets AllowComments
        /// </summary>
        [DataMember(Name="allowComments", EmitDefaultValue=false)]
        public bool? AllowComments { get; set; }

        /// <summary>
        /// Gets or Sets HasAgeGate
        /// </summary>
        [DataMember(Name="hasAgeGate", EmitDefaultValue=false)]
        public bool? HasAgeGate { get; set; }

        /// <summary>
        /// Gets or Sets MinimumAge
        /// </summary>
        [DataMember(Name="minimumAge", EmitDefaultValue=false)]
        public int? MinimumAge { get; set; }

        /// <summary>
        /// Gets or Sets RatingImagePath
        /// </summary>
        [DataMember(Name="ratingImagePath", EmitDefaultValue=false)]
        public string RatingImagePath { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public UserGeneralUser Author { get; set; }

        /// <summary>
        /// Gets or Sets AutoEnglishPropertyFallback
        /// </summary>
        [DataMember(Name="autoEnglishPropertyFallback", EmitDefaultValue=false)]
        public bool? AutoEnglishPropertyFallback { get; set; }

        /// <summary>
        /// Firehose content is really a collection of metadata and \&quot;properties\&quot;, which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.  As Cole Porter would have crooned, \&quot;Anything Goes\&quot; with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized.
        /// </summary>
        /// <value>Firehose content is really a collection of metadata and \&quot;properties\&quot;, which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.  As Cole Porter would have crooned, \&quot;Anything Goes\&quot; with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, Object> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Representations
        /// </summary>
        [DataMember(Name="representations", EmitDefaultValue=false)]
        public List<ContentContentRepresentation> Representations { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets CommentSummary
        /// </summary>
        [DataMember(Name="commentSummary", EmitDefaultValue=false)]
        public ContentCommentSummary CommentSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentContentItemPublicContract {\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  CType: ").Append(CType).Append("\n");
            sb.Append("  CmsPath: ").Append(CmsPath).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  AllowComments: ").Append(AllowComments).Append("\n");
            sb.Append("  HasAgeGate: ").Append(HasAgeGate).Append("\n");
            sb.Append("  MinimumAge: ").Append(MinimumAge).Append("\n");
            sb.Append("  RatingImagePath: ").Append(RatingImagePath).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  AutoEnglishPropertyFallback: ").Append(AutoEnglishPropertyFallback).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Representations: ").Append(Representations).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CommentSummary: ").Append(CommentSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentContentItemPublicContract);
        }

        /// <summary>
        /// Returns true if ContentContentItemPublicContract instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentContentItemPublicContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentContentItemPublicContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentId == input.ContentId ||
                    (this.ContentId != null &&
                    this.ContentId.Equals(input.ContentId))
                ) && 
                (
                    this.CType == input.CType ||
                    (this.CType != null &&
                    this.CType.Equals(input.CType))
                ) && 
                (
                    this.CmsPath == input.CmsPath ||
                    (this.CmsPath != null &&
                    this.CmsPath.Equals(input.CmsPath))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.AllowComments == input.AllowComments ||
                    (this.AllowComments != null &&
                    this.AllowComments.Equals(input.AllowComments))
                ) && 
                (
                    this.HasAgeGate == input.HasAgeGate ||
                    (this.HasAgeGate != null &&
                    this.HasAgeGate.Equals(input.HasAgeGate))
                ) && 
                (
                    this.MinimumAge == input.MinimumAge ||
                    (this.MinimumAge != null &&
                    this.MinimumAge.Equals(input.MinimumAge))
                ) && 
                (
                    this.RatingImagePath == input.RatingImagePath ||
                    (this.RatingImagePath != null &&
                    this.RatingImagePath.Equals(input.RatingImagePath))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.AutoEnglishPropertyFallback == input.AutoEnglishPropertyFallback ||
                    (this.AutoEnglishPropertyFallback != null &&
                    this.AutoEnglishPropertyFallback.Equals(input.AutoEnglishPropertyFallback))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Representations == input.Representations ||
                    this.Representations != null &&
                    this.Representations.SequenceEqual(input.Representations)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.CommentSummary == input.CommentSummary ||
                    (this.CommentSummary != null &&
                    this.CommentSummary.Equals(input.CommentSummary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentId != null)
                    hashCode = hashCode * 59 + this.ContentId.GetHashCode();
                if (this.CType != null)
                    hashCode = hashCode * 59 + this.CType.GetHashCode();
                if (this.CmsPath != null)
                    hashCode = hashCode * 59 + this.CmsPath.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.ModifyDate != null)
                    hashCode = hashCode * 59 + this.ModifyDate.GetHashCode();
                if (this.AllowComments != null)
                    hashCode = hashCode * 59 + this.AllowComments.GetHashCode();
                if (this.HasAgeGate != null)
                    hashCode = hashCode * 59 + this.HasAgeGate.GetHashCode();
                if (this.MinimumAge != null)
                    hashCode = hashCode * 59 + this.MinimumAge.GetHashCode();
                if (this.RatingImagePath != null)
                    hashCode = hashCode * 59 + this.RatingImagePath.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.AutoEnglishPropertyFallback != null)
                    hashCode = hashCode * 59 + this.AutoEnglishPropertyFallback.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Representations != null)
                    hashCode = hashCode * 59 + this.Representations.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.CommentSummary != null)
                    hashCode = hashCode * 59 + this.CommentSummary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
