/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// DestinyHistoricalStatsDestinyPlayer
    /// </summary>
    [DataContract]
    public partial class DestinyHistoricalStatsDestinyPlayer :  IEquatable<DestinyHistoricalStatsDestinyPlayer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyHistoricalStatsDestinyPlayer" /> class.
        /// </summary>
        /// <param name="DestinyUserInfo">Details about the player as they are known in game (platform display name, Destiny emblem).</param>
        /// <param name="CharacterClass">Class of the character if applicable and available..</param>
        /// <param name="CharacterLevel">Level of the character if available. Zero if it is not available..</param>
        /// <param name="LightLevel">Light Level of the character if available. Zero if it is not available..</param>
        /// <param name="BungieNetUserInfo">Details about the player as they are known on BungieNet. This will be undefined if the player has marked their credential private, or does not have a BungieNet account..</param>
        /// <param name="ClanName">Current clan name for the player. This value may be null or an empty string if the user does not have a clan..</param>
        /// <param name="ClanTag">Current clan tag for the player. This value may be null or an empty string if the user does not have a clan..</param>
        public DestinyHistoricalStatsDestinyPlayer(UserUserInfoCard DestinyUserInfo = default(UserUserInfoCard), string CharacterClass = default(string), int? CharacterLevel = default(int?), int? LightLevel = default(int?), UserUserInfoCard BungieNetUserInfo = default(UserUserInfoCard), string ClanName = default(string), string ClanTag = default(string))
        {
            this.DestinyUserInfo = DestinyUserInfo;
            this.CharacterClass = CharacterClass;
            this.CharacterLevel = CharacterLevel;
            this.LightLevel = LightLevel;
            this.BungieNetUserInfo = BungieNetUserInfo;
            this.ClanName = ClanName;
            this.ClanTag = ClanTag;
        }
        
        /// <summary>
        /// Details about the player as they are known in game (platform display name, Destiny emblem)
        /// </summary>
        /// <value>Details about the player as they are known in game (platform display name, Destiny emblem)</value>
        [DataMember(Name="destinyUserInfo", EmitDefaultValue=false)]
        public UserUserInfoCard DestinyUserInfo { get; set; }

        /// <summary>
        /// Class of the character if applicable and available.
        /// </summary>
        /// <value>Class of the character if applicable and available.</value>
        [DataMember(Name="characterClass", EmitDefaultValue=false)]
        public string CharacterClass { get; set; }

        /// <summary>
        /// Level of the character if available. Zero if it is not available.
        /// </summary>
        /// <value>Level of the character if available. Zero if it is not available.</value>
        [DataMember(Name="characterLevel", EmitDefaultValue=false)]
        public int? CharacterLevel { get; set; }

        /// <summary>
        /// Light Level of the character if available. Zero if it is not available.
        /// </summary>
        /// <value>Light Level of the character if available. Zero if it is not available.</value>
        [DataMember(Name="lightLevel", EmitDefaultValue=false)]
        public int? LightLevel { get; set; }

        /// <summary>
        /// Details about the player as they are known on BungieNet. This will be undefined if the player has marked their credential private, or does not have a BungieNet account.
        /// </summary>
        /// <value>Details about the player as they are known on BungieNet. This will be undefined if the player has marked their credential private, or does not have a BungieNet account.</value>
        [DataMember(Name="bungieNetUserInfo", EmitDefaultValue=false)]
        public UserUserInfoCard BungieNetUserInfo { get; set; }

        /// <summary>
        /// Current clan name for the player. This value may be null or an empty string if the user does not have a clan.
        /// </summary>
        /// <value>Current clan name for the player. This value may be null or an empty string if the user does not have a clan.</value>
        [DataMember(Name="clanName", EmitDefaultValue=false)]
        public string ClanName { get; set; }

        /// <summary>
        /// Current clan tag for the player. This value may be null or an empty string if the user does not have a clan.
        /// </summary>
        /// <value>Current clan tag for the player. This value may be null or an empty string if the user does not have a clan.</value>
        [DataMember(Name="clanTag", EmitDefaultValue=false)]
        public string ClanTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyHistoricalStatsDestinyPlayer {\n");
            sb.Append("  DestinyUserInfo: ").Append(DestinyUserInfo).Append("\n");
            sb.Append("  CharacterClass: ").Append(CharacterClass).Append("\n");
            sb.Append("  CharacterLevel: ").Append(CharacterLevel).Append("\n");
            sb.Append("  LightLevel: ").Append(LightLevel).Append("\n");
            sb.Append("  BungieNetUserInfo: ").Append(BungieNetUserInfo).Append("\n");
            sb.Append("  ClanName: ").Append(ClanName).Append("\n");
            sb.Append("  ClanTag: ").Append(ClanTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyHistoricalStatsDestinyPlayer);
        }

        /// <summary>
        /// Returns true if DestinyHistoricalStatsDestinyPlayer instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyHistoricalStatsDestinyPlayer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyHistoricalStatsDestinyPlayer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestinyUserInfo == input.DestinyUserInfo ||
                    (this.DestinyUserInfo != null &&
                    this.DestinyUserInfo.Equals(input.DestinyUserInfo))
                ) && 
                (
                    this.CharacterClass == input.CharacterClass ||
                    (this.CharacterClass != null &&
                    this.CharacterClass.Equals(input.CharacterClass))
                ) && 
                (
                    this.CharacterLevel == input.CharacterLevel ||
                    (this.CharacterLevel != null &&
                    this.CharacterLevel.Equals(input.CharacterLevel))
                ) && 
                (
                    this.LightLevel == input.LightLevel ||
                    (this.LightLevel != null &&
                    this.LightLevel.Equals(input.LightLevel))
                ) && 
                (
                    this.BungieNetUserInfo == input.BungieNetUserInfo ||
                    (this.BungieNetUserInfo != null &&
                    this.BungieNetUserInfo.Equals(input.BungieNetUserInfo))
                ) && 
                (
                    this.ClanName == input.ClanName ||
                    (this.ClanName != null &&
                    this.ClanName.Equals(input.ClanName))
                ) && 
                (
                    this.ClanTag == input.ClanTag ||
                    (this.ClanTag != null &&
                    this.ClanTag.Equals(input.ClanTag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinyUserInfo != null)
                    hashCode = hashCode * 59 + this.DestinyUserInfo.GetHashCode();
                if (this.CharacterClass != null)
                    hashCode = hashCode * 59 + this.CharacterClass.GetHashCode();
                if (this.CharacterLevel != null)
                    hashCode = hashCode * 59 + this.CharacterLevel.GetHashCode();
                if (this.LightLevel != null)
                    hashCode = hashCode * 59 + this.LightLevel.GetHashCode();
                if (this.BungieNetUserInfo != null)
                    hashCode = hashCode * 59 + this.BungieNetUserInfo.GetHashCode();
                if (this.ClanName != null)
                    hashCode = hashCode * 59 + this.ClanName.GetHashCode();
                if (this.ClanTag != null)
                    hashCode = hashCode * 59 + this.ClanTag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
