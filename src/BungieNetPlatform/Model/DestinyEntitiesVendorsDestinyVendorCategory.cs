/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Information about the category and items currently sold in that category.
    /// </summary>
    [DataContract]
    public partial class DestinyEntitiesVendorsDestinyVendorCategory :  IEquatable<DestinyEntitiesVendorsDestinyVendorCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyEntitiesVendorsDestinyVendorCategory" /> class.
        /// </summary>
        /// <param name="CategoryIndex">An index into the DestinyVendorDefinition.categories property, so you can grab the display data for this category..</param>
        /// <param name="ItemIndexes">An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned..</param>
        public DestinyEntitiesVendorsDestinyVendorCategory(int? CategoryIndex = default(int?), List<int?> ItemIndexes = default(List<int?>))
        {
            this.CategoryIndex = CategoryIndex;
            this.ItemIndexes = ItemIndexes;
        }
        
        /// <summary>
        /// An index into the DestinyVendorDefinition.categories property, so you can grab the display data for this category.
        /// </summary>
        /// <value>An index into the DestinyVendorDefinition.categories property, so you can grab the display data for this category.</value>
        [DataMember(Name="categoryIndex", EmitDefaultValue=false)]
        public int? CategoryIndex { get; set; }

        /// <summary>
        /// An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned.
        /// </summary>
        /// <value>An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned.</value>
        [DataMember(Name="itemIndexes", EmitDefaultValue=false)]
        public List<int?> ItemIndexes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyEntitiesVendorsDestinyVendorCategory {\n");
            sb.Append("  CategoryIndex: ").Append(CategoryIndex).Append("\n");
            sb.Append("  ItemIndexes: ").Append(ItemIndexes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyEntitiesVendorsDestinyVendorCategory);
        }

        /// <summary>
        /// Returns true if DestinyEntitiesVendorsDestinyVendorCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyEntitiesVendorsDestinyVendorCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyEntitiesVendorsDestinyVendorCategory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryIndex == input.CategoryIndex ||
                    (this.CategoryIndex != null &&
                    this.CategoryIndex.Equals(input.CategoryIndex))
                ) && 
                (
                    this.ItemIndexes == input.ItemIndexes ||
                    this.ItemIndexes != null &&
                    this.ItemIndexes.SequenceEqual(input.ItemIndexes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryIndex != null)
                    hashCode = hashCode * 59 + this.CategoryIndex.GetHashCode();
                if (this.ItemIndexes != null)
                    hashCode = hashCode * 59 + this.ItemIndexes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
