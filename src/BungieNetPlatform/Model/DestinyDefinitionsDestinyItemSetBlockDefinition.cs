/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Primarily for Quests, this is the definition of properties related to the item if it is a quest and its various quest steps.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyItemSetBlockDefinition :  IEquatable<DestinyDefinitionsDestinyItemSetBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemSetBlockDefinition" /> class.
        /// </summary>
        /// <param name="ItemList">A collection of hashes of set items, for items such as Quest Metadata items that possess this data..</param>
        /// <param name="RequireOrderedSetItemAdd">If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest..</param>
        /// <param name="SetIsFeatured">If true, the UI should treat this quest as \&quot;featured\&quot;.</param>
        /// <param name="SetType">A string identifier we can use to attempt to identify the category of the Quest..</param>
        public DestinyDefinitionsDestinyItemSetBlockDefinition(List<DestinyDefinitionsDestinyItemSetBlockEntryDefinition> ItemList = default(List<DestinyDefinitionsDestinyItemSetBlockEntryDefinition>), bool? RequireOrderedSetItemAdd = default(bool?), bool? SetIsFeatured = default(bool?), string SetType = default(string))
        {
            this.ItemList = ItemList;
            this.RequireOrderedSetItemAdd = RequireOrderedSetItemAdd;
            this.SetIsFeatured = SetIsFeatured;
            this.SetType = SetType;
        }
        
        /// <summary>
        /// A collection of hashes of set items, for items such as Quest Metadata items that possess this data.
        /// </summary>
        /// <value>A collection of hashes of set items, for items such as Quest Metadata items that possess this data.</value>
        [DataMember(Name="itemList", EmitDefaultValue=false)]
        public List<DestinyDefinitionsDestinyItemSetBlockEntryDefinition> ItemList { get; set; }

        /// <summary>
        /// If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest.
        /// </summary>
        /// <value>If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest.</value>
        [DataMember(Name="requireOrderedSetItemAdd", EmitDefaultValue=false)]
        public bool? RequireOrderedSetItemAdd { get; set; }

        /// <summary>
        /// If true, the UI should treat this quest as \&quot;featured\&quot;
        /// </summary>
        /// <value>If true, the UI should treat this quest as \&quot;featured\&quot;</value>
        [DataMember(Name="setIsFeatured", EmitDefaultValue=false)]
        public bool? SetIsFeatured { get; set; }

        /// <summary>
        /// A string identifier we can use to attempt to identify the category of the Quest.
        /// </summary>
        /// <value>A string identifier we can use to attempt to identify the category of the Quest.</value>
        [DataMember(Name="setType", EmitDefaultValue=false)]
        public string SetType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemSetBlockDefinition {\n");
            sb.Append("  ItemList: ").Append(ItemList).Append("\n");
            sb.Append("  RequireOrderedSetItemAdd: ").Append(RequireOrderedSetItemAdd).Append("\n");
            sb.Append("  SetIsFeatured: ").Append(SetIsFeatured).Append("\n");
            sb.Append("  SetType: ").Append(SetType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemSetBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemSetBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemSetBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemSetBlockDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemList == input.ItemList ||
                    this.ItemList != null &&
                    this.ItemList.SequenceEqual(input.ItemList)
                ) && 
                (
                    this.RequireOrderedSetItemAdd == input.RequireOrderedSetItemAdd ||
                    (this.RequireOrderedSetItemAdd != null &&
                    this.RequireOrderedSetItemAdd.Equals(input.RequireOrderedSetItemAdd))
                ) && 
                (
                    this.SetIsFeatured == input.SetIsFeatured ||
                    (this.SetIsFeatured != null &&
                    this.SetIsFeatured.Equals(input.SetIsFeatured))
                ) && 
                (
                    this.SetType == input.SetType ||
                    (this.SetType != null &&
                    this.SetType.Equals(input.SetType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemList != null)
                    hashCode = hashCode * 59 + this.ItemList.GetHashCode();
                if (this.RequireOrderedSetItemAdd != null)
                    hashCode = hashCode * 59 + this.RequireOrderedSetItemAdd.GetHashCode();
                if (this.SetIsFeatured != null)
                    hashCode = hashCode * 59 + this.SetIsFeatured.GetHashCode();
                if (this.SetType != null)
                    hashCode = hashCode * 59 + this.SetType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
