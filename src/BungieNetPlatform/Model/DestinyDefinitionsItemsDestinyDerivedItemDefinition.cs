/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// This is a reference to, and summary data for, a specific item that you can get as a result of Using or Acquiring some other Item (For example, this could be summary information for an Emote that you can get by opening an an Eververse Box) See DestinyDerivedItemCategoryDefinition for more information.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsItemsDestinyDerivedItemDefinition :  IEquatable<DestinyDefinitionsItemsDestinyDerivedItemDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsItemsDestinyDerivedItemDefinition" /> class.
        /// </summary>
        /// <param name="ItemHash">The hash for the DestinyInventoryItemDefinition of this derived item, if there is one. Sometimes we are given this information as a manual override, in which case there won&#39;t be an actual DestinyInventoryItemDefinition for what we display, but you can still show the strings from this object itself..</param>
        /// <param name="ItemName">The name of the derived item..</param>
        /// <param name="ItemDetail">Additional details about the derived item, in addition to the description..</param>
        /// <param name="ItemDescription">A brief description of the item..</param>
        /// <param name="IconPath">An icon for the item..</param>
        /// <param name="VendorItemIndex">If the item was derived from a \&quot;Preview Vendor\&quot;, this will be an index into the DestinyVendorDefinition&#39;s itemList property. Otherwise, -1..</param>
        public DestinyDefinitionsItemsDestinyDerivedItemDefinition(uint? ItemHash = default(uint?), string ItemName = default(string), string ItemDetail = default(string), string ItemDescription = default(string), string IconPath = default(string), int? VendorItemIndex = default(int?))
        {
            this.ItemHash = ItemHash;
            this.ItemName = ItemName;
            this.ItemDetail = ItemDetail;
            this.ItemDescription = ItemDescription;
            this.IconPath = IconPath;
            this.VendorItemIndex = VendorItemIndex;
        }
        
        /// <summary>
        /// The hash for the DestinyInventoryItemDefinition of this derived item, if there is one. Sometimes we are given this information as a manual override, in which case there won&#39;t be an actual DestinyInventoryItemDefinition for what we display, but you can still show the strings from this object itself.
        /// </summary>
        /// <value>The hash for the DestinyInventoryItemDefinition of this derived item, if there is one. Sometimes we are given this information as a manual override, in which case there won&#39;t be an actual DestinyInventoryItemDefinition for what we display, but you can still show the strings from this object itself.</value>
        [DataMember(Name="itemHash", EmitDefaultValue=false)]
        public uint? ItemHash { get; set; }

        /// <summary>
        /// The name of the derived item.
        /// </summary>
        /// <value>The name of the derived item.</value>
        [DataMember(Name="itemName", EmitDefaultValue=false)]
        public string ItemName { get; set; }

        /// <summary>
        /// Additional details about the derived item, in addition to the description.
        /// </summary>
        /// <value>Additional details about the derived item, in addition to the description.</value>
        [DataMember(Name="itemDetail", EmitDefaultValue=false)]
        public string ItemDetail { get; set; }

        /// <summary>
        /// A brief description of the item.
        /// </summary>
        /// <value>A brief description of the item.</value>
        [DataMember(Name="itemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// An icon for the item.
        /// </summary>
        /// <value>An icon for the item.</value>
        [DataMember(Name="iconPath", EmitDefaultValue=false)]
        public string IconPath { get; set; }

        /// <summary>
        /// If the item was derived from a \&quot;Preview Vendor\&quot;, this will be an index into the DestinyVendorDefinition&#39;s itemList property. Otherwise, -1.
        /// </summary>
        /// <value>If the item was derived from a \&quot;Preview Vendor\&quot;, this will be an index into the DestinyVendorDefinition&#39;s itemList property. Otherwise, -1.</value>
        [DataMember(Name="vendorItemIndex", EmitDefaultValue=false)]
        public int? VendorItemIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsItemsDestinyDerivedItemDefinition {\n");
            sb.Append("  ItemHash: ").Append(ItemHash).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemDetail: ").Append(ItemDetail).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  IconPath: ").Append(IconPath).Append("\n");
            sb.Append("  VendorItemIndex: ").Append(VendorItemIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsItemsDestinyDerivedItemDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsItemsDestinyDerivedItemDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsItemsDestinyDerivedItemDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsItemsDestinyDerivedItemDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemHash == input.ItemHash ||
                    (this.ItemHash != null &&
                    this.ItemHash.Equals(input.ItemHash))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.ItemDetail == input.ItemDetail ||
                    (this.ItemDetail != null &&
                    this.ItemDetail.Equals(input.ItemDetail))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.IconPath == input.IconPath ||
                    (this.IconPath != null &&
                    this.IconPath.Equals(input.IconPath))
                ) && 
                (
                    this.VendorItemIndex == input.VendorItemIndex ||
                    (this.VendorItemIndex != null &&
                    this.VendorItemIndex.Equals(input.VendorItemIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemHash != null)
                    hashCode = hashCode * 59 + this.ItemHash.GetHashCode();
                if (this.ItemName != null)
                    hashCode = hashCode * 59 + this.ItemName.GetHashCode();
                if (this.ItemDetail != null)
                    hashCode = hashCode * 59 + this.ItemDetail.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.IconPath != null)
                    hashCode = hashCode * 59 + this.IconPath.GetHashCode();
                if (this.VendorItemIndex != null)
                    hashCode = hashCode * 59 + this.VendorItemIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
