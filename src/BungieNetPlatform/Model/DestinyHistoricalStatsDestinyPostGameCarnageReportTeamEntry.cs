/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry
    /// </summary>
    [DataContract]
    public partial class DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry :  IEquatable<DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry" /> class.
        /// </summary>
        /// <param name="TeamId">Integer ID for the team..</param>
        /// <param name="Standing">Team&#39;s standing relative to other teams..</param>
        /// <param name="Score">Score earned by the team.</param>
        /// <param name="TeamName">Alpha or Bravo.</param>
        public DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry(int? TeamId = default(int?), DestinyHistoricalStatsDestinyHistoricalStatsValue Standing = default(DestinyHistoricalStatsDestinyHistoricalStatsValue), DestinyHistoricalStatsDestinyHistoricalStatsValue Score = default(DestinyHistoricalStatsDestinyHistoricalStatsValue), string TeamName = default(string))
        {
            this.TeamId = TeamId;
            this.Standing = Standing;
            this.Score = Score;
            this.TeamName = TeamName;
        }
        
        /// <summary>
        /// Integer ID for the team.
        /// </summary>
        /// <value>Integer ID for the team.</value>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public int? TeamId { get; set; }

        /// <summary>
        /// Team&#39;s standing relative to other teams.
        /// </summary>
        /// <value>Team&#39;s standing relative to other teams.</value>
        [DataMember(Name="standing", EmitDefaultValue=false)]
        public DestinyHistoricalStatsDestinyHistoricalStatsValue Standing { get; set; }

        /// <summary>
        /// Score earned by the team
        /// </summary>
        /// <value>Score earned by the team</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public DestinyHistoricalStatsDestinyHistoricalStatsValue Score { get; set; }

        /// <summary>
        /// Alpha or Bravo
        /// </summary>
        /// <value>Alpha or Bravo</value>
        [DataMember(Name="teamName", EmitDefaultValue=false)]
        public string TeamName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Standing: ").Append(Standing).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  TeamName: ").Append(TeamName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry);
        }

        /// <summary>
        /// Returns true if DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.Standing == input.Standing ||
                    (this.Standing != null &&
                    this.Standing.Equals(input.Standing))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.TeamName == input.TeamName ||
                    (this.TeamName != null &&
                    this.TeamName.Equals(input.TeamName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.Standing != null)
                    hashCode = hashCode * 59 + this.Standing.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.TeamName != null)
                    hashCode = hashCode * 59 + this.TeamName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
