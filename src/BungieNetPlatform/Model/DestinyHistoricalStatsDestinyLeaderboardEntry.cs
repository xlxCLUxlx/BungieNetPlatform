/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// DestinyHistoricalStatsDestinyLeaderboardEntry
    /// </summary>
    [DataContract]
    public partial class DestinyHistoricalStatsDestinyLeaderboardEntry :  IEquatable<DestinyHistoricalStatsDestinyLeaderboardEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyHistoricalStatsDestinyLeaderboardEntry" /> class.
        /// </summary>
        /// <param name="Rank">Where this player ranks on the leaderboard. A value of 1 is the top rank..</param>
        /// <param name="Player">Identity details of the player.</param>
        /// <param name="CharacterId">ID of the player&#39;s best character for the reported stat..</param>
        /// <param name="Value">Value of the stat for this player.</param>
        public DestinyHistoricalStatsDestinyLeaderboardEntry(int? Rank = default(int?), DestinyHistoricalStatsDestinyPlayer Player = default(DestinyHistoricalStatsDestinyPlayer), long? CharacterId = default(long?), DestinyHistoricalStatsDestinyHistoricalStatsValue Value = default(DestinyHistoricalStatsDestinyHistoricalStatsValue))
        {
            this.Rank = Rank;
            this.Player = Player;
            this.CharacterId = CharacterId;
            this.Value = Value;
        }
        
        /// <summary>
        /// Where this player ranks on the leaderboard. A value of 1 is the top rank.
        /// </summary>
        /// <value>Where this player ranks on the leaderboard. A value of 1 is the top rank.</value>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public int? Rank { get; set; }

        /// <summary>
        /// Identity details of the player
        /// </summary>
        /// <value>Identity details of the player</value>
        [DataMember(Name="player", EmitDefaultValue=false)]
        public DestinyHistoricalStatsDestinyPlayer Player { get; set; }

        /// <summary>
        /// ID of the player&#39;s best character for the reported stat.
        /// </summary>
        /// <value>ID of the player&#39;s best character for the reported stat.</value>
        [DataMember(Name="characterId", EmitDefaultValue=false)]
        public long? CharacterId { get; set; }

        /// <summary>
        /// Value of the stat for this player
        /// </summary>
        /// <value>Value of the stat for this player</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public DestinyHistoricalStatsDestinyHistoricalStatsValue Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyHistoricalStatsDestinyLeaderboardEntry {\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyHistoricalStatsDestinyLeaderboardEntry);
        }

        /// <summary>
        /// Returns true if DestinyHistoricalStatsDestinyLeaderboardEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyHistoricalStatsDestinyLeaderboardEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyHistoricalStatsDestinyLeaderboardEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Player == input.Player ||
                    (this.Player != null &&
                    this.Player.Equals(input.Player))
                ) && 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Player != null)
                    hashCode = hashCode * 59 + this.Player.GetHashCode();
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
