/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// A response containing all of the components for a vendor.
    /// </summary>
    [DataContract]
    public partial class DestinyResponsesDestinyVendorResponse :  IEquatable<DestinyResponsesDestinyVendorResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyResponsesDestinyVendorResponse" /> class.
        /// </summary>
        /// <param name="Vendor">The base properties of the vendor.  COMPONENT TYPE: Vendors.</param>
        /// <param name="Categories">Categories that the vendor has available, and references to the sales therein.  COMPONENT TYPE: VendorCategories.</param>
        /// <param name="Sales">Sales, keyed by the vendorItemIndex of the item being sold.  COMPONENT TYPE: VendorSales.</param>
        /// <param name="Items">Item components, keyed by the vendorItemIndex of the active sale items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.].</param>
        public DestinyResponsesDestinyVendorResponse(SingleComponentResponseOfDestinyVendorComponent Vendor = default(SingleComponentResponseOfDestinyVendorComponent), SingleComponentResponseOfDestinyVendorCategoriesComponent Categories = default(SingleComponentResponseOfDestinyVendorCategoriesComponent), DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent Sales = default(DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent), DestinyItemComponentSetOfint32 Items = default(DestinyItemComponentSetOfint32))
        {
            this.Vendor = Vendor;
            this.Categories = Categories;
            this.Sales = Sales;
            this.Items = Items;
        }
        
        /// <summary>
        /// The base properties of the vendor.  COMPONENT TYPE: Vendors
        /// </summary>
        /// <value>The base properties of the vendor.  COMPONENT TYPE: Vendors</value>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyVendorComponent Vendor { get; set; }

        /// <summary>
        /// Categories that the vendor has available, and references to the sales therein.  COMPONENT TYPE: VendorCategories
        /// </summary>
        /// <value>Categories that the vendor has available, and references to the sales therein.  COMPONENT TYPE: VendorCategories</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyVendorCategoriesComponent Categories { get; set; }

        /// <summary>
        /// Sales, keyed by the vendorItemIndex of the item being sold.  COMPONENT TYPE: VendorSales
        /// </summary>
        /// <value>Sales, keyed by the vendorItemIndex of the item being sold.  COMPONENT TYPE: VendorSales</value>
        [DataMember(Name="sales", EmitDefaultValue=false)]
        public DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent Sales { get; set; }

        /// <summary>
        /// Item components, keyed by the vendorItemIndex of the active sale items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
        /// </summary>
        /// <value>Item components, keyed by the vendorItemIndex of the active sale items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public DestinyItemComponentSetOfint32 Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyResponsesDestinyVendorResponse {\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyResponsesDestinyVendorResponse);
        }

        /// <summary>
        /// Returns true if DestinyResponsesDestinyVendorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyResponsesDestinyVendorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyResponsesDestinyVendorResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.Categories == input.Categories ||
                    (this.Categories != null &&
                    this.Categories.Equals(input.Categories))
                ) && 
                (
                    this.Sales == input.Sales ||
                    (this.Sales != null &&
                    this.Sales.Equals(input.Sales))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Vendor != null)
                    hashCode = hashCode * 59 + this.Vendor.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Sales != null)
                    hashCode = hashCode * 59 + this.Sales.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
