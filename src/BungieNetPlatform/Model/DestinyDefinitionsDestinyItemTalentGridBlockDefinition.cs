/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// This defines information that can only come from a talent grid on an item. Items mostly have negligible talent grid data these days, but instanced items still retain grids as a source for some of this common information.  Builds/Subclasses are the only items left that still have talent grids with meaningful Nodes.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyItemTalentGridBlockDefinition :  IEquatable<DestinyDefinitionsDestinyItemTalentGridBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemTalentGridBlockDefinition" /> class.
        /// </summary>
        /// <param name="TalentGridHash">The hash identifier of the DestinyTalentGridDefinition attached to this item..</param>
        /// <param name="ItemDetailString">This is meant to be a subtitle for looking at the talent grid. In practice, somewhat frustratingly, this always merely says the localized word for \&quot;Details\&quot;. Great. Maybe it&#39;ll have more if talent grids ever get used for more than builds and subclasses again..</param>
        /// <param name="BuildName">A shortcut string identifier for the \&quot;build\&quot; in question, if this talent grid has an associated build. Doesn&#39;t map to anything we can expose at the moment..</param>
        /// <param name="HudDamageType">If the talent grid implies a damage type, this is the enum value for that damage type..</param>
        /// <param name="HudIcon">If the talent grid has a special icon that&#39;s shown in the game UI (like builds, funny that), this is the identifier for that icon. Sadly, we don&#39;t actually get that icon right now. I&#39;ll be looking to replace this with a path to the actual icon itself..</param>
        public DestinyDefinitionsDestinyItemTalentGridBlockDefinition(uint? TalentGridHash = default(uint?), string ItemDetailString = default(string), string BuildName = default(string), DestinyDamageType HudDamageType = default(DestinyDamageType), string HudIcon = default(string))
        {
            this.TalentGridHash = TalentGridHash;
            this.ItemDetailString = ItemDetailString;
            this.BuildName = BuildName;
            this.HudDamageType = HudDamageType;
            this.HudIcon = HudIcon;
        }
        
        /// <summary>
        /// The hash identifier of the DestinyTalentGridDefinition attached to this item.
        /// </summary>
        /// <value>The hash identifier of the DestinyTalentGridDefinition attached to this item.</value>
        [DataMember(Name="talentGridHash", EmitDefaultValue=false)]
        public uint? TalentGridHash { get; set; }

        /// <summary>
        /// This is meant to be a subtitle for looking at the talent grid. In practice, somewhat frustratingly, this always merely says the localized word for \&quot;Details\&quot;. Great. Maybe it&#39;ll have more if talent grids ever get used for more than builds and subclasses again.
        /// </summary>
        /// <value>This is meant to be a subtitle for looking at the talent grid. In practice, somewhat frustratingly, this always merely says the localized word for \&quot;Details\&quot;. Great. Maybe it&#39;ll have more if talent grids ever get used for more than builds and subclasses again.</value>
        [DataMember(Name="itemDetailString", EmitDefaultValue=false)]
        public string ItemDetailString { get; set; }

        /// <summary>
        /// A shortcut string identifier for the \&quot;build\&quot; in question, if this talent grid has an associated build. Doesn&#39;t map to anything we can expose at the moment.
        /// </summary>
        /// <value>A shortcut string identifier for the \&quot;build\&quot; in question, if this talent grid has an associated build. Doesn&#39;t map to anything we can expose at the moment.</value>
        [DataMember(Name="buildName", EmitDefaultValue=false)]
        public string BuildName { get; set; }

        /// <summary>
        /// If the talent grid implies a damage type, this is the enum value for that damage type.
        /// </summary>
        /// <value>If the talent grid implies a damage type, this is the enum value for that damage type.</value>
        [DataMember(Name="hudDamageType", EmitDefaultValue=false)]
        public DestinyDamageType HudDamageType { get; set; }

        /// <summary>
        /// If the talent grid has a special icon that&#39;s shown in the game UI (like builds, funny that), this is the identifier for that icon. Sadly, we don&#39;t actually get that icon right now. I&#39;ll be looking to replace this with a path to the actual icon itself.
        /// </summary>
        /// <value>If the talent grid has a special icon that&#39;s shown in the game UI (like builds, funny that), this is the identifier for that icon. Sadly, we don&#39;t actually get that icon right now. I&#39;ll be looking to replace this with a path to the actual icon itself.</value>
        [DataMember(Name="hudIcon", EmitDefaultValue=false)]
        public string HudIcon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemTalentGridBlockDefinition {\n");
            sb.Append("  TalentGridHash: ").Append(TalentGridHash).Append("\n");
            sb.Append("  ItemDetailString: ").Append(ItemDetailString).Append("\n");
            sb.Append("  BuildName: ").Append(BuildName).Append("\n");
            sb.Append("  HudDamageType: ").Append(HudDamageType).Append("\n");
            sb.Append("  HudIcon: ").Append(HudIcon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemTalentGridBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemTalentGridBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemTalentGridBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemTalentGridBlockDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TalentGridHash == input.TalentGridHash ||
                    (this.TalentGridHash != null &&
                    this.TalentGridHash.Equals(input.TalentGridHash))
                ) && 
                (
                    this.ItemDetailString == input.ItemDetailString ||
                    (this.ItemDetailString != null &&
                    this.ItemDetailString.Equals(input.ItemDetailString))
                ) && 
                (
                    this.BuildName == input.BuildName ||
                    (this.BuildName != null &&
                    this.BuildName.Equals(input.BuildName))
                ) && 
                (
                    this.HudDamageType == input.HudDamageType ||
                    (this.HudDamageType != null &&
                    this.HudDamageType.Equals(input.HudDamageType))
                ) && 
                (
                    this.HudIcon == input.HudIcon ||
                    (this.HudIcon != null &&
                    this.HudIcon.Equals(input.HudIcon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TalentGridHash != null)
                    hashCode = hashCode * 59 + this.TalentGridHash.GetHashCode();
                if (this.ItemDetailString != null)
                    hashCode = hashCode * 59 + this.ItemDetailString.GetHashCode();
                if (this.BuildName != null)
                    hashCode = hashCode * 59 + this.BuildName.GetHashCode();
                if (this.HudDamageType != null)
                    hashCode = hashCode * 59 + this.HudDamageType.GetHashCode();
                if (this.HudIcon != null)
                    hashCode = hashCode * 59 + this.HudIcon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
