/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyEquippingBlockDefinition :  IEquatable<DestinyDefinitionsDestinyEquippingBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyEquippingBlockDefinition" /> class.
        /// </summary>
        /// <param name="GearsetItemHash">If the item is part of a gearset, this is a reference to that gearset item..</param>
        /// <param name="UniqueLabel">If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren&#39;t allowed to equip more than one Exotic Weapon, that&#39;s because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item&#39;s uniqueLabel vs. all other already equipped items (other than the item in the slot that&#39;s about to be occupied)..</param>
        /// <param name="UniqueLabelHash">The hash of that unique label. Does not point to a specific definition..</param>
        /// <param name="EquipmentSlotTypeHash">An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped..</param>
        /// <param name="Attributes">These are custom attributes on the equippability of the item.  For now, this can only be \&quot;equip on acquire\&quot;, which would mean that the item will be automatically equipped as soon as you pick it up..</param>
        /// <param name="DisplayStrings">These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions..</param>
        public DestinyDefinitionsDestinyEquippingBlockDefinition(uint? GearsetItemHash = default(uint?), string UniqueLabel = default(string), uint? UniqueLabelHash = default(uint?), uint? EquipmentSlotTypeHash = default(uint?), DestinyEquippingItemBlockAttributes Attributes = default(DestinyEquippingItemBlockAttributes), List<string> DisplayStrings = default(List<string>))
        {
            this.GearsetItemHash = GearsetItemHash;
            this.UniqueLabel = UniqueLabel;
            this.UniqueLabelHash = UniqueLabelHash;
            this.EquipmentSlotTypeHash = EquipmentSlotTypeHash;
            this.Attributes = Attributes;
            this.DisplayStrings = DisplayStrings;
        }
        
        /// <summary>
        /// If the item is part of a gearset, this is a reference to that gearset item.
        /// </summary>
        /// <value>If the item is part of a gearset, this is a reference to that gearset item.</value>
        [DataMember(Name="gearsetItemHash", EmitDefaultValue=false)]
        public uint? GearsetItemHash { get; set; }

        /// <summary>
        /// If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren&#39;t allowed to equip more than one Exotic Weapon, that&#39;s because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item&#39;s uniqueLabel vs. all other already equipped items (other than the item in the slot that&#39;s about to be occupied).
        /// </summary>
        /// <value>If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren&#39;t allowed to equip more than one Exotic Weapon, that&#39;s because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item&#39;s uniqueLabel vs. all other already equipped items (other than the item in the slot that&#39;s about to be occupied).</value>
        [DataMember(Name="uniqueLabel", EmitDefaultValue=false)]
        public string UniqueLabel { get; set; }

        /// <summary>
        /// The hash of that unique label. Does not point to a specific definition.
        /// </summary>
        /// <value>The hash of that unique label. Does not point to a specific definition.</value>
        [DataMember(Name="uniqueLabelHash", EmitDefaultValue=false)]
        public uint? UniqueLabelHash { get; set; }

        /// <summary>
        /// An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
        /// </summary>
        /// <value>An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.</value>
        [DataMember(Name="equipmentSlotTypeHash", EmitDefaultValue=false)]
        public uint? EquipmentSlotTypeHash { get; set; }

        /// <summary>
        /// These are custom attributes on the equippability of the item.  For now, this can only be \&quot;equip on acquire\&quot;, which would mean that the item will be automatically equipped as soon as you pick it up.
        /// </summary>
        /// <value>These are custom attributes on the equippability of the item.  For now, this can only be \&quot;equip on acquire\&quot;, which would mean that the item will be automatically equipped as soon as you pick it up.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public DestinyEquippingItemBlockAttributes Attributes { get; set; }

        /// <summary>
        /// These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
        /// </summary>
        /// <value>These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.</value>
        [DataMember(Name="displayStrings", EmitDefaultValue=false)]
        public List<string> DisplayStrings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyEquippingBlockDefinition {\n");
            sb.Append("  GearsetItemHash: ").Append(GearsetItemHash).Append("\n");
            sb.Append("  UniqueLabel: ").Append(UniqueLabel).Append("\n");
            sb.Append("  UniqueLabelHash: ").Append(UniqueLabelHash).Append("\n");
            sb.Append("  EquipmentSlotTypeHash: ").Append(EquipmentSlotTypeHash).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  DisplayStrings: ").Append(DisplayStrings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyEquippingBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyEquippingBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyEquippingBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyEquippingBlockDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GearsetItemHash == input.GearsetItemHash ||
                    (this.GearsetItemHash != null &&
                    this.GearsetItemHash.Equals(input.GearsetItemHash))
                ) && 
                (
                    this.UniqueLabel == input.UniqueLabel ||
                    (this.UniqueLabel != null &&
                    this.UniqueLabel.Equals(input.UniqueLabel))
                ) && 
                (
                    this.UniqueLabelHash == input.UniqueLabelHash ||
                    (this.UniqueLabelHash != null &&
                    this.UniqueLabelHash.Equals(input.UniqueLabelHash))
                ) && 
                (
                    this.EquipmentSlotTypeHash == input.EquipmentSlotTypeHash ||
                    (this.EquipmentSlotTypeHash != null &&
                    this.EquipmentSlotTypeHash.Equals(input.EquipmentSlotTypeHash))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.DisplayStrings == input.DisplayStrings ||
                    this.DisplayStrings != null &&
                    this.DisplayStrings.SequenceEqual(input.DisplayStrings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GearsetItemHash != null)
                    hashCode = hashCode * 59 + this.GearsetItemHash.GetHashCode();
                if (this.UniqueLabel != null)
                    hashCode = hashCode * 59 + this.UniqueLabel.GetHashCode();
                if (this.UniqueLabelHash != null)
                    hashCode = hashCode * 59 + this.UniqueLabelHash.GetHashCode();
                if (this.EquipmentSlotTypeHash != null)
                    hashCode = hashCode * 59 + this.EquipmentSlotTypeHash.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.DisplayStrings != null)
                    hashCode = hashCode * 59 + this.DisplayStrings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
