/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// The definition for an \&quot;inventory flyout\&quot;: a UI screen where we show you part of an otherwise hidden vendor inventory: like the Vault inventory buckets.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition :  IEquatable<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition" /> class.
        /// </summary>
        /// <param name="LockedDescription">If the flyout is locked, this is the reason why..</param>
        /// <param name="DisplayProperties">The title and other common properties of the flyout..</param>
        /// <param name="Buckets">A list of inventory buckets and other metadata to show on the screen..</param>
        /// <param name="FlyoutId">An identifier for the flyout, in case anything else needs to refer to them..</param>
        /// <param name="SuppressNewness">If this is true, don&#39;t show any of the glistening \&quot;this is a new item\&quot; UI elements, like we show on the inventory items themselves in in-game UI..</param>
        public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition(string LockedDescription = default(string), DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), List<DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition> Buckets = default(List<DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition>), uint? FlyoutId = default(uint?), bool? SuppressNewness = default(bool?))
        {
            this.LockedDescription = LockedDescription;
            this.DisplayProperties = DisplayProperties;
            this.Buckets = Buckets;
            this.FlyoutId = FlyoutId;
            this.SuppressNewness = SuppressNewness;
        }
        
        /// <summary>
        /// If the flyout is locked, this is the reason why.
        /// </summary>
        /// <value>If the flyout is locked, this is the reason why.</value>
        [DataMember(Name="lockedDescription", EmitDefaultValue=false)]
        public string LockedDescription { get; set; }

        /// <summary>
        /// The title and other common properties of the flyout.
        /// </summary>
        /// <value>The title and other common properties of the flyout.</value>
        [DataMember(Name="displayProperties", EmitDefaultValue=false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// A list of inventory buckets and other metadata to show on the screen.
        /// </summary>
        /// <value>A list of inventory buckets and other metadata to show on the screen.</value>
        [DataMember(Name="buckets", EmitDefaultValue=false)]
        public List<DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition> Buckets { get; set; }

        /// <summary>
        /// An identifier for the flyout, in case anything else needs to refer to them.
        /// </summary>
        /// <value>An identifier for the flyout, in case anything else needs to refer to them.</value>
        [DataMember(Name="flyoutId", EmitDefaultValue=false)]
        public uint? FlyoutId { get; set; }

        /// <summary>
        /// If this is true, don&#39;t show any of the glistening \&quot;this is a new item\&quot; UI elements, like we show on the inventory items themselves in in-game UI.
        /// </summary>
        /// <value>If this is true, don&#39;t show any of the glistening \&quot;this is a new item\&quot; UI elements, like we show on the inventory items themselves in in-game UI.</value>
        [DataMember(Name="suppressNewness", EmitDefaultValue=false)]
        public bool? SuppressNewness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition {\n");
            sb.Append("  LockedDescription: ").Append(LockedDescription).Append("\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  Buckets: ").Append(Buckets).Append("\n");
            sb.Append("  FlyoutId: ").Append(FlyoutId).Append("\n");
            sb.Append("  SuppressNewness: ").Append(SuppressNewness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LockedDescription == input.LockedDescription ||
                    (this.LockedDescription != null &&
                    this.LockedDescription.Equals(input.LockedDescription))
                ) && 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.Buckets == input.Buckets ||
                    this.Buckets != null &&
                    this.Buckets.SequenceEqual(input.Buckets)
                ) && 
                (
                    this.FlyoutId == input.FlyoutId ||
                    (this.FlyoutId != null &&
                    this.FlyoutId.Equals(input.FlyoutId))
                ) && 
                (
                    this.SuppressNewness == input.SuppressNewness ||
                    (this.SuppressNewness != null &&
                    this.SuppressNewness.Equals(input.SuppressNewness))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LockedDescription != null)
                    hashCode = hashCode * 59 + this.LockedDescription.GetHashCode();
                if (this.DisplayProperties != null)
                    hashCode = hashCode * 59 + this.DisplayProperties.GetHashCode();
                if (this.Buckets != null)
                    hashCode = hashCode * 59 + this.Buckets.GetHashCode();
                if (this.FlyoutId != null)
                    hashCode = hashCode * 59 + this.FlyoutId.GetHashCode();
                if (this.SuppressNewness != null)
                    hashCode = hashCode * 59 + this.SuppressNewness.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
