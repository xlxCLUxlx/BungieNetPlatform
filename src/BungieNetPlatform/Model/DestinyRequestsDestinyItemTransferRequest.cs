/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// DestinyRequestsDestinyItemTransferRequest
    /// </summary>
    [DataContract]
    public partial class DestinyRequestsDestinyItemTransferRequest :  IEquatable<DestinyRequestsDestinyItemTransferRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyRequestsDestinyItemTransferRequest" /> class.
        /// </summary>
        /// <param name="ItemReferenceHash">ItemReferenceHash.</param>
        /// <param name="StackSize">StackSize.</param>
        /// <param name="TransferToVault">TransferToVault.</param>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="CharacterId">CharacterId.</param>
        /// <param name="MembershipType">MembershipType.</param>
        public DestinyRequestsDestinyItemTransferRequest(uint? ItemReferenceHash = default(uint?), int? StackSize = default(int?), bool? TransferToVault = default(bool?), long? ItemId = default(long?), long? CharacterId = default(long?), BungieMembershipType MembershipType = default(BungieMembershipType))
        {
            this.ItemReferenceHash = ItemReferenceHash;
            this.StackSize = StackSize;
            this.TransferToVault = TransferToVault;
            this.ItemId = ItemId;
            this.CharacterId = CharacterId;
            this.MembershipType = MembershipType;
        }
        
        /// <summary>
        /// Gets or Sets ItemReferenceHash
        /// </summary>
        [DataMember(Name="itemReferenceHash", EmitDefaultValue=false)]
        public uint? ItemReferenceHash { get; set; }

        /// <summary>
        /// Gets or Sets StackSize
        /// </summary>
        [DataMember(Name="stackSize", EmitDefaultValue=false)]
        public int? StackSize { get; set; }

        /// <summary>
        /// Gets or Sets TransferToVault
        /// </summary>
        [DataMember(Name="transferToVault", EmitDefaultValue=false)]
        public bool? TransferToVault { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public long? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets CharacterId
        /// </summary>
        [DataMember(Name="characterId", EmitDefaultValue=false)]
        public long? CharacterId { get; set; }

        /// <summary>
        /// Gets or Sets MembershipType
        /// </summary>
        [DataMember(Name="membershipType", EmitDefaultValue=false)]
        public BungieMembershipType MembershipType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyRequestsDestinyItemTransferRequest {\n");
            sb.Append("  ItemReferenceHash: ").Append(ItemReferenceHash).Append("\n");
            sb.Append("  StackSize: ").Append(StackSize).Append("\n");
            sb.Append("  TransferToVault: ").Append(TransferToVault).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  MembershipType: ").Append(MembershipType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyRequestsDestinyItemTransferRequest);
        }

        /// <summary>
        /// Returns true if DestinyRequestsDestinyItemTransferRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyRequestsDestinyItemTransferRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyRequestsDestinyItemTransferRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemReferenceHash == input.ItemReferenceHash ||
                    (this.ItemReferenceHash != null &&
                    this.ItemReferenceHash.Equals(input.ItemReferenceHash))
                ) && 
                (
                    this.StackSize == input.StackSize ||
                    (this.StackSize != null &&
                    this.StackSize.Equals(input.StackSize))
                ) && 
                (
                    this.TransferToVault == input.TransferToVault ||
                    (this.TransferToVault != null &&
                    this.TransferToVault.Equals(input.TransferToVault))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.MembershipType == input.MembershipType ||
                    (this.MembershipType != null &&
                    this.MembershipType.Equals(input.MembershipType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemReferenceHash != null)
                    hashCode = hashCode * 59 + this.ItemReferenceHash.GetHashCode();
                if (this.StackSize != null)
                    hashCode = hashCode * 59 + this.StackSize.GetHashCode();
                if (this.TransferToVault != null)
                    hashCode = hashCode * 59 + this.TransferToVault.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.MembershipType != null)
                    hashCode = hashCode * 59 + this.MembershipType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
