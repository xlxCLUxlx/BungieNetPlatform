/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// A specific \&quot;spot\&quot; referred to by a location. Only one of these can be active at a time for a given Location.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyLocationReleaseDefinition :  IEquatable<DestinyDefinitionsDestinyLocationReleaseDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyLocationReleaseDefinition" /> class.
        /// </summary>
        /// <param name="DisplayProperties">Sadly, these don&#39;t appear to be populated anymore (ever?).</param>
        /// <param name="SpawnPoint">If we had map information, this spawnPoint would be interesting. But sadly, we don&#39;t have that info..</param>
        /// <param name="DestinationHash">The Destination being pointed to by this location..</param>
        /// <param name="ActivityHash">The Activity being pointed to by this location..</param>
        /// <param name="ActivityGraphHash">The Activity Graph being pointed to by this location..</param>
        /// <param name="ActivityGraphNodeHash">The Activity Graph Node being pointed to by this location. (Remember that Activity Graph Node hashes are only unique within an Activity Graph: so use the combination to find the node being spoken of).</param>
        /// <param name="ActivityBubbleName">The Activity Bubble within the Destination. Look this up in the DestinyDestinationDefinition&#39;s bubbles and bubbleSettings properties..</param>
        /// <param name="ActivityPathBundle">If we had map information, this would tell us something cool about the path this location wants you to take. I wish we had map information..</param>
        /// <param name="ActivityPathDestination">If we had map information, this would tell us about path information related to destination on the map. Sad. Maybe you can do something cool with it. Go to town man..</param>
        /// <param name="NavPointType">The type of Nav Point that this represents. See the enumeration for more info..</param>
        /// <param name="WorldPosition">Looks like it should be the position on the map, but sadly it does not look populated... yet?.</param>
        public DestinyDefinitionsDestinyLocationReleaseDefinition(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), uint? SpawnPoint = default(uint?), uint? DestinationHash = default(uint?), uint? ActivityHash = default(uint?), uint? ActivityGraphHash = default(uint?), uint? ActivityGraphNodeHash = default(uint?), uint? ActivityBubbleName = default(uint?), uint? ActivityPathBundle = default(uint?), uint? ActivityPathDestination = default(uint?), DestinyDestinyActivityNavPointType NavPointType = default(DestinyDestinyActivityNavPointType), List<int?> WorldPosition = default(List<int?>))
        {
            this.DisplayProperties = DisplayProperties;
            this.SpawnPoint = SpawnPoint;
            this.DestinationHash = DestinationHash;
            this.ActivityHash = ActivityHash;
            this.ActivityGraphHash = ActivityGraphHash;
            this.ActivityGraphNodeHash = ActivityGraphNodeHash;
            this.ActivityBubbleName = ActivityBubbleName;
            this.ActivityPathBundle = ActivityPathBundle;
            this.ActivityPathDestination = ActivityPathDestination;
            this.NavPointType = NavPointType;
            this.WorldPosition = WorldPosition;
        }
        
        /// <summary>
        /// Sadly, these don&#39;t appear to be populated anymore (ever?)
        /// </summary>
        /// <value>Sadly, these don&#39;t appear to be populated anymore (ever?)</value>
        [DataMember(Name="displayProperties", EmitDefaultValue=false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// If we had map information, this spawnPoint would be interesting. But sadly, we don&#39;t have that info.
        /// </summary>
        /// <value>If we had map information, this spawnPoint would be interesting. But sadly, we don&#39;t have that info.</value>
        [DataMember(Name="spawnPoint", EmitDefaultValue=false)]
        public uint? SpawnPoint { get; set; }

        /// <summary>
        /// The Destination being pointed to by this location.
        /// </summary>
        /// <value>The Destination being pointed to by this location.</value>
        [DataMember(Name="destinationHash", EmitDefaultValue=false)]
        public uint? DestinationHash { get; set; }

        /// <summary>
        /// The Activity being pointed to by this location.
        /// </summary>
        /// <value>The Activity being pointed to by this location.</value>
        [DataMember(Name="activityHash", EmitDefaultValue=false)]
        public uint? ActivityHash { get; set; }

        /// <summary>
        /// The Activity Graph being pointed to by this location.
        /// </summary>
        /// <value>The Activity Graph being pointed to by this location.</value>
        [DataMember(Name="activityGraphHash", EmitDefaultValue=false)]
        public uint? ActivityGraphHash { get; set; }

        /// <summary>
        /// The Activity Graph Node being pointed to by this location. (Remember that Activity Graph Node hashes are only unique within an Activity Graph: so use the combination to find the node being spoken of)
        /// </summary>
        /// <value>The Activity Graph Node being pointed to by this location. (Remember that Activity Graph Node hashes are only unique within an Activity Graph: so use the combination to find the node being spoken of)</value>
        [DataMember(Name="activityGraphNodeHash", EmitDefaultValue=false)]
        public uint? ActivityGraphNodeHash { get; set; }

        /// <summary>
        /// The Activity Bubble within the Destination. Look this up in the DestinyDestinationDefinition&#39;s bubbles and bubbleSettings properties.
        /// </summary>
        /// <value>The Activity Bubble within the Destination. Look this up in the DestinyDestinationDefinition&#39;s bubbles and bubbleSettings properties.</value>
        [DataMember(Name="activityBubbleName", EmitDefaultValue=false)]
        public uint? ActivityBubbleName { get; set; }

        /// <summary>
        /// If we had map information, this would tell us something cool about the path this location wants you to take. I wish we had map information.
        /// </summary>
        /// <value>If we had map information, this would tell us something cool about the path this location wants you to take. I wish we had map information.</value>
        [DataMember(Name="activityPathBundle", EmitDefaultValue=false)]
        public uint? ActivityPathBundle { get; set; }

        /// <summary>
        /// If we had map information, this would tell us about path information related to destination on the map. Sad. Maybe you can do something cool with it. Go to town man.
        /// </summary>
        /// <value>If we had map information, this would tell us about path information related to destination on the map. Sad. Maybe you can do something cool with it. Go to town man.</value>
        [DataMember(Name="activityPathDestination", EmitDefaultValue=false)]
        public uint? ActivityPathDestination { get; set; }

        /// <summary>
        /// The type of Nav Point that this represents. See the enumeration for more info.
        /// </summary>
        /// <value>The type of Nav Point that this represents. See the enumeration for more info.</value>
        [DataMember(Name="navPointType", EmitDefaultValue=false)]
        public DestinyDestinyActivityNavPointType NavPointType { get; set; }

        /// <summary>
        /// Looks like it should be the position on the map, but sadly it does not look populated... yet?
        /// </summary>
        /// <value>Looks like it should be the position on the map, but sadly it does not look populated... yet?</value>
        [DataMember(Name="worldPosition", EmitDefaultValue=false)]
        public List<int?> WorldPosition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyLocationReleaseDefinition {\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  SpawnPoint: ").Append(SpawnPoint).Append("\n");
            sb.Append("  DestinationHash: ").Append(DestinationHash).Append("\n");
            sb.Append("  ActivityHash: ").Append(ActivityHash).Append("\n");
            sb.Append("  ActivityGraphHash: ").Append(ActivityGraphHash).Append("\n");
            sb.Append("  ActivityGraphNodeHash: ").Append(ActivityGraphNodeHash).Append("\n");
            sb.Append("  ActivityBubbleName: ").Append(ActivityBubbleName).Append("\n");
            sb.Append("  ActivityPathBundle: ").Append(ActivityPathBundle).Append("\n");
            sb.Append("  ActivityPathDestination: ").Append(ActivityPathDestination).Append("\n");
            sb.Append("  NavPointType: ").Append(NavPointType).Append("\n");
            sb.Append("  WorldPosition: ").Append(WorldPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyLocationReleaseDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyLocationReleaseDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyLocationReleaseDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyLocationReleaseDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.SpawnPoint == input.SpawnPoint ||
                    (this.SpawnPoint != null &&
                    this.SpawnPoint.Equals(input.SpawnPoint))
                ) && 
                (
                    this.DestinationHash == input.DestinationHash ||
                    (this.DestinationHash != null &&
                    this.DestinationHash.Equals(input.DestinationHash))
                ) && 
                (
                    this.ActivityHash == input.ActivityHash ||
                    (this.ActivityHash != null &&
                    this.ActivityHash.Equals(input.ActivityHash))
                ) && 
                (
                    this.ActivityGraphHash == input.ActivityGraphHash ||
                    (this.ActivityGraphHash != null &&
                    this.ActivityGraphHash.Equals(input.ActivityGraphHash))
                ) && 
                (
                    this.ActivityGraphNodeHash == input.ActivityGraphNodeHash ||
                    (this.ActivityGraphNodeHash != null &&
                    this.ActivityGraphNodeHash.Equals(input.ActivityGraphNodeHash))
                ) && 
                (
                    this.ActivityBubbleName == input.ActivityBubbleName ||
                    (this.ActivityBubbleName != null &&
                    this.ActivityBubbleName.Equals(input.ActivityBubbleName))
                ) && 
                (
                    this.ActivityPathBundle == input.ActivityPathBundle ||
                    (this.ActivityPathBundle != null &&
                    this.ActivityPathBundle.Equals(input.ActivityPathBundle))
                ) && 
                (
                    this.ActivityPathDestination == input.ActivityPathDestination ||
                    (this.ActivityPathDestination != null &&
                    this.ActivityPathDestination.Equals(input.ActivityPathDestination))
                ) && 
                (
                    this.NavPointType == input.NavPointType ||
                    (this.NavPointType != null &&
                    this.NavPointType.Equals(input.NavPointType))
                ) && 
                (
                    this.WorldPosition == input.WorldPosition ||
                    this.WorldPosition != null &&
                    this.WorldPosition.SequenceEqual(input.WorldPosition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayProperties != null)
                    hashCode = hashCode * 59 + this.DisplayProperties.GetHashCode();
                if (this.SpawnPoint != null)
                    hashCode = hashCode * 59 + this.SpawnPoint.GetHashCode();
                if (this.DestinationHash != null)
                    hashCode = hashCode * 59 + this.DestinationHash.GetHashCode();
                if (this.ActivityHash != null)
                    hashCode = hashCode * 59 + this.ActivityHash.GetHashCode();
                if (this.ActivityGraphHash != null)
                    hashCode = hashCode * 59 + this.ActivityGraphHash.GetHashCode();
                if (this.ActivityGraphNodeHash != null)
                    hashCode = hashCode * 59 + this.ActivityGraphNodeHash.GetHashCode();
                if (this.ActivityBubbleName != null)
                    hashCode = hashCode * 59 + this.ActivityBubbleName.GetHashCode();
                if (this.ActivityPathBundle != null)
                    hashCode = hashCode * 59 + this.ActivityPathBundle.GetHashCode();
                if (this.ActivityPathDestination != null)
                    hashCode = hashCode * 59 + this.ActivityPathDestination.GetHashCode();
                if (this.NavPointType != null)
                    hashCode = hashCode * 59 + this.NavPointType.GetHashCode();
                if (this.WorldPosition != null)
                    hashCode = hashCode * 59 + this.WorldPosition.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
