/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Raw data about the customization options chosen for a character&#39;s face and appearance.  You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)
    /// </summary>
    [DataContract]
    public partial class DestinyCharacterDestinyCharacterCustomization :  IEquatable<DestinyCharacterDestinyCharacterCustomization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyCharacterDestinyCharacterCustomization" /> class.
        /// </summary>
        /// <param name="Personality">Personality.</param>
        /// <param name="Face">Face.</param>
        /// <param name="SkinColor">SkinColor.</param>
        /// <param name="LipColor">LipColor.</param>
        /// <param name="EyeColor">EyeColor.</param>
        /// <param name="HairColors">HairColors.</param>
        /// <param name="FeatureColors">FeatureColors.</param>
        /// <param name="DecalColor">DecalColor.</param>
        /// <param name="WearHelmet">WearHelmet.</param>
        /// <param name="HairIndex">HairIndex.</param>
        /// <param name="FeatureIndex">FeatureIndex.</param>
        /// <param name="DecalIndex">DecalIndex.</param>
        public DestinyCharacterDestinyCharacterCustomization(uint? Personality = default(uint?), uint? Face = default(uint?), uint? SkinColor = default(uint?), uint? LipColor = default(uint?), uint? EyeColor = default(uint?), List<uint?> HairColors = default(List<uint?>), List<uint?> FeatureColors = default(List<uint?>), uint? DecalColor = default(uint?), bool? WearHelmet = default(bool?), int? HairIndex = default(int?), int? FeatureIndex = default(int?), int? DecalIndex = default(int?))
        {
            this.Personality = Personality;
            this.Face = Face;
            this.SkinColor = SkinColor;
            this.LipColor = LipColor;
            this.EyeColor = EyeColor;
            this.HairColors = HairColors;
            this.FeatureColors = FeatureColors;
            this.DecalColor = DecalColor;
            this.WearHelmet = WearHelmet;
            this.HairIndex = HairIndex;
            this.FeatureIndex = FeatureIndex;
            this.DecalIndex = DecalIndex;
        }
        
        /// <summary>
        /// Gets or Sets Personality
        /// </summary>
        [DataMember(Name="personality", EmitDefaultValue=false)]
        public uint? Personality { get; set; }

        /// <summary>
        /// Gets or Sets Face
        /// </summary>
        [DataMember(Name="face", EmitDefaultValue=false)]
        public uint? Face { get; set; }

        /// <summary>
        /// Gets or Sets SkinColor
        /// </summary>
        [DataMember(Name="skinColor", EmitDefaultValue=false)]
        public uint? SkinColor { get; set; }

        /// <summary>
        /// Gets or Sets LipColor
        /// </summary>
        [DataMember(Name="lipColor", EmitDefaultValue=false)]
        public uint? LipColor { get; set; }

        /// <summary>
        /// Gets or Sets EyeColor
        /// </summary>
        [DataMember(Name="eyeColor", EmitDefaultValue=false)]
        public uint? EyeColor { get; set; }

        /// <summary>
        /// Gets or Sets HairColors
        /// </summary>
        [DataMember(Name="hairColors", EmitDefaultValue=false)]
        public List<uint?> HairColors { get; set; }

        /// <summary>
        /// Gets or Sets FeatureColors
        /// </summary>
        [DataMember(Name="featureColors", EmitDefaultValue=false)]
        public List<uint?> FeatureColors { get; set; }

        /// <summary>
        /// Gets or Sets DecalColor
        /// </summary>
        [DataMember(Name="decalColor", EmitDefaultValue=false)]
        public uint? DecalColor { get; set; }

        /// <summary>
        /// Gets or Sets WearHelmet
        /// </summary>
        [DataMember(Name="wearHelmet", EmitDefaultValue=false)]
        public bool? WearHelmet { get; set; }

        /// <summary>
        /// Gets or Sets HairIndex
        /// </summary>
        [DataMember(Name="hairIndex", EmitDefaultValue=false)]
        public int? HairIndex { get; set; }

        /// <summary>
        /// Gets or Sets FeatureIndex
        /// </summary>
        [DataMember(Name="featureIndex", EmitDefaultValue=false)]
        public int? FeatureIndex { get; set; }

        /// <summary>
        /// Gets or Sets DecalIndex
        /// </summary>
        [DataMember(Name="decalIndex", EmitDefaultValue=false)]
        public int? DecalIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyCharacterDestinyCharacterCustomization {\n");
            sb.Append("  Personality: ").Append(Personality).Append("\n");
            sb.Append("  Face: ").Append(Face).Append("\n");
            sb.Append("  SkinColor: ").Append(SkinColor).Append("\n");
            sb.Append("  LipColor: ").Append(LipColor).Append("\n");
            sb.Append("  EyeColor: ").Append(EyeColor).Append("\n");
            sb.Append("  HairColors: ").Append(HairColors).Append("\n");
            sb.Append("  FeatureColors: ").Append(FeatureColors).Append("\n");
            sb.Append("  DecalColor: ").Append(DecalColor).Append("\n");
            sb.Append("  WearHelmet: ").Append(WearHelmet).Append("\n");
            sb.Append("  HairIndex: ").Append(HairIndex).Append("\n");
            sb.Append("  FeatureIndex: ").Append(FeatureIndex).Append("\n");
            sb.Append("  DecalIndex: ").Append(DecalIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyCharacterDestinyCharacterCustomization);
        }

        /// <summary>
        /// Returns true if DestinyCharacterDestinyCharacterCustomization instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyCharacterDestinyCharacterCustomization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyCharacterDestinyCharacterCustomization input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Personality == input.Personality ||
                    (this.Personality != null &&
                    this.Personality.Equals(input.Personality))
                ) && 
                (
                    this.Face == input.Face ||
                    (this.Face != null &&
                    this.Face.Equals(input.Face))
                ) && 
                (
                    this.SkinColor == input.SkinColor ||
                    (this.SkinColor != null &&
                    this.SkinColor.Equals(input.SkinColor))
                ) && 
                (
                    this.LipColor == input.LipColor ||
                    (this.LipColor != null &&
                    this.LipColor.Equals(input.LipColor))
                ) && 
                (
                    this.EyeColor == input.EyeColor ||
                    (this.EyeColor != null &&
                    this.EyeColor.Equals(input.EyeColor))
                ) && 
                (
                    this.HairColors == input.HairColors ||
                    this.HairColors != null &&
                    this.HairColors.SequenceEqual(input.HairColors)
                ) && 
                (
                    this.FeatureColors == input.FeatureColors ||
                    this.FeatureColors != null &&
                    this.FeatureColors.SequenceEqual(input.FeatureColors)
                ) && 
                (
                    this.DecalColor == input.DecalColor ||
                    (this.DecalColor != null &&
                    this.DecalColor.Equals(input.DecalColor))
                ) && 
                (
                    this.WearHelmet == input.WearHelmet ||
                    (this.WearHelmet != null &&
                    this.WearHelmet.Equals(input.WearHelmet))
                ) && 
                (
                    this.HairIndex == input.HairIndex ||
                    (this.HairIndex != null &&
                    this.HairIndex.Equals(input.HairIndex))
                ) && 
                (
                    this.FeatureIndex == input.FeatureIndex ||
                    (this.FeatureIndex != null &&
                    this.FeatureIndex.Equals(input.FeatureIndex))
                ) && 
                (
                    this.DecalIndex == input.DecalIndex ||
                    (this.DecalIndex != null &&
                    this.DecalIndex.Equals(input.DecalIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Personality != null)
                    hashCode = hashCode * 59 + this.Personality.GetHashCode();
                if (this.Face != null)
                    hashCode = hashCode * 59 + this.Face.GetHashCode();
                if (this.SkinColor != null)
                    hashCode = hashCode * 59 + this.SkinColor.GetHashCode();
                if (this.LipColor != null)
                    hashCode = hashCode * 59 + this.LipColor.GetHashCode();
                if (this.EyeColor != null)
                    hashCode = hashCode * 59 + this.EyeColor.GetHashCode();
                if (this.HairColors != null)
                    hashCode = hashCode * 59 + this.HairColors.GetHashCode();
                if (this.FeatureColors != null)
                    hashCode = hashCode * 59 + this.FeatureColors.GetHashCode();
                if (this.DecalColor != null)
                    hashCode = hashCode * 59 + this.DecalColor.GetHashCode();
                if (this.WearHelmet != null)
                    hashCode = hashCode * 59 + this.WearHelmet.GetHashCode();
                if (this.HairIndex != null)
                    hashCode = hashCode * 59 + this.HairIndex.GetHashCode();
                if (this.FeatureIndex != null)
                    hashCode = hashCode * 59 + this.FeatureIndex.GetHashCode();
                if (this.DecalIndex != null)
                    hashCode = hashCode * 59 + this.DecalIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
