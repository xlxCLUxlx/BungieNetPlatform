/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// If an item can have an action performed on it (like \&quot;Dismantle\&quot;), it will be defined here if you care.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyItemActionBlockDefinition :  IEquatable<DestinyDefinitionsDestinyItemActionBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemActionBlockDefinition" /> class.
        /// </summary>
        /// <param name="VerbName">Localized text for the verb of the action being performed..</param>
        /// <param name="VerbDescription">Localized text describing the action being performed..</param>
        /// <param name="IsPositive">The content has this property, however it&#39;s not entirely clear how it is used..</param>
        /// <param name="OverlayScreenName">If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen&#39;s data itself..</param>
        /// <param name="OverlayIcon">The icon associated with the overlay screen for the action, if any..</param>
        /// <param name="RequiredCooldownSeconds">The number of seconds to delay before allowing this action to be performed again..</param>
        /// <param name="RequiredItems">If the action requires other items to exist or be destroyed, this is the list of those items and requirements..</param>
        /// <param name="ProgressionRewards">If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action..</param>
        /// <param name="ActionTypeLabel">The internal identifier for the action..</param>
        /// <param name="RequiredLocation">Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property..</param>
        /// <param name="RequiredCooldownHash">The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns..</param>
        /// <param name="DeleteOnAction">If true, the item is deleted when the action completes..</param>
        /// <param name="ConsumeEntireStack">If true, the entire stack is deleted when the action completes..</param>
        /// <param name="UseOnAcquire">If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items..</param>
        public DestinyDefinitionsDestinyItemActionBlockDefinition(string VerbName = default(string), string VerbDescription = default(string), bool? IsPositive = default(bool?), string OverlayScreenName = default(string), string OverlayIcon = default(string), int? RequiredCooldownSeconds = default(int?), List<DestinyDefinitionsDestinyItemActionRequiredItemDefinition> RequiredItems = default(List<DestinyDefinitionsDestinyItemActionRequiredItemDefinition>), List<DestinyDefinitionsDestinyProgressionRewardDefinition> ProgressionRewards = default(List<DestinyDefinitionsDestinyProgressionRewardDefinition>), string ActionTypeLabel = default(string), string RequiredLocation = default(string), uint? RequiredCooldownHash = default(uint?), bool? DeleteOnAction = default(bool?), bool? ConsumeEntireStack = default(bool?), bool? UseOnAcquire = default(bool?))
        {
            this.VerbName = VerbName;
            this.VerbDescription = VerbDescription;
            this.IsPositive = IsPositive;
            this.OverlayScreenName = OverlayScreenName;
            this.OverlayIcon = OverlayIcon;
            this.RequiredCooldownSeconds = RequiredCooldownSeconds;
            this.RequiredItems = RequiredItems;
            this.ProgressionRewards = ProgressionRewards;
            this.ActionTypeLabel = ActionTypeLabel;
            this.RequiredLocation = RequiredLocation;
            this.RequiredCooldownHash = RequiredCooldownHash;
            this.DeleteOnAction = DeleteOnAction;
            this.ConsumeEntireStack = ConsumeEntireStack;
            this.UseOnAcquire = UseOnAcquire;
        }
        
        /// <summary>
        /// Localized text for the verb of the action being performed.
        /// </summary>
        /// <value>Localized text for the verb of the action being performed.</value>
        [DataMember(Name="verbName", EmitDefaultValue=false)]
        public string VerbName { get; set; }

        /// <summary>
        /// Localized text describing the action being performed.
        /// </summary>
        /// <value>Localized text describing the action being performed.</value>
        [DataMember(Name="verbDescription", EmitDefaultValue=false)]
        public string VerbDescription { get; set; }

        /// <summary>
        /// The content has this property, however it&#39;s not entirely clear how it is used.
        /// </summary>
        /// <value>The content has this property, however it&#39;s not entirely clear how it is used.</value>
        [DataMember(Name="isPositive", EmitDefaultValue=false)]
        public bool? IsPositive { get; set; }

        /// <summary>
        /// If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen&#39;s data itself.
        /// </summary>
        /// <value>If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen&#39;s data itself.</value>
        [DataMember(Name="overlayScreenName", EmitDefaultValue=false)]
        public string OverlayScreenName { get; set; }

        /// <summary>
        /// The icon associated with the overlay screen for the action, if any.
        /// </summary>
        /// <value>The icon associated with the overlay screen for the action, if any.</value>
        [DataMember(Name="overlayIcon", EmitDefaultValue=false)]
        public string OverlayIcon { get; set; }

        /// <summary>
        /// The number of seconds to delay before allowing this action to be performed again.
        /// </summary>
        /// <value>The number of seconds to delay before allowing this action to be performed again.</value>
        [DataMember(Name="requiredCooldownSeconds", EmitDefaultValue=false)]
        public int? RequiredCooldownSeconds { get; set; }

        /// <summary>
        /// If the action requires other items to exist or be destroyed, this is the list of those items and requirements.
        /// </summary>
        /// <value>If the action requires other items to exist or be destroyed, this is the list of those items and requirements.</value>
        [DataMember(Name="requiredItems", EmitDefaultValue=false)]
        public List<DestinyDefinitionsDestinyItemActionRequiredItemDefinition> RequiredItems { get; set; }

        /// <summary>
        /// If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.
        /// </summary>
        /// <value>If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.</value>
        [DataMember(Name="progressionRewards", EmitDefaultValue=false)]
        public List<DestinyDefinitionsDestinyProgressionRewardDefinition> ProgressionRewards { get; set; }

        /// <summary>
        /// The internal identifier for the action.
        /// </summary>
        /// <value>The internal identifier for the action.</value>
        [DataMember(Name="actionTypeLabel", EmitDefaultValue=false)]
        public string ActionTypeLabel { get; set; }

        /// <summary>
        /// Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.
        /// </summary>
        /// <value>Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.</value>
        [DataMember(Name="requiredLocation", EmitDefaultValue=false)]
        public string RequiredLocation { get; set; }

        /// <summary>
        /// The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.
        /// </summary>
        /// <value>The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.</value>
        [DataMember(Name="requiredCooldownHash", EmitDefaultValue=false)]
        public uint? RequiredCooldownHash { get; set; }

        /// <summary>
        /// If true, the item is deleted when the action completes.
        /// </summary>
        /// <value>If true, the item is deleted when the action completes.</value>
        [DataMember(Name="deleteOnAction", EmitDefaultValue=false)]
        public bool? DeleteOnAction { get; set; }

        /// <summary>
        /// If true, the entire stack is deleted when the action completes.
        /// </summary>
        /// <value>If true, the entire stack is deleted when the action completes.</value>
        [DataMember(Name="consumeEntireStack", EmitDefaultValue=false)]
        public bool? ConsumeEntireStack { get; set; }

        /// <summary>
        /// If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.
        /// </summary>
        /// <value>If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.</value>
        [DataMember(Name="useOnAcquire", EmitDefaultValue=false)]
        public bool? UseOnAcquire { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemActionBlockDefinition {\n");
            sb.Append("  VerbName: ").Append(VerbName).Append("\n");
            sb.Append("  VerbDescription: ").Append(VerbDescription).Append("\n");
            sb.Append("  IsPositive: ").Append(IsPositive).Append("\n");
            sb.Append("  OverlayScreenName: ").Append(OverlayScreenName).Append("\n");
            sb.Append("  OverlayIcon: ").Append(OverlayIcon).Append("\n");
            sb.Append("  RequiredCooldownSeconds: ").Append(RequiredCooldownSeconds).Append("\n");
            sb.Append("  RequiredItems: ").Append(RequiredItems).Append("\n");
            sb.Append("  ProgressionRewards: ").Append(ProgressionRewards).Append("\n");
            sb.Append("  ActionTypeLabel: ").Append(ActionTypeLabel).Append("\n");
            sb.Append("  RequiredLocation: ").Append(RequiredLocation).Append("\n");
            sb.Append("  RequiredCooldownHash: ").Append(RequiredCooldownHash).Append("\n");
            sb.Append("  DeleteOnAction: ").Append(DeleteOnAction).Append("\n");
            sb.Append("  ConsumeEntireStack: ").Append(ConsumeEntireStack).Append("\n");
            sb.Append("  UseOnAcquire: ").Append(UseOnAcquire).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemActionBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemActionBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemActionBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemActionBlockDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VerbName == input.VerbName ||
                    (this.VerbName != null &&
                    this.VerbName.Equals(input.VerbName))
                ) && 
                (
                    this.VerbDescription == input.VerbDescription ||
                    (this.VerbDescription != null &&
                    this.VerbDescription.Equals(input.VerbDescription))
                ) && 
                (
                    this.IsPositive == input.IsPositive ||
                    (this.IsPositive != null &&
                    this.IsPositive.Equals(input.IsPositive))
                ) && 
                (
                    this.OverlayScreenName == input.OverlayScreenName ||
                    (this.OverlayScreenName != null &&
                    this.OverlayScreenName.Equals(input.OverlayScreenName))
                ) && 
                (
                    this.OverlayIcon == input.OverlayIcon ||
                    (this.OverlayIcon != null &&
                    this.OverlayIcon.Equals(input.OverlayIcon))
                ) && 
                (
                    this.RequiredCooldownSeconds == input.RequiredCooldownSeconds ||
                    (this.RequiredCooldownSeconds != null &&
                    this.RequiredCooldownSeconds.Equals(input.RequiredCooldownSeconds))
                ) && 
                (
                    this.RequiredItems == input.RequiredItems ||
                    this.RequiredItems != null &&
                    this.RequiredItems.SequenceEqual(input.RequiredItems)
                ) && 
                (
                    this.ProgressionRewards == input.ProgressionRewards ||
                    this.ProgressionRewards != null &&
                    this.ProgressionRewards.SequenceEqual(input.ProgressionRewards)
                ) && 
                (
                    this.ActionTypeLabel == input.ActionTypeLabel ||
                    (this.ActionTypeLabel != null &&
                    this.ActionTypeLabel.Equals(input.ActionTypeLabel))
                ) && 
                (
                    this.RequiredLocation == input.RequiredLocation ||
                    (this.RequiredLocation != null &&
                    this.RequiredLocation.Equals(input.RequiredLocation))
                ) && 
                (
                    this.RequiredCooldownHash == input.RequiredCooldownHash ||
                    (this.RequiredCooldownHash != null &&
                    this.RequiredCooldownHash.Equals(input.RequiredCooldownHash))
                ) && 
                (
                    this.DeleteOnAction == input.DeleteOnAction ||
                    (this.DeleteOnAction != null &&
                    this.DeleteOnAction.Equals(input.DeleteOnAction))
                ) && 
                (
                    this.ConsumeEntireStack == input.ConsumeEntireStack ||
                    (this.ConsumeEntireStack != null &&
                    this.ConsumeEntireStack.Equals(input.ConsumeEntireStack))
                ) && 
                (
                    this.UseOnAcquire == input.UseOnAcquire ||
                    (this.UseOnAcquire != null &&
                    this.UseOnAcquire.Equals(input.UseOnAcquire))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VerbName != null)
                    hashCode = hashCode * 59 + this.VerbName.GetHashCode();
                if (this.VerbDescription != null)
                    hashCode = hashCode * 59 + this.VerbDescription.GetHashCode();
                if (this.IsPositive != null)
                    hashCode = hashCode * 59 + this.IsPositive.GetHashCode();
                if (this.OverlayScreenName != null)
                    hashCode = hashCode * 59 + this.OverlayScreenName.GetHashCode();
                if (this.OverlayIcon != null)
                    hashCode = hashCode * 59 + this.OverlayIcon.GetHashCode();
                if (this.RequiredCooldownSeconds != null)
                    hashCode = hashCode * 59 + this.RequiredCooldownSeconds.GetHashCode();
                if (this.RequiredItems != null)
                    hashCode = hashCode * 59 + this.RequiredItems.GetHashCode();
                if (this.ProgressionRewards != null)
                    hashCode = hashCode * 59 + this.ProgressionRewards.GetHashCode();
                if (this.ActionTypeLabel != null)
                    hashCode = hashCode * 59 + this.ActionTypeLabel.GetHashCode();
                if (this.RequiredLocation != null)
                    hashCode = hashCode * 59 + this.RequiredLocation.GetHashCode();
                if (this.RequiredCooldownHash != null)
                    hashCode = hashCode * 59 + this.RequiredCooldownHash.GetHashCode();
                if (this.DeleteOnAction != null)
                    hashCode = hashCode * 59 + this.DeleteOnAction.GetHashCode();
                if (this.ConsumeEntireStack != null)
                    hashCode = hashCode * 59 + this.ConsumeEntireStack.GetHashCode();
                if (this.UseOnAcquire != null)
                    hashCode = hashCode * 59 + this.UseOnAcquire.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
