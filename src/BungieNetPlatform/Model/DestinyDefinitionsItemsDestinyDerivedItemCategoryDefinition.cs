/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// A shortcut for the fact that some items have a \&quot;Preview Vendor\&quot; - See DestinyInventoryItemDefinition.preview.previewVendorHash - that is intended to be used to show what items you can get as a result of acquiring or using this item.  A common example of this in Destiny 1 was Eververse \&quot;Boxes,\&quot; which could have many possible items. This \&quot;Preview Vendor\&quot; is not a vendor you can actually see in the game, but it defines categories and sale items for all of the possible items you could get from the Box so that the game can show them to you. We summarize that info here so that you don&#39;t have to do that Vendor lookup and aggregation manually.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition :  IEquatable<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition" /> class.
        /// </summary>
        /// <param name="CategoryDescription">The localized string for the category title. This will be something describing the items you can get as a group, or your likelihood/the quantity you&#39;ll get..</param>
        /// <param name="Items">This is the list of all of the items for this category and the basic properties we&#39;ll know about them..</param>
        public DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition(string CategoryDescription = default(string), List<DestinyDefinitionsItemsDestinyDerivedItemDefinition> Items = default(List<DestinyDefinitionsItemsDestinyDerivedItemDefinition>))
        {
            this.CategoryDescription = CategoryDescription;
            this.Items = Items;
        }
        
        /// <summary>
        /// The localized string for the category title. This will be something describing the items you can get as a group, or your likelihood/the quantity you&#39;ll get.
        /// </summary>
        /// <value>The localized string for the category title. This will be something describing the items you can get as a group, or your likelihood/the quantity you&#39;ll get.</value>
        [DataMember(Name="categoryDescription", EmitDefaultValue=false)]
        public string CategoryDescription { get; set; }

        /// <summary>
        /// This is the list of all of the items for this category and the basic properties we&#39;ll know about them.
        /// </summary>
        /// <value>This is the list of all of the items for this category and the basic properties we&#39;ll know about them.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<DestinyDefinitionsItemsDestinyDerivedItemDefinition> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition {\n");
            sb.Append("  CategoryDescription: ").Append(CategoryDescription).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryDescription == input.CategoryDescription ||
                    (this.CategoryDescription != null &&
                    this.CategoryDescription.Equals(input.CategoryDescription))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryDescription != null)
                    hashCode = hashCode * 59 + this.CategoryDescription.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
