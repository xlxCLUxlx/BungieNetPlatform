/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.  A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyFactionDefinition :  IEquatable<DestinyDefinitionsDestinyFactionDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyFactionDefinition" /> class.
        /// </summary>
        /// <param name="DisplayProperties">DisplayProperties.</param>
        /// <param name="ProgressionHash">The hash identifier for the DestinyProgressionDefinition that indicates the character&#39;s relationship with this faction in terms of experience and levels..</param>
        /// <param name="BackgroundImagePath">The relative path to the background image, for use in a banner..</param>
        /// <param name="TokenValues">The faction token item hashes, and their respective progression values..</param>
        /// <param name="RewardItemHash">The faction reward item hash, usually an engram..</param>
        /// <param name="RewardVendorHash">The faction reward vendor hash, used for faction engram previews..</param>
        /// <param name="RewardVendorPreviewCategoryHashes">For the faction reward vendor, the category hashes to be shown as reward previews..</param>
        /// <param name="Hash">The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to..</param>
        /// <param name="Index">The index of the entity as it was found in the investment tables..</param>
        /// <param name="Redacted">If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!.</param>
        public DestinyDefinitionsDestinyFactionDefinition(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), uint? ProgressionHash = default(uint?), string BackgroundImagePath = default(string), Dictionary<string, uint?> TokenValues = default(Dictionary<string, uint?>), uint? RewardItemHash = default(uint?), uint? RewardVendorHash = default(uint?), List<uint?> RewardVendorPreviewCategoryHashes = default(List<uint?>), uint? Hash = default(uint?), int? Index = default(int?), bool? Redacted = default(bool?))
        {
            this.DisplayProperties = DisplayProperties;
            this.ProgressionHash = ProgressionHash;
            this.BackgroundImagePath = BackgroundImagePath;
            this.TokenValues = TokenValues;
            this.RewardItemHash = RewardItemHash;
            this.RewardVendorHash = RewardVendorHash;
            this.RewardVendorPreviewCategoryHashes = RewardVendorPreviewCategoryHashes;
            this.Hash = Hash;
            this.Index = Index;
            this.Redacted = Redacted;
        }
        
        /// <summary>
        /// Gets or Sets DisplayProperties
        /// </summary>
        [DataMember(Name="displayProperties", EmitDefaultValue=false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// The hash identifier for the DestinyProgressionDefinition that indicates the character&#39;s relationship with this faction in terms of experience and levels.
        /// </summary>
        /// <value>The hash identifier for the DestinyProgressionDefinition that indicates the character&#39;s relationship with this faction in terms of experience and levels.</value>
        [DataMember(Name="progressionHash", EmitDefaultValue=false)]
        public uint? ProgressionHash { get; set; }

        /// <summary>
        /// The relative path to the background image, for use in a banner.
        /// </summary>
        /// <value>The relative path to the background image, for use in a banner.</value>
        [DataMember(Name="backgroundImagePath", EmitDefaultValue=false)]
        public string BackgroundImagePath { get; set; }

        /// <summary>
        /// The faction token item hashes, and their respective progression values.
        /// </summary>
        /// <value>The faction token item hashes, and their respective progression values.</value>
        [DataMember(Name="tokenValues", EmitDefaultValue=false)]
        public Dictionary<string, uint?> TokenValues { get; set; }

        /// <summary>
        /// The faction reward item hash, usually an engram.
        /// </summary>
        /// <value>The faction reward item hash, usually an engram.</value>
        [DataMember(Name="rewardItemHash", EmitDefaultValue=false)]
        public uint? RewardItemHash { get; set; }

        /// <summary>
        /// The faction reward vendor hash, used for faction engram previews.
        /// </summary>
        /// <value>The faction reward vendor hash, used for faction engram previews.</value>
        [DataMember(Name="rewardVendorHash", EmitDefaultValue=false)]
        public uint? RewardVendorHash { get; set; }

        /// <summary>
        /// For the faction reward vendor, the category hashes to be shown as reward previews.
        /// </summary>
        /// <value>For the faction reward vendor, the category hashes to be shown as reward previews.</value>
        [DataMember(Name="rewardVendorPreviewCategoryHashes", EmitDefaultValue=false)]
        public List<uint?> RewardVendorPreviewCategoryHashes { get; set; }

        /// <summary>
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
        /// </summary>
        /// <value>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public uint? Hash { get; set; }

        /// <summary>
        /// The index of the entity as it was found in the investment tables.
        /// </summary>
        /// <value>The index of the entity as it was found in the investment tables.</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        /// </summary>
        /// <value>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</value>
        [DataMember(Name="redacted", EmitDefaultValue=false)]
        public bool? Redacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyFactionDefinition {\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  ProgressionHash: ").Append(ProgressionHash).Append("\n");
            sb.Append("  BackgroundImagePath: ").Append(BackgroundImagePath).Append("\n");
            sb.Append("  TokenValues: ").Append(TokenValues).Append("\n");
            sb.Append("  RewardItemHash: ").Append(RewardItemHash).Append("\n");
            sb.Append("  RewardVendorHash: ").Append(RewardVendorHash).Append("\n");
            sb.Append("  RewardVendorPreviewCategoryHashes: ").Append(RewardVendorPreviewCategoryHashes).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Redacted: ").Append(Redacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyFactionDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyFactionDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyFactionDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyFactionDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.ProgressionHash == input.ProgressionHash ||
                    (this.ProgressionHash != null &&
                    this.ProgressionHash.Equals(input.ProgressionHash))
                ) && 
                (
                    this.BackgroundImagePath == input.BackgroundImagePath ||
                    (this.BackgroundImagePath != null &&
                    this.BackgroundImagePath.Equals(input.BackgroundImagePath))
                ) && 
                (
                    this.TokenValues == input.TokenValues ||
                    this.TokenValues != null &&
                    this.TokenValues.SequenceEqual(input.TokenValues)
                ) && 
                (
                    this.RewardItemHash == input.RewardItemHash ||
                    (this.RewardItemHash != null &&
                    this.RewardItemHash.Equals(input.RewardItemHash))
                ) && 
                (
                    this.RewardVendorHash == input.RewardVendorHash ||
                    (this.RewardVendorHash != null &&
                    this.RewardVendorHash.Equals(input.RewardVendorHash))
                ) && 
                (
                    this.RewardVendorPreviewCategoryHashes == input.RewardVendorPreviewCategoryHashes ||
                    this.RewardVendorPreviewCategoryHashes != null &&
                    this.RewardVendorPreviewCategoryHashes.SequenceEqual(input.RewardVendorPreviewCategoryHashes)
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Redacted == input.Redacted ||
                    (this.Redacted != null &&
                    this.Redacted.Equals(input.Redacted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayProperties != null)
                    hashCode = hashCode * 59 + this.DisplayProperties.GetHashCode();
                if (this.ProgressionHash != null)
                    hashCode = hashCode * 59 + this.ProgressionHash.GetHashCode();
                if (this.BackgroundImagePath != null)
                    hashCode = hashCode * 59 + this.BackgroundImagePath.GetHashCode();
                if (this.TokenValues != null)
                    hashCode = hashCode * 59 + this.TokenValues.GetHashCode();
                if (this.RewardItemHash != null)
                    hashCode = hashCode * 59 + this.RewardItemHash.GetHashCode();
                if (this.RewardVendorHash != null)
                    hashCode = hashCode * 59 + this.RewardVendorHash.GetHashCode();
                if (this.RewardVendorPreviewCategoryHashes != null)
                    hashCode = hashCode * 59 + this.RewardVendorPreviewCategoryHashes.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Redacted != null)
                    hashCode = hashCode * 59 + this.Redacted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
