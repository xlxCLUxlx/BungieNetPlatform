/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// The base item component, filled with properties that are generally useful to know in any item request or that don&#39;t feel worthwhile to put in their own component.
    /// </summary>
    [DataContract]
    public partial class DestinyEntitiesItemsDestinyItemComponent :  IEquatable<DestinyEntitiesItemsDestinyItemComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyEntitiesItemsDestinyItemComponent" /> class.
        /// </summary>
        /// <param name="ItemHash">The identifier for the item&#39;s definition, which is where most of the useful static information for the item can be found..</param>
        /// <param name="ItemInstanceId">If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size..</param>
        /// <param name="Quantity">The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it).</param>
        /// <param name="BindStatus">If the item is bound to a location, it will be specified in this enum..</param>
        /// <param name="Location">An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items..</param>
        /// <param name="BucketHash">The hash identifier for the specific inventory bucket in which the item is located..</param>
        /// <param name="TransferStatus">If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer)..</param>
        /// <param name="Lockable">If the item can be locked, this will indicate that state..</param>
        /// <param name="State">A flags enumeration indicating the states of the item: whether it&#39;s tracked or locked for example..</param>
        public DestinyEntitiesItemsDestinyItemComponent(uint? ItemHash = default(uint?), long? ItemInstanceId = default(long?), int? Quantity = default(int?), DestinyItemBindStatus BindStatus = default(DestinyItemBindStatus), DestinyItemLocation Location = default(DestinyItemLocation), uint? BucketHash = default(uint?), DestinyTransferStatuses TransferStatus = default(DestinyTransferStatuses), bool? Lockable = default(bool?), DestinyItemState State = default(DestinyItemState))
        {
            this.ItemHash = ItemHash;
            this.ItemInstanceId = ItemInstanceId;
            this.Quantity = Quantity;
            this.BindStatus = BindStatus;
            this.Location = Location;
            this.BucketHash = BucketHash;
            this.TransferStatus = TransferStatus;
            this.Lockable = Lockable;
            this.State = State;
        }
        
        /// <summary>
        /// The identifier for the item&#39;s definition, which is where most of the useful static information for the item can be found.
        /// </summary>
        /// <value>The identifier for the item&#39;s definition, which is where most of the useful static information for the item can be found.</value>
        [DataMember(Name="itemHash", EmitDefaultValue=false)]
        public uint? ItemHash { get; set; }

        /// <summary>
        /// If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.
        /// </summary>
        /// <value>If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.</value>
        [DataMember(Name="itemInstanceId", EmitDefaultValue=false)]
        public long? ItemInstanceId { get; set; }

        /// <summary>
        /// The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)
        /// </summary>
        /// <value>The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// If the item is bound to a location, it will be specified in this enum.
        /// </summary>
        /// <value>If the item is bound to a location, it will be specified in this enum.</value>
        [DataMember(Name="bindStatus", EmitDefaultValue=false)]
        public DestinyItemBindStatus BindStatus { get; set; }

        /// <summary>
        /// An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.
        /// </summary>
        /// <value>An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public DestinyItemLocation Location { get; set; }

        /// <summary>
        /// The hash identifier for the specific inventory bucket in which the item is located.
        /// </summary>
        /// <value>The hash identifier for the specific inventory bucket in which the item is located.</value>
        [DataMember(Name="bucketHash", EmitDefaultValue=false)]
        public uint? BucketHash { get; set; }

        /// <summary>
        /// If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).
        /// </summary>
        /// <value>If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).</value>
        [DataMember(Name="transferStatus", EmitDefaultValue=false)]
        public DestinyTransferStatuses TransferStatus { get; set; }

        /// <summary>
        /// If the item can be locked, this will indicate that state.
        /// </summary>
        /// <value>If the item can be locked, this will indicate that state.</value>
        [DataMember(Name="lockable", EmitDefaultValue=false)]
        public bool? Lockable { get; set; }

        /// <summary>
        /// A flags enumeration indicating the states of the item: whether it&#39;s tracked or locked for example.
        /// </summary>
        /// <value>A flags enumeration indicating the states of the item: whether it&#39;s tracked or locked for example.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public DestinyItemState State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyEntitiesItemsDestinyItemComponent {\n");
            sb.Append("  ItemHash: ").Append(ItemHash).Append("\n");
            sb.Append("  ItemInstanceId: ").Append(ItemInstanceId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  BindStatus: ").Append(BindStatus).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  BucketHash: ").Append(BucketHash).Append("\n");
            sb.Append("  TransferStatus: ").Append(TransferStatus).Append("\n");
            sb.Append("  Lockable: ").Append(Lockable).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyEntitiesItemsDestinyItemComponent);
        }

        /// <summary>
        /// Returns true if DestinyEntitiesItemsDestinyItemComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyEntitiesItemsDestinyItemComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyEntitiesItemsDestinyItemComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemHash == input.ItemHash ||
                    (this.ItemHash != null &&
                    this.ItemHash.Equals(input.ItemHash))
                ) && 
                (
                    this.ItemInstanceId == input.ItemInstanceId ||
                    (this.ItemInstanceId != null &&
                    this.ItemInstanceId.Equals(input.ItemInstanceId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.BindStatus == input.BindStatus ||
                    (this.BindStatus != null &&
                    this.BindStatus.Equals(input.BindStatus))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.BucketHash == input.BucketHash ||
                    (this.BucketHash != null &&
                    this.BucketHash.Equals(input.BucketHash))
                ) && 
                (
                    this.TransferStatus == input.TransferStatus ||
                    (this.TransferStatus != null &&
                    this.TransferStatus.Equals(input.TransferStatus))
                ) && 
                (
                    this.Lockable == input.Lockable ||
                    (this.Lockable != null &&
                    this.Lockable.Equals(input.Lockable))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemHash != null)
                    hashCode = hashCode * 59 + this.ItemHash.GetHashCode();
                if (this.ItemInstanceId != null)
                    hashCode = hashCode * 59 + this.ItemInstanceId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.BindStatus != null)
                    hashCode = hashCode * 59 + this.BindStatus.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.BucketHash != null)
                    hashCode = hashCode * 59 + this.BucketHash.GetHashCode();
                if (this.TransferStatus != null)
                    hashCode = hashCode * 59 + this.TransferStatus.GetHashCode();
                if (this.Lockable != null)
                    hashCode = hashCode * 59 + this.Lockable.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
