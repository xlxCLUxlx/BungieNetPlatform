/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// If you ever wondered how the Vault works, here it is.  The Vault is merely a set of inventory buckets that exist on your Profile/Account level. When you transfer items in the Vault, the game is using the Vault Vendor&#39;s DestinyVendorAcceptedItemDefinitions to see where the appropriate destination bucket is for the source bucket from whence your item is moving. If it finds such an entry, it transfers the item to the other bucket.  The mechanics for Postmaster works similarly, which is also a vendor. All driven by Accepted Items.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyVendorAcceptedItemDefinition :  IEquatable<DestinyDefinitionsDestinyVendorAcceptedItemDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorAcceptedItemDefinition" /> class.
        /// </summary>
        /// <param name="AcceptedInventoryBucketHash">The \&quot;source\&quot; bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition&#39;s acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash..</param>
        /// <param name="DestinationInventoryBucketHash">This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash..</param>
        public DestinyDefinitionsDestinyVendorAcceptedItemDefinition(uint? AcceptedInventoryBucketHash = default(uint?), uint? DestinationInventoryBucketHash = default(uint?))
        {
            this.AcceptedInventoryBucketHash = AcceptedInventoryBucketHash;
            this.DestinationInventoryBucketHash = DestinationInventoryBucketHash;
        }
        
        /// <summary>
        /// The \&quot;source\&quot; bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition&#39;s acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash.
        /// </summary>
        /// <value>The \&quot;source\&quot; bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition&#39;s acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash.</value>
        [DataMember(Name="acceptedInventoryBucketHash", EmitDefaultValue=false)]
        public uint? AcceptedInventoryBucketHash { get; set; }

        /// <summary>
        /// This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash.
        /// </summary>
        /// <value>This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash.</value>
        [DataMember(Name="destinationInventoryBucketHash", EmitDefaultValue=false)]
        public uint? DestinationInventoryBucketHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorAcceptedItemDefinition {\n");
            sb.Append("  AcceptedInventoryBucketHash: ").Append(AcceptedInventoryBucketHash).Append("\n");
            sb.Append("  DestinationInventoryBucketHash: ").Append(DestinationInventoryBucketHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorAcceptedItemDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorAcceptedItemDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorAcceptedItemDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorAcceptedItemDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptedInventoryBucketHash == input.AcceptedInventoryBucketHash ||
                    (this.AcceptedInventoryBucketHash != null &&
                    this.AcceptedInventoryBucketHash.Equals(input.AcceptedInventoryBucketHash))
                ) && 
                (
                    this.DestinationInventoryBucketHash == input.DestinationInventoryBucketHash ||
                    (this.DestinationInventoryBucketHash != null &&
                    this.DestinationInventoryBucketHash.Equals(input.DestinationInventoryBucketHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptedInventoryBucketHash != null)
                    hashCode = hashCode * 59 + this.AcceptedInventoryBucketHash.GetHashCode();
                if (this.DestinationInventoryBucketHash != null)
                    hashCode = hashCode * 59 + this.DestinationInventoryBucketHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
