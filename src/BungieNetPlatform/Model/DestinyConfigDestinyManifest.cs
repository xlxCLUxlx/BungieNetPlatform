/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.
    /// </summary>
    [DataContract]
    public partial class DestinyConfigDestinyManifest :  IEquatable<DestinyConfigDestinyManifest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyConfigDestinyManifest" /> class.
        /// </summary>
        /// <param name="Version">Version.</param>
        /// <param name="MobileAssetContentPath">MobileAssetContentPath.</param>
        /// <param name="MobileGearAssetDataBases">MobileGearAssetDataBases.</param>
        /// <param name="MobileWorldContentPaths">MobileWorldContentPaths.</param>
        /// <param name="MobileClanBannerDatabasePath">MobileClanBannerDatabasePath.</param>
        /// <param name="MobileGearCDN">MobileGearCDN.</param>
        public DestinyConfigDestinyManifest(string Version = default(string), string MobileAssetContentPath = default(string), List<DestinyConfigGearAssetDataBaseDefinition> MobileGearAssetDataBases = default(List<DestinyConfigGearAssetDataBaseDefinition>), Dictionary<string, string> MobileWorldContentPaths = default(Dictionary<string, string>), string MobileClanBannerDatabasePath = default(string), Dictionary<string, string> MobileGearCDN = default(Dictionary<string, string>))
        {
            this.Version = Version;
            this.MobileAssetContentPath = MobileAssetContentPath;
            this.MobileGearAssetDataBases = MobileGearAssetDataBases;
            this.MobileWorldContentPaths = MobileWorldContentPaths;
            this.MobileClanBannerDatabasePath = MobileClanBannerDatabasePath;
            this.MobileGearCDN = MobileGearCDN;
        }
        
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets MobileAssetContentPath
        /// </summary>
        [DataMember(Name="mobileAssetContentPath", EmitDefaultValue=false)]
        public string MobileAssetContentPath { get; set; }

        /// <summary>
        /// Gets or Sets MobileGearAssetDataBases
        /// </summary>
        [DataMember(Name="mobileGearAssetDataBases", EmitDefaultValue=false)]
        public List<DestinyConfigGearAssetDataBaseDefinition> MobileGearAssetDataBases { get; set; }

        /// <summary>
        /// Gets or Sets MobileWorldContentPaths
        /// </summary>
        [DataMember(Name="mobileWorldContentPaths", EmitDefaultValue=false)]
        public Dictionary<string, string> MobileWorldContentPaths { get; set; }

        /// <summary>
        /// Gets or Sets MobileClanBannerDatabasePath
        /// </summary>
        [DataMember(Name="mobileClanBannerDatabasePath", EmitDefaultValue=false)]
        public string MobileClanBannerDatabasePath { get; set; }

        /// <summary>
        /// Gets or Sets MobileGearCDN
        /// </summary>
        [DataMember(Name="mobileGearCDN", EmitDefaultValue=false)]
        public Dictionary<string, string> MobileGearCDN { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyConfigDestinyManifest {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  MobileAssetContentPath: ").Append(MobileAssetContentPath).Append("\n");
            sb.Append("  MobileGearAssetDataBases: ").Append(MobileGearAssetDataBases).Append("\n");
            sb.Append("  MobileWorldContentPaths: ").Append(MobileWorldContentPaths).Append("\n");
            sb.Append("  MobileClanBannerDatabasePath: ").Append(MobileClanBannerDatabasePath).Append("\n");
            sb.Append("  MobileGearCDN: ").Append(MobileGearCDN).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyConfigDestinyManifest);
        }

        /// <summary>
        /// Returns true if DestinyConfigDestinyManifest instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyConfigDestinyManifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyConfigDestinyManifest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.MobileAssetContentPath == input.MobileAssetContentPath ||
                    (this.MobileAssetContentPath != null &&
                    this.MobileAssetContentPath.Equals(input.MobileAssetContentPath))
                ) && 
                (
                    this.MobileGearAssetDataBases == input.MobileGearAssetDataBases ||
                    this.MobileGearAssetDataBases != null &&
                    this.MobileGearAssetDataBases.SequenceEqual(input.MobileGearAssetDataBases)
                ) && 
                (
                    this.MobileWorldContentPaths == input.MobileWorldContentPaths ||
                    this.MobileWorldContentPaths != null &&
                    this.MobileWorldContentPaths.SequenceEqual(input.MobileWorldContentPaths)
                ) && 
                (
                    this.MobileClanBannerDatabasePath == input.MobileClanBannerDatabasePath ||
                    (this.MobileClanBannerDatabasePath != null &&
                    this.MobileClanBannerDatabasePath.Equals(input.MobileClanBannerDatabasePath))
                ) && 
                (
                    this.MobileGearCDN == input.MobileGearCDN ||
                    this.MobileGearCDN != null &&
                    this.MobileGearCDN.SequenceEqual(input.MobileGearCDN)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.MobileAssetContentPath != null)
                    hashCode = hashCode * 59 + this.MobileAssetContentPath.GetHashCode();
                if (this.MobileGearAssetDataBases != null)
                    hashCode = hashCode * 59 + this.MobileGearAssetDataBases.GetHashCode();
                if (this.MobileWorldContentPaths != null)
                    hashCode = hashCode * 59 + this.MobileWorldContentPaths.GetHashCode();
                if (this.MobileClanBannerDatabasePath != null)
                    hashCode = hashCode * 59 + this.MobileClanBannerDatabasePath.GetHashCode();
                if (this.MobileGearCDN != null)
                    hashCode = hashCode * 59 + this.MobileGearCDN.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
