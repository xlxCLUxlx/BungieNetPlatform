/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// This represents an item being sold by the vendor.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinyVendorItemDefinition :  IEquatable<DestinyDefinitionsDestinyVendorItemDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorItemDefinition" /> class.
        /// </summary>
        /// <param name="VendorItemIndex">The index into the DestinyVendorDefinition.saleList. This is what we use to refer to items being sold throughout live and definition data..</param>
        /// <param name="ItemHash">The hash identifier of the item being sold (DestinyInventoryItemDefinition).  Note that a vendor can sell the same item in multiple ways, so don&#39;t assume that itemHash is a unique identifier for this entity..</param>
        /// <param name="Quantity">The amount you will recieve of the item described in itemHash if you make the purchase..</param>
        /// <param name="FailureIndexes">An list of indexes into the DestinyVendorDefinition.failureStrings array, indicating the possible failure strings that can be relevant for this item..</param>
        /// <param name="Currencies">This is a pre-compiled aggregation of item value and priceOverrideList, so that we have one place to check for what the purchaser must pay for the item. Use this instead of trying to piece together the price separately..</param>
        /// <param name="RefundPolicy">If this item can be refunded, this is the policy for what will be refundd, how, and in what time period..</param>
        /// <param name="RefundTimeLimit">The amount of time before refundability of the newly purchased item will expire..</param>
        /// <param name="CreationLevels">The Default level at which the item will spawn. Almost always driven by an adjusto these days. Ideally should be singular. It&#39;s a long story how this ended up as a list, but there is always either going to be 0:1 of these entities..</param>
        /// <param name="DisplayCategoryIndex">This is an index specifically into the display category, as opposed to the server-side Categories (which do not need to match or pair with each other in any way: server side categories are really just structures for common validation. Display Category will let us more easily categorize items visually).</param>
        /// <param name="CategoryIndex">The index into the DestinyVendorDefinition.categories array, so you can find the category associated with this item..</param>
        /// <param name="OriginalCategoryIndex">Same as above, but for the original category indexes..</param>
        /// <param name="MinimumLevel">The minimum character level at which this item is available for sale..</param>
        /// <param name="MaximumLevel">The maximum character level at which this item is available for sale..</param>
        /// <param name="Action">The action to be performed when purchasing the item, if it&#39;s not just \&quot;buy\&quot;..</param>
        /// <param name="DisplayCategory">The string identifier for the category selling this item..</param>
        /// <param name="InventoryBucketHash">The inventory bucket into which this item will be placed upon purchase..</param>
        /// <param name="VisibilityScope">The most restrictive scope that determines whether the item is available in the Vendor&#39;s inventory. See DestinyGatingScope&#39;s documentation for more information.  This can be determined by Unlock gating, or by whether or not the item has purchase level requirements (minimumLevel and maximumLevel properties)..</param>
        /// <param name="PurchasableScope">Similar to visibilityScope, it represents the most restrictive scope that determines whether the item can be purchased. It will at least be as restrictive as visibilityScope, but could be more restrictive if the item has additional purchase requirements beyond whether it is merely visible or not.  See DestinyGatingScope&#39;s documentation for more information..</param>
        public DestinyDefinitionsDestinyVendorItemDefinition(int? VendorItemIndex = default(int?), uint? ItemHash = default(uint?), int? Quantity = default(int?), List<int?> FailureIndexes = default(List<int?>), List<DestinyDestinyItemQuantity> Currencies = default(List<DestinyDestinyItemQuantity>), DestinyDestinyVendorItemRefundPolicy RefundPolicy = default(DestinyDestinyVendorItemRefundPolicy), int? RefundTimeLimit = default(int?), List<DestinyDefinitionsDestinyItemCreationEntryLevelDefinition> CreationLevels = default(List<DestinyDefinitionsDestinyItemCreationEntryLevelDefinition>), int? DisplayCategoryIndex = default(int?), int? CategoryIndex = default(int?), int? OriginalCategoryIndex = default(int?), int? MinimumLevel = default(int?), int? MaximumLevel = default(int?), DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition Action = default(DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition), string DisplayCategory = default(string), uint? InventoryBucketHash = default(uint?), DestinyDestinyGatingScope VisibilityScope = default(DestinyDestinyGatingScope), DestinyDestinyGatingScope PurchasableScope = default(DestinyDestinyGatingScope))
        {
            this.VendorItemIndex = VendorItemIndex;
            this.ItemHash = ItemHash;
            this.Quantity = Quantity;
            this.FailureIndexes = FailureIndexes;
            this.Currencies = Currencies;
            this.RefundPolicy = RefundPolicy;
            this.RefundTimeLimit = RefundTimeLimit;
            this.CreationLevels = CreationLevels;
            this.DisplayCategoryIndex = DisplayCategoryIndex;
            this.CategoryIndex = CategoryIndex;
            this.OriginalCategoryIndex = OriginalCategoryIndex;
            this.MinimumLevel = MinimumLevel;
            this.MaximumLevel = MaximumLevel;
            this.Action = Action;
            this.DisplayCategory = DisplayCategory;
            this.InventoryBucketHash = InventoryBucketHash;
            this.VisibilityScope = VisibilityScope;
            this.PurchasableScope = PurchasableScope;
        }
        
        /// <summary>
        /// The index into the DestinyVendorDefinition.saleList. This is what we use to refer to items being sold throughout live and definition data.
        /// </summary>
        /// <value>The index into the DestinyVendorDefinition.saleList. This is what we use to refer to items being sold throughout live and definition data.</value>
        [DataMember(Name="vendorItemIndex", EmitDefaultValue=false)]
        public int? VendorItemIndex { get; set; }

        /// <summary>
        /// The hash identifier of the item being sold (DestinyInventoryItemDefinition).  Note that a vendor can sell the same item in multiple ways, so don&#39;t assume that itemHash is a unique identifier for this entity.
        /// </summary>
        /// <value>The hash identifier of the item being sold (DestinyInventoryItemDefinition).  Note that a vendor can sell the same item in multiple ways, so don&#39;t assume that itemHash is a unique identifier for this entity.</value>
        [DataMember(Name="itemHash", EmitDefaultValue=false)]
        public uint? ItemHash { get; set; }

        /// <summary>
        /// The amount you will recieve of the item described in itemHash if you make the purchase.
        /// </summary>
        /// <value>The amount you will recieve of the item described in itemHash if you make the purchase.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// An list of indexes into the DestinyVendorDefinition.failureStrings array, indicating the possible failure strings that can be relevant for this item.
        /// </summary>
        /// <value>An list of indexes into the DestinyVendorDefinition.failureStrings array, indicating the possible failure strings that can be relevant for this item.</value>
        [DataMember(Name="failureIndexes", EmitDefaultValue=false)]
        public List<int?> FailureIndexes { get; set; }

        /// <summary>
        /// This is a pre-compiled aggregation of item value and priceOverrideList, so that we have one place to check for what the purchaser must pay for the item. Use this instead of trying to piece together the price separately.
        /// </summary>
        /// <value>This is a pre-compiled aggregation of item value and priceOverrideList, so that we have one place to check for what the purchaser must pay for the item. Use this instead of trying to piece together the price separately.</value>
        [DataMember(Name="currencies", EmitDefaultValue=false)]
        public List<DestinyDestinyItemQuantity> Currencies { get; set; }

        /// <summary>
        /// If this item can be refunded, this is the policy for what will be refundd, how, and in what time period.
        /// </summary>
        /// <value>If this item can be refunded, this is the policy for what will be refundd, how, and in what time period.</value>
        [DataMember(Name="refundPolicy", EmitDefaultValue=false)]
        public DestinyDestinyVendorItemRefundPolicy RefundPolicy { get; set; }

        /// <summary>
        /// The amount of time before refundability of the newly purchased item will expire.
        /// </summary>
        /// <value>The amount of time before refundability of the newly purchased item will expire.</value>
        [DataMember(Name="refundTimeLimit", EmitDefaultValue=false)]
        public int? RefundTimeLimit { get; set; }

        /// <summary>
        /// The Default level at which the item will spawn. Almost always driven by an adjusto these days. Ideally should be singular. It&#39;s a long story how this ended up as a list, but there is always either going to be 0:1 of these entities.
        /// </summary>
        /// <value>The Default level at which the item will spawn. Almost always driven by an adjusto these days. Ideally should be singular. It&#39;s a long story how this ended up as a list, but there is always either going to be 0:1 of these entities.</value>
        [DataMember(Name="creationLevels", EmitDefaultValue=false)]
        public List<DestinyDefinitionsDestinyItemCreationEntryLevelDefinition> CreationLevels { get; set; }

        /// <summary>
        /// This is an index specifically into the display category, as opposed to the server-side Categories (which do not need to match or pair with each other in any way: server side categories are really just structures for common validation. Display Category will let us more easily categorize items visually)
        /// </summary>
        /// <value>This is an index specifically into the display category, as opposed to the server-side Categories (which do not need to match or pair with each other in any way: server side categories are really just structures for common validation. Display Category will let us more easily categorize items visually)</value>
        [DataMember(Name="displayCategoryIndex", EmitDefaultValue=false)]
        public int? DisplayCategoryIndex { get; set; }

        /// <summary>
        /// The index into the DestinyVendorDefinition.categories array, so you can find the category associated with this item.
        /// </summary>
        /// <value>The index into the DestinyVendorDefinition.categories array, so you can find the category associated with this item.</value>
        [DataMember(Name="categoryIndex", EmitDefaultValue=false)]
        public int? CategoryIndex { get; set; }

        /// <summary>
        /// Same as above, but for the original category indexes.
        /// </summary>
        /// <value>Same as above, but for the original category indexes.</value>
        [DataMember(Name="originalCategoryIndex", EmitDefaultValue=false)]
        public int? OriginalCategoryIndex { get; set; }

        /// <summary>
        /// The minimum character level at which this item is available for sale.
        /// </summary>
        /// <value>The minimum character level at which this item is available for sale.</value>
        [DataMember(Name="minimumLevel", EmitDefaultValue=false)]
        public int? MinimumLevel { get; set; }

        /// <summary>
        /// The maximum character level at which this item is available for sale.
        /// </summary>
        /// <value>The maximum character level at which this item is available for sale.</value>
        [DataMember(Name="maximumLevel", EmitDefaultValue=false)]
        public int? MaximumLevel { get; set; }

        /// <summary>
        /// The action to be performed when purchasing the item, if it&#39;s not just \&quot;buy\&quot;.
        /// </summary>
        /// <value>The action to be performed when purchasing the item, if it&#39;s not just \&quot;buy\&quot;.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition Action { get; set; }

        /// <summary>
        /// The string identifier for the category selling this item.
        /// </summary>
        /// <value>The string identifier for the category selling this item.</value>
        [DataMember(Name="displayCategory", EmitDefaultValue=false)]
        public string DisplayCategory { get; set; }

        /// <summary>
        /// The inventory bucket into which this item will be placed upon purchase.
        /// </summary>
        /// <value>The inventory bucket into which this item will be placed upon purchase.</value>
        [DataMember(Name="inventoryBucketHash", EmitDefaultValue=false)]
        public uint? InventoryBucketHash { get; set; }

        /// <summary>
        /// The most restrictive scope that determines whether the item is available in the Vendor&#39;s inventory. See DestinyGatingScope&#39;s documentation for more information.  This can be determined by Unlock gating, or by whether or not the item has purchase level requirements (minimumLevel and maximumLevel properties).
        /// </summary>
        /// <value>The most restrictive scope that determines whether the item is available in the Vendor&#39;s inventory. See DestinyGatingScope&#39;s documentation for more information.  This can be determined by Unlock gating, or by whether or not the item has purchase level requirements (minimumLevel and maximumLevel properties).</value>
        [DataMember(Name="visibilityScope", EmitDefaultValue=false)]
        public DestinyDestinyGatingScope VisibilityScope { get; set; }

        /// <summary>
        /// Similar to visibilityScope, it represents the most restrictive scope that determines whether the item can be purchased. It will at least be as restrictive as visibilityScope, but could be more restrictive if the item has additional purchase requirements beyond whether it is merely visible or not.  See DestinyGatingScope&#39;s documentation for more information.
        /// </summary>
        /// <value>Similar to visibilityScope, it represents the most restrictive scope that determines whether the item can be purchased. It will at least be as restrictive as visibilityScope, but could be more restrictive if the item has additional purchase requirements beyond whether it is merely visible or not.  See DestinyGatingScope&#39;s documentation for more information.</value>
        [DataMember(Name="purchasableScope", EmitDefaultValue=false)]
        public DestinyDestinyGatingScope PurchasableScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorItemDefinition {\n");
            sb.Append("  VendorItemIndex: ").Append(VendorItemIndex).Append("\n");
            sb.Append("  ItemHash: ").Append(ItemHash).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  FailureIndexes: ").Append(FailureIndexes).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("  RefundPolicy: ").Append(RefundPolicy).Append("\n");
            sb.Append("  RefundTimeLimit: ").Append(RefundTimeLimit).Append("\n");
            sb.Append("  CreationLevels: ").Append(CreationLevels).Append("\n");
            sb.Append("  DisplayCategoryIndex: ").Append(DisplayCategoryIndex).Append("\n");
            sb.Append("  CategoryIndex: ").Append(CategoryIndex).Append("\n");
            sb.Append("  OriginalCategoryIndex: ").Append(OriginalCategoryIndex).Append("\n");
            sb.Append("  MinimumLevel: ").Append(MinimumLevel).Append("\n");
            sb.Append("  MaximumLevel: ").Append(MaximumLevel).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  DisplayCategory: ").Append(DisplayCategory).Append("\n");
            sb.Append("  InventoryBucketHash: ").Append(InventoryBucketHash).Append("\n");
            sb.Append("  VisibilityScope: ").Append(VisibilityScope).Append("\n");
            sb.Append("  PurchasableScope: ").Append(PurchasableScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorItemDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorItemDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorItemDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorItemDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VendorItemIndex == input.VendorItemIndex ||
                    (this.VendorItemIndex != null &&
                    this.VendorItemIndex.Equals(input.VendorItemIndex))
                ) && 
                (
                    this.ItemHash == input.ItemHash ||
                    (this.ItemHash != null &&
                    this.ItemHash.Equals(input.ItemHash))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.FailureIndexes == input.FailureIndexes ||
                    this.FailureIndexes != null &&
                    this.FailureIndexes.SequenceEqual(input.FailureIndexes)
                ) && 
                (
                    this.Currencies == input.Currencies ||
                    this.Currencies != null &&
                    this.Currencies.SequenceEqual(input.Currencies)
                ) && 
                (
                    this.RefundPolicy == input.RefundPolicy ||
                    (this.RefundPolicy != null &&
                    this.RefundPolicy.Equals(input.RefundPolicy))
                ) && 
                (
                    this.RefundTimeLimit == input.RefundTimeLimit ||
                    (this.RefundTimeLimit != null &&
                    this.RefundTimeLimit.Equals(input.RefundTimeLimit))
                ) && 
                (
                    this.CreationLevels == input.CreationLevels ||
                    this.CreationLevels != null &&
                    this.CreationLevels.SequenceEqual(input.CreationLevels)
                ) && 
                (
                    this.DisplayCategoryIndex == input.DisplayCategoryIndex ||
                    (this.DisplayCategoryIndex != null &&
                    this.DisplayCategoryIndex.Equals(input.DisplayCategoryIndex))
                ) && 
                (
                    this.CategoryIndex == input.CategoryIndex ||
                    (this.CategoryIndex != null &&
                    this.CategoryIndex.Equals(input.CategoryIndex))
                ) && 
                (
                    this.OriginalCategoryIndex == input.OriginalCategoryIndex ||
                    (this.OriginalCategoryIndex != null &&
                    this.OriginalCategoryIndex.Equals(input.OriginalCategoryIndex))
                ) && 
                (
                    this.MinimumLevel == input.MinimumLevel ||
                    (this.MinimumLevel != null &&
                    this.MinimumLevel.Equals(input.MinimumLevel))
                ) && 
                (
                    this.MaximumLevel == input.MaximumLevel ||
                    (this.MaximumLevel != null &&
                    this.MaximumLevel.Equals(input.MaximumLevel))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.DisplayCategory == input.DisplayCategory ||
                    (this.DisplayCategory != null &&
                    this.DisplayCategory.Equals(input.DisplayCategory))
                ) && 
                (
                    this.InventoryBucketHash == input.InventoryBucketHash ||
                    (this.InventoryBucketHash != null &&
                    this.InventoryBucketHash.Equals(input.InventoryBucketHash))
                ) && 
                (
                    this.VisibilityScope == input.VisibilityScope ||
                    (this.VisibilityScope != null &&
                    this.VisibilityScope.Equals(input.VisibilityScope))
                ) && 
                (
                    this.PurchasableScope == input.PurchasableScope ||
                    (this.PurchasableScope != null &&
                    this.PurchasableScope.Equals(input.PurchasableScope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VendorItemIndex != null)
                    hashCode = hashCode * 59 + this.VendorItemIndex.GetHashCode();
                if (this.ItemHash != null)
                    hashCode = hashCode * 59 + this.ItemHash.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.FailureIndexes != null)
                    hashCode = hashCode * 59 + this.FailureIndexes.GetHashCode();
                if (this.Currencies != null)
                    hashCode = hashCode * 59 + this.Currencies.GetHashCode();
                if (this.RefundPolicy != null)
                    hashCode = hashCode * 59 + this.RefundPolicy.GetHashCode();
                if (this.RefundTimeLimit != null)
                    hashCode = hashCode * 59 + this.RefundTimeLimit.GetHashCode();
                if (this.CreationLevels != null)
                    hashCode = hashCode * 59 + this.CreationLevels.GetHashCode();
                if (this.DisplayCategoryIndex != null)
                    hashCode = hashCode * 59 + this.DisplayCategoryIndex.GetHashCode();
                if (this.CategoryIndex != null)
                    hashCode = hashCode * 59 + this.CategoryIndex.GetHashCode();
                if (this.OriginalCategoryIndex != null)
                    hashCode = hashCode * 59 + this.OriginalCategoryIndex.GetHashCode();
                if (this.MinimumLevel != null)
                    hashCode = hashCode * 59 + this.MinimumLevel.GetHashCode();
                if (this.MaximumLevel != null)
                    hashCode = hashCode * 59 + this.MaximumLevel.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.DisplayCategory != null)
                    hashCode = hashCode * 59 + this.DisplayCategory.GetHashCode();
                if (this.InventoryBucketHash != null)
                    hashCode = hashCode * 59 + this.InventoryBucketHash.GetHashCode();
                if (this.VisibilityScope != null)
                    hashCode = hashCode * 59 + this.VisibilityScope.GetHashCode();
                if (this.PurchasableScope != null)
                    hashCode = hashCode * 59 + this.PurchasableScope.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
