/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// DestinyHistoricalStatsDestinyPostGameCarnageReportEntry
    /// </summary>
    [DataContract]
    public partial class DestinyHistoricalStatsDestinyPostGameCarnageReportEntry :  IEquatable<DestinyHistoricalStatsDestinyPostGameCarnageReportEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyHistoricalStatsDestinyPostGameCarnageReportEntry" /> class.
        /// </summary>
        /// <param name="Standing">Standing of the player.</param>
        /// <param name="Score">Score of the player if available.</param>
        /// <param name="Player">Identity details of the player.</param>
        /// <param name="CharacterId">ID of the player&#39;s character used in the activity..</param>
        /// <param name="Values">Collection of stats for the player in this activity..</param>
        /// <param name="Extended">Extended data extracted from the activity blob..</param>
        public DestinyHistoricalStatsDestinyPostGameCarnageReportEntry(int? Standing = default(int?), DestinyHistoricalStatsDestinyHistoricalStatsValue Score = default(DestinyHistoricalStatsDestinyHistoricalStatsValue), DestinyHistoricalStatsDestinyPlayer Player = default(DestinyHistoricalStatsDestinyPlayer), long? CharacterId = default(long?), Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> Values = default(Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue>), DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData Extended = default(DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData))
        {
            this.Standing = Standing;
            this.Score = Score;
            this.Player = Player;
            this.CharacterId = CharacterId;
            this.Values = Values;
            this.Extended = Extended;
        }
        
        /// <summary>
        /// Standing of the player
        /// </summary>
        /// <value>Standing of the player</value>
        [DataMember(Name="standing", EmitDefaultValue=false)]
        public int? Standing { get; set; }

        /// <summary>
        /// Score of the player if available
        /// </summary>
        /// <value>Score of the player if available</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public DestinyHistoricalStatsDestinyHistoricalStatsValue Score { get; set; }

        /// <summary>
        /// Identity details of the player
        /// </summary>
        /// <value>Identity details of the player</value>
        [DataMember(Name="player", EmitDefaultValue=false)]
        public DestinyHistoricalStatsDestinyPlayer Player { get; set; }

        /// <summary>
        /// ID of the player&#39;s character used in the activity.
        /// </summary>
        /// <value>ID of the player&#39;s character used in the activity.</value>
        [DataMember(Name="characterId", EmitDefaultValue=false)]
        public long? CharacterId { get; set; }

        /// <summary>
        /// Collection of stats for the player in this activity.
        /// </summary>
        /// <value>Collection of stats for the player in this activity.</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> Values { get; set; }

        /// <summary>
        /// Extended data extracted from the activity blob.
        /// </summary>
        /// <value>Extended data extracted from the activity blob.</value>
        [DataMember(Name="extended", EmitDefaultValue=false)]
        public DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData Extended { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyHistoricalStatsDestinyPostGameCarnageReportEntry {\n");
            sb.Append("  Standing: ").Append(Standing).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyHistoricalStatsDestinyPostGameCarnageReportEntry);
        }

        /// <summary>
        /// Returns true if DestinyHistoricalStatsDestinyPostGameCarnageReportEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyHistoricalStatsDestinyPostGameCarnageReportEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyHistoricalStatsDestinyPostGameCarnageReportEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Standing == input.Standing ||
                    (this.Standing != null &&
                    this.Standing.Equals(input.Standing))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Player == input.Player ||
                    (this.Player != null &&
                    this.Player.Equals(input.Player))
                ) && 
                (
                    this.CharacterId == input.CharacterId ||
                    (this.CharacterId != null &&
                    this.CharacterId.Equals(input.CharacterId))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.Extended == input.Extended ||
                    (this.Extended != null &&
                    this.Extended.Equals(input.Extended))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Standing != null)
                    hashCode = hashCode * 59 + this.Standing.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Player != null)
                    hashCode = hashCode * 59 + this.Player.GetHashCode();
                if (this.CharacterId != null)
                    hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                if (this.Extended != null)
                    hashCode = hashCode * 59 + this.Extended.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
