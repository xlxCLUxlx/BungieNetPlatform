/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// Perks are modifiers to a character or item that can be applied situationally.  - Perks determine a weapons&#39; damage type.  - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)  - Perks are applied for unique alterations of state in Objectives  Anyways, I&#39;m sure you can see why perks are so interesting.  What Perks often don&#39;t have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsDestinySandboxPerkDefinition :  IEquatable<DestinyDefinitionsDestinySandboxPerkDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinySandboxPerkDefinition" /> class.
        /// </summary>
        /// <param name="DisplayProperties">These display properties are by no means guaranteed to be populated. Usually when it is, it&#39;s only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk..</param>
        /// <param name="PerkIdentifier">The string identifier for the perk..</param>
        /// <param name="IsDisplayable">If true, you can actually show the perk in the UI. Otherwise, it doesn&#39;t have useful player-facing information..</param>
        /// <param name="DamageType">If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition..</param>
        /// <param name="DamageTypeHash">The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient..</param>
        /// <param name="PerkGroups">An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order..</param>
        /// <param name="Hash">The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to..</param>
        /// <param name="Index">The index of the entity as it was found in the investment tables..</param>
        /// <param name="Redacted">If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!.</param>
        public DestinyDefinitionsDestinySandboxPerkDefinition(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), string PerkIdentifier = default(string), bool? IsDisplayable = default(bool?), DestinyDamageType DamageType = default(DestinyDamageType), uint? DamageTypeHash = default(uint?), DestinyDefinitionsDestinyTalentNodeStepGroups PerkGroups = default(DestinyDefinitionsDestinyTalentNodeStepGroups), uint? Hash = default(uint?), int? Index = default(int?), bool? Redacted = default(bool?))
        {
            this.DisplayProperties = DisplayProperties;
            this.PerkIdentifier = PerkIdentifier;
            this.IsDisplayable = IsDisplayable;
            this.DamageType = DamageType;
            this.DamageTypeHash = DamageTypeHash;
            this.PerkGroups = PerkGroups;
            this.Hash = Hash;
            this.Index = Index;
            this.Redacted = Redacted;
        }
        
        /// <summary>
        /// These display properties are by no means guaranteed to be populated. Usually when it is, it&#39;s only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.
        /// </summary>
        /// <value>These display properties are by no means guaranteed to be populated. Usually when it is, it&#39;s only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.</value>
        [DataMember(Name="displayProperties", EmitDefaultValue=false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// The string identifier for the perk.
        /// </summary>
        /// <value>The string identifier for the perk.</value>
        [DataMember(Name="perkIdentifier", EmitDefaultValue=false)]
        public string PerkIdentifier { get; set; }

        /// <summary>
        /// If true, you can actually show the perk in the UI. Otherwise, it doesn&#39;t have useful player-facing information.
        /// </summary>
        /// <value>If true, you can actually show the perk in the UI. Otherwise, it doesn&#39;t have useful player-facing information.</value>
        [DataMember(Name="isDisplayable", EmitDefaultValue=false)]
        public bool? IsDisplayable { get; set; }

        /// <summary>
        /// If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.
        /// </summary>
        /// <value>If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.</value>
        [DataMember(Name="damageType", EmitDefaultValue=false)]
        public DestinyDamageType DamageType { get; set; }

        /// <summary>
        /// The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.
        /// </summary>
        /// <value>The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.</value>
        [DataMember(Name="damageTypeHash", EmitDefaultValue=false)]
        public uint? DamageTypeHash { get; set; }

        /// <summary>
        /// An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.
        /// </summary>
        /// <value>An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.</value>
        [DataMember(Name="perkGroups", EmitDefaultValue=false)]
        public DestinyDefinitionsDestinyTalentNodeStepGroups PerkGroups { get; set; }

        /// <summary>
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
        /// </summary>
        /// <value>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public uint? Hash { get; set; }

        /// <summary>
        /// The index of the entity as it was found in the investment tables.
        /// </summary>
        /// <value>The index of the entity as it was found in the investment tables.</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        /// </summary>
        /// <value>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</value>
        [DataMember(Name="redacted", EmitDefaultValue=false)]
        public bool? Redacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinySandboxPerkDefinition {\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  PerkIdentifier: ").Append(PerkIdentifier).Append("\n");
            sb.Append("  IsDisplayable: ").Append(IsDisplayable).Append("\n");
            sb.Append("  DamageType: ").Append(DamageType).Append("\n");
            sb.Append("  DamageTypeHash: ").Append(DamageTypeHash).Append("\n");
            sb.Append("  PerkGroups: ").Append(PerkGroups).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Redacted: ").Append(Redacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinySandboxPerkDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinySandboxPerkDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinySandboxPerkDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinySandboxPerkDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.PerkIdentifier == input.PerkIdentifier ||
                    (this.PerkIdentifier != null &&
                    this.PerkIdentifier.Equals(input.PerkIdentifier))
                ) && 
                (
                    this.IsDisplayable == input.IsDisplayable ||
                    (this.IsDisplayable != null &&
                    this.IsDisplayable.Equals(input.IsDisplayable))
                ) && 
                (
                    this.DamageType == input.DamageType ||
                    (this.DamageType != null &&
                    this.DamageType.Equals(input.DamageType))
                ) && 
                (
                    this.DamageTypeHash == input.DamageTypeHash ||
                    (this.DamageTypeHash != null &&
                    this.DamageTypeHash.Equals(input.DamageTypeHash))
                ) && 
                (
                    this.PerkGroups == input.PerkGroups ||
                    (this.PerkGroups != null &&
                    this.PerkGroups.Equals(input.PerkGroups))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Redacted == input.Redacted ||
                    (this.Redacted != null &&
                    this.Redacted.Equals(input.Redacted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayProperties != null)
                    hashCode = hashCode * 59 + this.DisplayProperties.GetHashCode();
                if (this.PerkIdentifier != null)
                    hashCode = hashCode * 59 + this.PerkIdentifier.GetHashCode();
                if (this.IsDisplayable != null)
                    hashCode = hashCode * 59 + this.IsDisplayable.GetHashCode();
                if (this.DamageType != null)
                    hashCode = hashCode * 59 + this.DamageType.GetHashCode();
                if (this.DamageTypeHash != null)
                    hashCode = hashCode * 59 + this.DamageTypeHash.GetHashCode();
                if (this.PerkGroups != null)
                    hashCode = hashCode * 59 + this.PerkGroups.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Redacted != null)
                    hashCode = hashCode * 59 + this.Redacted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
