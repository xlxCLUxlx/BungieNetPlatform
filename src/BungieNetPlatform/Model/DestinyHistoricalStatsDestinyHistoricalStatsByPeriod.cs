/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = BungieNetPlatform.Client.SwaggerDateConverter;

namespace BungieNetPlatform.Model
{
    /// <summary>
    /// DestinyHistoricalStatsDestinyHistoricalStatsByPeriod
    /// </summary>
    [DataContract]
    public partial class DestinyHistoricalStatsDestinyHistoricalStatsByPeriod :  IEquatable<DestinyHistoricalStatsDestinyHistoricalStatsByPeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyHistoricalStatsDestinyHistoricalStatsByPeriod" /> class.
        /// </summary>
        /// <param name="AllTime">AllTime.</param>
        /// <param name="AllTimeTier1">AllTimeTier1.</param>
        /// <param name="AllTimeTier2">AllTimeTier2.</param>
        /// <param name="AllTimeTier3">AllTimeTier3.</param>
        /// <param name="Daily">Daily.</param>
        /// <param name="Monthly">Monthly.</param>
        public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod(Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTime = default(Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue>), Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier1 = default(Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue>), Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier2 = default(Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue>), Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier3 = default(Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue>), List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> Daily = default(List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>), List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> Monthly = default(List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>))
        {
            this.AllTime = AllTime;
            this.AllTimeTier1 = AllTimeTier1;
            this.AllTimeTier2 = AllTimeTier2;
            this.AllTimeTier3 = AllTimeTier3;
            this.Daily = Daily;
            this.Monthly = Monthly;
        }
        
        /// <summary>
        /// Gets or Sets AllTime
        /// </summary>
        [DataMember(Name="allTime", EmitDefaultValue=false)]
        public Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTime { get; set; }

        /// <summary>
        /// Gets or Sets AllTimeTier1
        /// </summary>
        [DataMember(Name="allTimeTier1", EmitDefaultValue=false)]
        public Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier1 { get; set; }

        /// <summary>
        /// Gets or Sets AllTimeTier2
        /// </summary>
        [DataMember(Name="allTimeTier2", EmitDefaultValue=false)]
        public Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier2 { get; set; }

        /// <summary>
        /// Gets or Sets AllTimeTier3
        /// </summary>
        [DataMember(Name="allTimeTier3", EmitDefaultValue=false)]
        public Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier3 { get; set; }

        /// <summary>
        /// Gets or Sets Daily
        /// </summary>
        [DataMember(Name="daily", EmitDefaultValue=false)]
        public List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> Daily { get; set; }

        /// <summary>
        /// Gets or Sets Monthly
        /// </summary>
        [DataMember(Name="monthly", EmitDefaultValue=false)]
        public List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> Monthly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyHistoricalStatsDestinyHistoricalStatsByPeriod {\n");
            sb.Append("  AllTime: ").Append(AllTime).Append("\n");
            sb.Append("  AllTimeTier1: ").Append(AllTimeTier1).Append("\n");
            sb.Append("  AllTimeTier2: ").Append(AllTimeTier2).Append("\n");
            sb.Append("  AllTimeTier3: ").Append(AllTimeTier3).Append("\n");
            sb.Append("  Daily: ").Append(Daily).Append("\n");
            sb.Append("  Monthly: ").Append(Monthly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyHistoricalStatsDestinyHistoricalStatsByPeriod);
        }

        /// <summary>
        /// Returns true if DestinyHistoricalStatsDestinyHistoricalStatsByPeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyHistoricalStatsDestinyHistoricalStatsByPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyHistoricalStatsDestinyHistoricalStatsByPeriod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllTime == input.AllTime ||
                    this.AllTime != null &&
                    this.AllTime.SequenceEqual(input.AllTime)
                ) && 
                (
                    this.AllTimeTier1 == input.AllTimeTier1 ||
                    this.AllTimeTier1 != null &&
                    this.AllTimeTier1.SequenceEqual(input.AllTimeTier1)
                ) && 
                (
                    this.AllTimeTier2 == input.AllTimeTier2 ||
                    this.AllTimeTier2 != null &&
                    this.AllTimeTier2.SequenceEqual(input.AllTimeTier2)
                ) && 
                (
                    this.AllTimeTier3 == input.AllTimeTier3 ||
                    this.AllTimeTier3 != null &&
                    this.AllTimeTier3.SequenceEqual(input.AllTimeTier3)
                ) && 
                (
                    this.Daily == input.Daily ||
                    this.Daily != null &&
                    this.Daily.SequenceEqual(input.Daily)
                ) && 
                (
                    this.Monthly == input.Monthly ||
                    this.Monthly != null &&
                    this.Monthly.SequenceEqual(input.Monthly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllTime != null)
                    hashCode = hashCode * 59 + this.AllTime.GetHashCode();
                if (this.AllTimeTier1 != null)
                    hashCode = hashCode * 59 + this.AllTimeTier1.GetHashCode();
                if (this.AllTimeTier2 != null)
                    hashCode = hashCode * 59 + this.AllTimeTier2.GetHashCode();
                if (this.AllTimeTier3 != null)
                    hashCode = hashCode * 59 + this.AllTimeTier3.GetHashCode();
                if (this.Daily != null)
                    hashCode = hashCode * 59 + this.Daily.GetHashCode();
                if (this.Monthly != null)
                    hashCode = hashCode * 59 + this.Monthly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
