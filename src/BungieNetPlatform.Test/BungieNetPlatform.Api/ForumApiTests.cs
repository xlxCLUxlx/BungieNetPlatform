/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BungieNetPlatform.Client;
using BungieNetPlatform.BungieNetPlatform.Api;
using BungieNetPlatform.BungieNetPlatform.Model;

namespace BungieNetPlatform.Test
{
    /// <summary>
    ///  Class for testing ForumApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ForumApiTests
    {
        private ForumApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ForumApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ForumApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ForumApi
            //Assert.IsInstanceOfType(typeof(ForumApi), instance, "instance is a ForumApi");
        }

        
        /// <summary>
        /// Test ForumApproveFireteamThread
        /// </summary>
        [Test]
        public void ForumApproveFireteamThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? topicId = null;
            //var response = instance.ForumApproveFireteamThread(topicId);
            //Assert.IsInstanceOf<InlineResponse20010> (response, "response is InlineResponse20010");
        }
        
        /// <summary>
        /// Test ForumGetCoreTopicsPaged
        /// </summary>
        [Test]
        public void ForumGetCoreTopicsPagedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? categoryFilter = null;
            //int? page = null;
            //int? quickDate = null;
            //int? sort = null;
            //string locales = null;
            //var response = instance.ForumGetCoreTopicsPaged(categoryFilter, page, quickDate, sort, locales);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test ForumGetForumTagSuggestions
        /// </summary>
        [Test]
        public void ForumGetForumTagSuggestionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string partialtag = null;
            //var response = instance.ForumGetForumTagSuggestions(partialtag);
            //Assert.IsInstanceOf<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
        /// <summary>
        /// Test ForumGetPoll
        /// </summary>
        [Test]
        public void ForumGetPollTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? topicId = null;
            //var response = instance.ForumGetPoll(topicId);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test ForumGetPostAndParent
        /// </summary>
        [Test]
        public void ForumGetPostAndParentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ulong? childPostId = null;
            //string showbanned = null;
            //var response = instance.ForumGetPostAndParent(childPostId, showbanned);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test ForumGetPostAndParentAwaitingApproval
        /// </summary>
        [Test]
        public void ForumGetPostAndParentAwaitingApprovalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ulong? childPostId = null;
            //string showbanned = null;
            //var response = instance.ForumGetPostAndParentAwaitingApproval(childPostId, showbanned);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test ForumGetPostsThreadedPaged
        /// </summary>
        [Test]
        public void ForumGetPostsThreadedPagedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? getParentPost = null;
            //int? page = null;
            //int? pageSize = null;
            //ulong? parentPostId = null;
            //int? replySize = null;
            //bool? rootThreadMode = null;
            //int? sortMode = null;
            //string showbanned = null;
            //var response = instance.ForumGetPostsThreadedPaged(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test ForumGetPostsThreadedPagedFromChild
        /// </summary>
        [Test]
        public void ForumGetPostsThreadedPagedFromChildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ulong? childPostId = null;
            //int? page = null;
            //int? pageSize = null;
            //int? replySize = null;
            //bool? rootThreadMode = null;
            //int? sortMode = null;
            //string showbanned = null;
            //var response = instance.ForumGetPostsThreadedPagedFromChild(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test ForumGetRecruitmentThreadSummaries
        /// </summary>
        [Test]
        public void ForumGetRecruitmentThreadSummariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ForumGetRecruitmentThreadSummaries();
            //Assert.IsInstanceOf<InlineResponse20011> (response, "response is InlineResponse20011");
        }
        
        /// <summary>
        /// Test ForumGetTopicForContent
        /// </summary>
        [Test]
        public void ForumGetTopicForContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? contentId = null;
            //var response = instance.ForumGetTopicForContent(contentId);
            //Assert.IsInstanceOf<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test ForumGetTopicsPaged
        /// </summary>
        [Test]
        public void ForumGetTopicsPagedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? categoryFilter = null;
            //long? group = null;
            //int? page = null;
            //int? pageSize = null;
            //int? quickDate = null;
            //int? sort = null;
            //string locales = null;
            //string tagstring = null;
            //var response = instance.ForumGetTopicsPaged(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test ForumJoinFireteamThread
        /// </summary>
        [Test]
        public void ForumJoinFireteamThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? topicId = null;
            //var response = instance.ForumJoinFireteamThread(topicId);
            //Assert.IsInstanceOf<InlineResponse2009> (response, "response is InlineResponse2009");
        }
        
        /// <summary>
        /// Test ForumKickBanFireteamApplicant
        /// </summary>
        [Test]
        public void ForumKickBanFireteamApplicantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? targetMembershipId = null;
            //long? topicId = null;
            //var response = instance.ForumKickBanFireteamApplicant(targetMembershipId, topicId);
            //Assert.IsInstanceOf<InlineResponse2009> (response, "response is InlineResponse2009");
        }
        
        /// <summary>
        /// Test ForumLeaveFireteamThread
        /// </summary>
        [Test]
        public void ForumLeaveFireteamThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? topicId = null;
            //var response = instance.ForumLeaveFireteamThread(topicId);
            //Assert.IsInstanceOf<InlineResponse2009> (response, "response is InlineResponse2009");
        }
        
    }

}
